{
  "version": 3,
  "sources": ["../../../dev/gui/src/2D/valueAndUnit.ts", "../../../dev/gui/src/2D/measure.ts", "../../../dev/gui/src/2D/math2D.ts", "../../../dev/gui/src/2D/controls/control.ts", "../../../dev/gui/src/2D/controls/container.ts", "../../../dev/gui/src/2D/controls/rectangle.ts", "../../../dev/gui/src/2D/controls/textBlock.ts", "../../../dev/gui/src/2D/controls/image.ts", "../../../dev/gui/src/2D/controls/button.ts", "../../../dev/gui/src/2D/controls/stackPanel.ts", "../../../dev/gui/src/2D/controls/checkbox.ts", "../../../dev/gui/src/2D/controls/textWrapper.ts", "../../../dev/gui/src/2D/controls/inputText.ts", "../../../dev/gui/src/2D/controls/grid.ts", "../../../dev/gui/src/2D/controls/colorpicker.ts", "../../../dev/gui/src/2D/controls/ellipse.ts", "../../../dev/gui/src/2D/controls/focusableButton.ts", "../../@babylonjs/gui/2D/controls/focusableControl.js", "../../../dev/gui/src/2D/controls/inputTextArea.ts", "../../../dev/gui/src/2D/controls/inputPassword.ts", "../../../dev/gui/src/2D/controls/line.ts", "../../../dev/gui/src/2D/multiLinePoint.ts", "../../../dev/gui/src/2D/controls/multiLine.ts", "../../../dev/gui/src/2D/controls/radioButton.ts", "../../../dev/gui/src/2D/controls/sliders/baseSlider.ts", "../../../dev/gui/src/2D/controls/sliders/slider.ts", "../../../dev/gui/src/2D/controls/selector.ts", "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewerWindow.ts", "../../../dev/gui/src/2D/controls/sliders/scrollBar.ts", "../../../dev/gui/src/2D/controls/sliders/imageScrollBar.ts", "../../../dev/gui/src/2D/controls/scrollViewers/scrollViewer.ts", "../../../dev/gui/src/2D/controls/toggleButton.ts", "../../../dev/gui/src/2D/controls/virtualKeyboard.ts", "../../../dev/gui/src/2D/controls/displayGrid.ts", "../../../dev/gui/src/2D/controls/sliders/imageBasedSlider.ts", "../../../dev/gui/src/2D/controls/statics.ts", "../../../dev/gui/src/2D/controls/gradient/BaseGradient.ts", "../../../dev/gui/src/2D/controls/gradient/LinearGradient.ts", "../../../dev/gui/src/2D/controls/gradient/RadialGradient.ts", "../../../dev/gui/src/2D/controls/index.ts", "../../../dev/gui/src/2D/style.ts", "../../../dev/gui/src/2D/advancedDynamicTexture.ts", "../../../dev/gui/src/2D/adtInstrumentation.ts", "../../../dev/gui/src/2D/xmlLoader.ts", "../../../dev/gui/src/2D/index.ts"],
  "sourcesContent": ["import { Observable } from \"core/Misc/observable\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _unit = ValueAndUnit.UNITMODE_PIXEL;\r\n    private _originalUnit: number;\r\n\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Observable event triggered each time the value or unit changes\r\n     */\r\n    public onChangedObservable = new Observable<void>();\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store - defaults to ValueAndUnit.UNITMODE_PIXEL\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(\r\n        value: number,\r\n        /** defines the unit to store */\r\n        unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true\r\n    ) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this._unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /**\r\n     * Gets value (without units)\r\n     * @deprecated use value property instead\r\n     */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Gets value (without units) */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /** Sets value (without units) */\r\n    public set value(value: number) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /** Gets units (without value) */\r\n    public get unit(): number {\r\n        return this._unit;\r\n    }\r\n\r\n    /** Sets units (without value) */\r\n    public set unit(value: number) {\r\n        if (value !== this._unit) {\r\n            this._unit = value;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        if (this.value !== value || this.unit !== unit) {\r\n            // set member variables to notify only once\r\n            this._value = value;\r\n            this._unit = unit;\r\n            this.onChangedObservable.notifyObservers();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            let width: number = 0;\r\n            let height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = Math.ceil((this._value * host.getSize().width) / host.idealWidth);\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = Math.ceil((this._value * host.getSize().height) / host.idealHeight);\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) {\r\n                // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @param decimals defines an optional number of decimals to display\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture, decimals?: number): string {\r\n        switch (this._unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE: {\r\n                const percentage = this.getValue(host) * 100;\r\n                return (decimals ? percentage.toFixed(decimals) : percentage) + \"%\";\r\n            }\r\n            case ValueAndUnit.UNITMODE_PIXEL: {\r\n                const pixels = this.getValue(host);\r\n                return (decimals ? pixels.toFixed(decimals) : pixels) + \"px\";\r\n            }\r\n        }\r\n\r\n        return this._unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed and updated\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        const match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let sourceValue = parseFloat(match[1]);\r\n        let sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this._unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this._unit = sourceUnit;\r\n        this.onChangedObservable.notifyObservers();\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}\r\n", "import type { Matrix2D } from \"./math2D\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nconst tmpRect = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpRect2 = [new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0), new Vector2(0, 0)];\r\n\r\nconst tmpV1 = new Vector2(0, 0);\r\nconst tmpV2 = new Vector2(0, 0);\r\n\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box measure for two given measures\r\n     * @param a Input measure\r\n     * @param b Input measure\r\n     * @param result the resulting bounding measure\r\n     */\r\n    public static CombineToRef(a: Measure, b: Measure, result: Measure) {\r\n        const left = Math.min(a.left, b.left);\r\n        const top = Math.min(a.top, b.top);\r\n        const right = Math.max(a.left + a.width, b.left + b.width);\r\n        const bottom = Math.max(a.top + a.height, b.top + b.height);\r\n        result.left = left;\r\n        result.top = top;\r\n        result.width = right - left;\r\n        result.height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param addX number to add to left\r\n     * @param addY number to add to top\r\n     * @param addWidth number to add to width\r\n     * @param addHeight number to add to height\r\n     * @param result the resulting AABB\r\n     */\r\n    public addAndTransformToRef(transform: Matrix2D, addX: number, addY: number, addWidth: number, addHeight: number, result: Measure) {\r\n        const left = this.left + addX;\r\n        const top = this.top + addY;\r\n        const width = this.width + addWidth;\r\n        const height = this.height + addHeight;\r\n\r\n        tmpRect[0].copyFromFloats(left, top);\r\n        tmpRect[1].copyFromFloats(left + width, top);\r\n        tmpRect[2].copyFromFloats(left + width, top + height);\r\n        tmpRect[3].copyFromFloats(left, top + height);\r\n\r\n        tmpV1.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE);\r\n        tmpV2.copyFromFloats(0, 0);\r\n        for (let i = 0; i < 4; i++) {\r\n            transform.transformCoordinates(tmpRect[i].x, tmpRect[i].y, tmpRect2[i]);\r\n            tmpV1.x = Math.floor(Math.min(tmpV1.x, tmpRect2[i].x));\r\n            tmpV1.y = Math.floor(Math.min(tmpV1.y, tmpRect2[i].y));\r\n            tmpV2.x = Math.ceil(Math.max(tmpV2.x, tmpRect2[i].x));\r\n            tmpV2.y = Math.ceil(Math.max(tmpV2.y, tmpRect2[i].y));\r\n        }\r\n        result.left = tmpV1.x;\r\n        result.top = tmpV1.y;\r\n        result.width = tmpV2.x - tmpV1.x;\r\n        result.height = tmpV2.y - tmpV1.y;\r\n    }\r\n\r\n    /**\r\n     * Computes the axis aligned bounding box of the measure after it is modified by a given transform\r\n     * @param transform the matrix to transform the measure before computing the AABB\r\n     * @param result the resulting AABB\r\n     */\r\n    public transformToRef(transform: Matrix2D, result: Measure) {\r\n        this.addAndTransformToRef(transform, 0, 0, 0, 0, result);\r\n    }\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(\r\n        source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0\r\n    ) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00;\r\n        this.m[1] = m01;\r\n        this.m[2] = m10;\r\n        this.m[3] = m11;\r\n        this.m[4] = m20;\r\n        this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const det = this.determinant();\r\n        if (det < Epsilon * Epsilon) {\r\n            result.m[0] = 0;\r\n            result.m[1] = 0;\r\n            result.m[2] = 0;\r\n            result.m[3] = 0;\r\n            result.m[4] = 0;\r\n            result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        const detDiv = 1 / det;\r\n\r\n        const det4 = l2 * l5 - l3 * l4;\r\n        const det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv;\r\n        result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv;\r\n        result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv;\r\n        result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        const l0 = this.m[0];\r\n        const l1 = this.m[1];\r\n        const l2 = this.m[2];\r\n        const l3 = this.m[3];\r\n        const l4 = this.m[4];\r\n        const l5 = this.m[5];\r\n\r\n        const r0 = other.m[0];\r\n        const r1 = other.m[1];\r\n        const r2 = other.m[2];\r\n        const r3 = other.m[3];\r\n        const r4 = other.m[4];\r\n        const r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2;\r\n        result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2;\r\n        result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4;\r\n        result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates an identity matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     */\r\n    public static IdentityToRef(result: Matrix2D): void {\r\n        result.m[0] = 1;\r\n        result.m[1] = 0;\r\n        result.m[2] = 0;\r\n        result.m[3] = 1;\r\n        result.m[4] = 0;\r\n        result.m[5] = 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        const s = Math.sin(angle);\r\n        const c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Useful math functions\r\n */\r\nexport class MathTools {\r\n    /**\r\n     * Default rounding precision for GUI elements. It should be\r\n     * set to a power of ten, where the exponent means the number\r\n     * of decimal digits to round to, i.e, 100 means 2 decimal digits,\r\n     * 1000 means 3 decimal digits, etc. Default is 100 (2 decimal digits).\r\n     */\r\n    public static DefaultRoundingPrecision = 100;\r\n\r\n    /**\r\n     * Rounds a number to the nearest multiple of a given precision\r\n     * @param value the value to be rounded\r\n     * @param precision the multiple to which the value will be rounded. Default is 100 (2 decimal digits)\r\n     * @returns\r\n     */\r\n    public static Round(value: number, precision: number = MathTools.DefaultRoundingPrecision): number {\r\n        return Math.round(value * precision) / precision;\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Vector2, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { Container } from \"./container\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Measure } from \"../measure\";\r\nimport type { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\nimport { GetClass, RegisterClass } from \"core/Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { IAccessibilityTag } from \"core/IAccessibilityTag\";\r\nimport type { IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#controls\r\n */\r\nexport class Control implements IAnimatable {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @internal */\r\n    public _currentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _tempPaddingMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @internal */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @internal */\r\n    protected _fontOffset: { ascent: number; height: number; descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @internal */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @internal */\r\n    protected _isDirty = true;\r\n    /** @internal */\r\n    protected _wasDirty = false;\r\n    /** @internal */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @internal */\r\n    public _prevCurrentMeasureTransformedIntoGlobalSpace = Measure.Empty();\r\n    /** @internal */\r\n    public _cachedParentMeasure = Measure.Empty();\r\n    private _descendantsOnlyPadding = false;\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    /** @internal */\r\n    public _transformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @internal */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    private _highlightColor = \"#4affff\";\r\n    protected _highlightLineWidth = 2;\r\n    /** @internal */\r\n    public _linkedMesh: Nullable<TransformNode>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _evaluatedMeasure = new Measure(0, 0, 0, 0);\r\n    private _evaluatedParentMeasure = new Measure(0, 0, 0, 0);\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    protected _disabledColorItem = \"#6a6a6a\";\r\n    protected _isReadOnly = false;\r\n    private _gradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @internal */\r\n    public _customData: any = {};\r\n\r\n    /** @internal */\r\n    public _isClipped = false;\r\n\r\n    /** @internal */\r\n    public _automaticSize = false;\r\n\r\n    /** @internal */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the control is readonly (default: false).\r\n     * A readonly control will still raise pointer events but will not react to them\r\n     */\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformed measure, that is the bounding box of the control after applying all transformations\r\n     */\r\n    public get transformedMeasure(): Measure {\r\n        return this._evaluatedMeasure;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    @serialize()\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events. False by default except on the following controls:\r\n     * * Button controls (Button, RadioButton, ToggleButton)\r\n     * * Checkbox\r\n     * * ColorPicker\r\n     * * InputText\r\n     * * Slider\r\n     */\r\n    @serialize()\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    @serialize()\r\n    public isFocusInvisible = false;\r\n\r\n    protected _clipChildren = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipChildren() {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    protected _clipContent = true;\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent() {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    @serialize()\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    @serialize()\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    private _previousShadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    @serialize()\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._previousShadowBlur = this._shadowBlur;\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = \"black\";\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    @serialize()\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    @serialize()\r\n    public hoverCursor = \"\";\r\n\r\n    /** @internal */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @internal */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the control for accessibility purpose.\r\n     * By default, GUI controls already indicate accessibility info, but one can override the info using this tag.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * An event triggered when pointer wheel is scrolled\r\n     */\r\n    public onWheelObservable = new Observable<Vector2>();\r\n    /**\r\n     * An event triggered when the pointer moves over the control.\r\n     */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n     * An event triggered when the pointer moves out of the control.\r\n     */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control is marked as dirty\r\n     */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered when the control isVisible is changed\r\n     */\r\n    public onIsVisibleChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    @serialize()\r\n    public get fontOffset(): { ascent: number; height: number; descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number; height: number; descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    @serialize()\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a number indicating size of stroke we want to highlight the control with (mostly for debugging purpose)\r\n     */\r\n    public get highlightLineWidth(): number {\r\n        return this._highlightLineWidth;\r\n    }\r\n\r\n    public set highlightLineWidth(value: number) {\r\n        if (this._highlightLineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightLineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a string defining the color to use for highlighting this control\r\n     */\r\n    public get highlightColor(): string {\r\n        return this._highlightColor;\r\n    }\r\n\r\n    public set highlightColor(value: string) {\r\n        if (this._highlightColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._highlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#rotation-and-scaling\r\n     */\r\n    @serialize()\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#alignments\r\n     */\r\n    @serialize()\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _fixedRatio = 0;\r\n    public set fixedRatio(value: number) {\r\n        if (this._fixedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._fixedRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a fixed ratio for this control.\r\n     * When different from 0, the ratio is used to compute the \"second\" dimension.\r\n     * The first dimension used in the computation is the last one set (by setting width / widthInPixels or height / heightInPixels), and the\r\n     * second dimension is computed as first dimension * fixedRatio\r\n     */\r\n    @serialize()\r\n    public get fixedRatio(): number {\r\n        return this._fixedRatio;\r\n    }\r\n\r\n    private _fixedRatioMasterIsWidth = true;\r\n    set fixedRatioMasterIsWidth(value: boolean) {\r\n        if (this._fixedRatioMasterIsWidth === value) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the fixed ratio is set on the width instead of the height. True by default.\r\n     * When the height of a control is set, this property is changed to false.\r\n     */\r\n    @serialize()\r\n    get fixedRatioMasterIsWidth(): boolean {\r\n        return this._fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = true;\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the control width in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set widthInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = true;\r\n        this.width = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this._fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height in pixel\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set heightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this._fixedRatioMasterIsWidth = false;\r\n        this.height = value + \"px\";\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    @serialize()\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets or sets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        const fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set fontSizeInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.fontSize = value + \"px\";\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    @serialize()\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets gradient. Setting a gradient will override the color */\r\n    @serialize()\r\n    public get gradient(): Nullable<BaseGradient> {\r\n        return this._gradient;\r\n    }\r\n\r\n    public set gradient(value: Nullable<BaseGradient>) {\r\n        if (this._gradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._gradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    @serialize()\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    @serialize()\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    @serialize()\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n\r\n        this.onIsVisibleChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<TransformNode> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding should work like in CSS.\r\n     * Basically, it will add the padding amount on each side of the parent control for its children.\r\n     */\r\n    @serialize()\r\n    public get descendantsOnlyPadding(): boolean {\r\n        return this._descendantsOnlyPadding;\r\n    }\r\n\r\n    public set descendantsOnlyPadding(value: boolean) {\r\n        if (this._descendantsOnlyPadding === value) {\r\n            return;\r\n        }\r\n\r\n        this._descendantsOnlyPadding = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the left of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingLeft = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingLeftInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingLeftInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the right of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRightInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingRight = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingRightInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingRightInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the top of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTopInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingTop = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingTopInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingTopInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottomInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.paddingBottom = value + \"px\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _paddingBottomInPixels(): number {\r\n        if (this._descendantsOnlyPadding) {\r\n            return 0;\r\n        }\r\n\r\n        return this.paddingBottomInPixels;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set leftInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.left = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate in pixels of the control\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set topInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.top = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetXInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetX = value + \"px\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    @serialize()\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetYInPixels(value: number) {\r\n        if (isNaN(value)) {\r\n            return;\r\n        }\r\n        this.linkOffsetY = value + \"px\";\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled */\r\n    @serialize()\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n        // if this control or any of it's descendants are under a pointer, we need to fire a pointerOut event\r\n        const recursivelyFirePointerOut = (control: Control) => {\r\n            if (!control.host) {\r\n                return;\r\n            }\r\n            for (const pointer in control.host._lastControlOver) {\r\n                if (control === this.host._lastControlOver[pointer]) {\r\n                    control._onPointerOut(control, null, true);\r\n                    delete control.host._lastControlOver[pointer];\r\n                }\r\n            }\r\n            if ((control as Container).children !== undefined) {\r\n                (control as Container).children.forEach(recursivelyFirePointerOut);\r\n            }\r\n        };\r\n        recursivelyFirePointerOut(this);\r\n    }\r\n    /** Gets or sets background color of control if it's disabled. Only applies to Button class. */\r\n    @serialize()\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets front color of control if it's disabled. Only applies to Checkbox class. */\r\n    @serialize()\r\n    public get disabledColorItem(): string {\r\n        return this._disabledColorItem;\r\n    }\r\n\r\n    public set disabledColorItem(value: string) {\r\n        if (this._disabledColorItem === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColorItem = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets/sets the overlap group of the control.\r\n     * Controls with overlapGroup set to a number can be deoverlapped.\r\n     * Controls with overlapGroup set to undefined are not deoverlapped.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#deoverlapping\r\n     */\r\n    @serialize()\r\n    public overlapGroup?: number;\r\n    /**\r\n     * Gets/sets the deoverlap movement multiplier\r\n     */\r\n    @serialize()\r\n    public overlapDeltaMultiplier?: number;\r\n\r\n    /**\r\n     * Array of animations\r\n     */\r\n    animations: Nullable<Animation[]> = null;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string\r\n    ) {}\r\n\r\n    /** @internal */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /**\r\n     * Mark control element as dirty\r\n     * @param force force non visible elements to be marked too\r\n     */\r\n    public markAsDirty(force = false): void {\r\n        this._markAsDirty(force);\r\n    }\r\n\r\n    /**\r\n     * Mark the element and its children as dirty\r\n     */\r\n    public markAllAsDirty(): void {\r\n        this._markAllAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        const result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Will store all controls that have this control as ascendant in a given array\r\n     * @param results defines the array where to store the descendants\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     */\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        const results = new Array<Control>();\r\n\r\n        this.getDescendantsToRef(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<TransformNode>): void {\r\n        if (!this._host || (this.parent && this.parent !== this._host._rootContainer)) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /**\r\n     * Shorthand function to set the top, right, bottom, and left padding values on the control.\r\n     * @param { string | number} paddingTop - The value of the top padding.\r\n     * @param { string | number} paddingRight - The value of the right padding. If omitted, top is used.\r\n     * @param { string | number} paddingBottom - The value of the bottom padding. If omitted, top is used.\r\n     * @param { string | number} paddingLeft - The value of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPadding(paddingTop: string | number, paddingRight?: string | number, paddingBottom?: string | number, paddingLeft?: string | number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Shorthand funtion to set the top, right, bottom, and left padding values in pixels on the control.\r\n     * @param { number} paddingTop - The value in pixels of the top padding.\r\n     * @param { number} paddingRight - The value in pixels of the right padding. If omitted, top is used.\r\n     * @param { number} paddingBottom - The value in pixels of the bottom padding. If omitted, top is used.\r\n     * @param { number} paddingLeft - The value in pixels of the left padding. If omitted, right is used.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    public setPaddingInPixels(paddingTop: number, paddingRight?: number, paddingBottom?: number, paddingLeft?: number) {\r\n        const top = paddingTop;\r\n        const right = paddingRight ?? top;\r\n        const bottom = paddingBottom ?? top;\r\n        const left = paddingLeft ?? right;\r\n\r\n        this.paddingTopInPixels = top;\r\n        this.paddingRightInPixels = right;\r\n        this.paddingBottomInPixels = bottom;\r\n        this.paddingLeftInPixels = left;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        const oldLeft = this._left.getValue(this._host);\r\n        const oldTop = this._top.getValue(this._host);\r\n\r\n        const parentMeasure = this.parent?._currentMeasure;\r\n        if (parentMeasure) {\r\n            this._processMeasures(parentMeasure, this._host.getContext());\r\n        }\r\n\r\n        let newLeft = projectedPosition.x + this._linkOffsetX.getValue(this._host) - this._currentMeasure.width / 2;\r\n        let newTop = projectedPosition.y + this._linkOffsetY.getValue(this._host) - this._currentMeasure.height / 2;\r\n\r\n        const leftAndTopIgnoreAdaptiveScaling = this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling;\r\n        if (leftAndTopIgnoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        if (!leftAndTopIgnoreAdaptiveScaling && oldLeft === newLeft && oldTop === newTop) {\r\n            return;\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _intersectsRect(rect: Measure, context?: ICanvasRenderingContext) {\r\n        // make sure we are transformed correctly before checking intersections. no-op if nothing is dirty.\r\n        this._transform(context);\r\n        if (this._evaluatedMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.left + this._evaluatedMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._evaluatedMeasure.top + this._evaluatedMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        return 0;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public invalidateRect() {\r\n        this._transform();\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Rotate by transform to get the measure transformed to global space\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._tmpMeasureA);\r\n            // get the boudning box of the current measure and last frames measure in global space and invalidate it\r\n            // the previous measure is used to properly clear a control that is scaled down\r\n            Measure.CombineToRef(this._tmpMeasureA, this._prevCurrentMeasureTransformedIntoGlobalSpace, this._tmpMeasureA);\r\n\r\n            // Expand rect based on shadows\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = Math.max(this._previousShadowBlur, this.shadowBlur);\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            const offsetX = this._computeAdditionalOffsetX();\r\n            const offsetY = this._computeAdditionalOffsetY();\r\n\r\n            this.host.invalidateRect(\r\n                Math.floor(this._tmpMeasureA.left + leftShadowOffset - offsetX),\r\n                Math.floor(this._tmpMeasureA.top + topShadowOffset - offsetY),\r\n                Math.ceil(this._tmpMeasureA.left + this._tmpMeasureA.width + rightShadowOffset + offsetX),\r\n                Math.ceil(this._tmpMeasureA.top + this._tmpMeasureA.height + bottomShadowOffset + offsetY)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n        this._markMatrixAsDirty();\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _transform(context?: ICanvasRenderingContext): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        const offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        const offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlight(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = this._highlightColor;\r\n        context.lineWidth = this._highlightLineWidth;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    protected _getColor(context: ICanvasRenderingContext): string | ICanvasGradient {\r\n        return this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._host && this._host.useSmallestIdeal && !this._font) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color || this.gradient) {\r\n            context.fillStyle = this._getColor(context);\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent && !this.parent.renderToIntermediateTexture ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this.host._numLayoutCalls++;\r\n\r\n            this._currentMeasure.addAndTransformToRef(\r\n                this._transformMatrix,\r\n                -this._paddingLeftInPixels | 0,\r\n                -this._paddingTopInPixels | 0,\r\n                this._paddingRightInPixels | 0,\r\n                this._paddingBottomInPixels | 0,\r\n                this._prevCurrentMeasureTransformedIntoGlobalSpace\r\n            );\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            } while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                Logger.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect();\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._tempPaddingMeasure.copyFrom(parentMeasure);\r\n\r\n        // Apply padding if in correct mode\r\n        if (this.parent && this.parent.descendantsOnlyPadding) {\r\n            this._tempPaddingMeasure.left += this.parent.paddingLeftInPixels;\r\n            this._tempPaddingMeasure.top += this.parent.paddingTopInPixels;\r\n            this._tempPaddingMeasure.width -= this.parent.paddingLeftInPixels + this.parent.paddingRightInPixels;\r\n            this._tempPaddingMeasure.height -= this.parent.paddingTopInPixels + this.parent.paddingBottomInPixels;\r\n        }\r\n\r\n        this._currentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(this._tempPaddingMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(this._tempPaddingMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(this._tempPaddingMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(this._tempPaddingMeasure);\r\n\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        // Since transformMatrix is used here, we need to have it freshly computed\r\n        this._transform();\r\n        this._currentMeasure.transformToRef(this._transformMatrix, this._evaluatedMeasure);\r\n        if (this.parent && this.parent.clipChildren) {\r\n            parentMeasure.transformToRef(this.parent._transformMatrix, this._evaluatedParentMeasure);\r\n            // Early clip\r\n            if (this._evaluatedMeasure.left > this._evaluatedParentMeasure.left + this._evaluatedParentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.left + this._evaluatedMeasure.width < this._evaluatedParentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top > this._evaluatedParentMeasure.top + this._evaluatedParentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._evaluatedMeasure.top + this._evaluatedMeasure.height < this._evaluatedParentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n\r\n        if (this._fixedRatio !== 0) {\r\n            if (this._fixedRatioMasterIsWidth) {\r\n                this._currentMeasure.height = this._currentMeasure.width * this._fixedRatio;\r\n            } else {\r\n                this._currentMeasure.width = this._currentMeasure.height * this._fixedRatio;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _computeAlignment(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        const parentWidth = parentMeasure.width;\r\n        const parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (!this.descendantsOnlyPadding) {\r\n            if (this._paddingLeft.isPixel) {\r\n                this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n                this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingRight.isPixel) {\r\n                this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingTop.isPixel) {\r\n                this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n                this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n            }\r\n\r\n            if (this._paddingBottom.isPixel) {\r\n                this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n            } else {\r\n                this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n            }\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _clipForChildren(context: ICanvasRenderingContext): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _tmpMeasureA = new Measure(0, 0, 0, 0);\r\n    private _clip(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            // Rotate the invalidated rect into the control's space\r\n            invalidatedRectangle.transformToRef(this._invertTransformMatrix, this._tmpMeasureA);\r\n\r\n            // Get the intersection of the rect in context space and the current context\r\n            const intersection = new Measure(0, 0, 0, 0);\r\n            intersection.left = Math.max(this._tmpMeasureA.left, this._currentMeasure.left);\r\n            intersection.top = Math.max(this._tmpMeasureA.top, this._currentMeasure.top);\r\n            intersection.width = Math.min(this._tmpMeasureA.left + this._tmpMeasureA.width, this._currentMeasure.left + this._currentMeasure.width) - intersection.left;\r\n            intersection.height = Math.min(this._tmpMeasureA.top + this._tmpMeasureA.height, this._currentMeasure.top + this._currentMeasure.height) - intersection.top;\r\n            Control._ClipMeasure.copyFrom(intersection);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            const shadowOffsetX = this.shadowOffsetX;\r\n            const shadowOffsetY = this.shadowOffsetY;\r\n            const shadowBlur = this.shadowBlur;\r\n\r\n            const leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            const rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            const topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            const bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _render(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n\r\n        this.host._numRenderCalls++;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipContent) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: Nullable<PointerInfoBase>): void {\r\n        const canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerMove(target, coordinates, pointerId, pi);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: Nullable<PointerInfoBase>): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) {\r\n            // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        const canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerEnter(target, pi);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: Nullable<PointerInfoBase>, force = false): void {\r\n        if (!force && (!this._isEnabled || target === this)) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        let canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this, pi);\r\n        }\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerOut(target, pi, force);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: Nullable<PointerInfoBase>): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this, pi);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        const canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.add((pi.event as IPointerEvent).pointerId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi?: Nullable<PointerInfoBase>): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        let canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n        }\r\n        const canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this, pi);\r\n\r\n        if (canNotify && this.parent != null && !this.isPointerBlocker) {\r\n            this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick, pi);\r\n        }\r\n\r\n        if (pi && this.uniqueId !== this._host.rootContainer.uniqueId) {\r\n            this._host._capturedPointerIds.delete((pi.event as IPointerEvent).pointerId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (const key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onWheelScroll(deltaX?: number, deltaY?: number): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const canNotify: boolean = this.onWheelObservable.notifyObservers(new Vector2(deltaX, deltaY));\r\n\r\n        if (canNotify && this.parent != null) {\r\n            this.parent._onWheelScroll(deltaX, deltaY);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _onCanvasBlur(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processObservables(\r\n        type: number,\r\n        x: number,\r\n        y: number,\r\n        pi: Nullable<PointerInfoBase>,\r\n        pointerId: number,\r\n        buttonIndex: number,\r\n        deltaX?: number,\r\n        deltaY?: number\r\n    ): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2, pointerId, pi);\r\n\r\n            const previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this, pi);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this, pi);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex, pi);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true, pi);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERWHEEL) {\r\n            if (this._host._lastControlOver[pointerId]) {\r\n                this._host._lastControlOver[pointerId]._onWheelScroll(deltaX, deltaY);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n\r\n        //children need to be refreshed\r\n        this.getDescendants().forEach((child) => child._markAllAsDirty());\r\n    }\r\n\r\n    /**\r\n     * Clones a control and its descendants\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns the cloned control\r\n     */\r\n    public clone(host?: AdvancedDynamicTexture): Control {\r\n        const serialization: any = {};\r\n        this.serialize(serialization);\r\n\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serialization.className);\r\n        const cloned = new controlType();\r\n        cloned.parse(serialization, host);\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized object into this control\r\n     * @param serializedObject the object with the serialized properties\r\n     * @param host the texture where the control will be instantiated. Can be empty, in which case the control will be created on the same texture\r\n     * @returns this control\r\n     */\r\n    public parse(serializedObject: any, host?: AdvancedDynamicTexture): Control {\r\n        SerializationHelper.Parse(() => this, serializedObject, null);\r\n\r\n        this.name = serializedObject.name;\r\n\r\n        this._parseFromContent(serializedObject, host ?? this._host);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        SerializationHelper.Serialize(this, serializationObject);\r\n        serializationObject.name = this.name;\r\n        serializationObject.className = this.getClassName();\r\n\r\n        // Call prepareFont to guarantee the font is properly set before serializing\r\n        this._prepareFont();\r\n        if (this._font) {\r\n            serializationObject.fontFamily = this._fontFamily;\r\n            serializationObject.fontSize = this.fontSize;\r\n            serializationObject.fontWeight = this.fontWeight;\r\n            serializationObject.fontStyle = this.fontStyle;\r\n        }\r\n\r\n        if (this._gradient) {\r\n            serializationObject.gradient = {};\r\n            this._gradient.serialize(serializationObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        if (serializedObject.fontFamily) {\r\n            this.fontFamily = serializedObject.fontFamily;\r\n        }\r\n\r\n        if (serializedObject.fontSize) {\r\n            this.fontSize = serializedObject.fontSize;\r\n        }\r\n\r\n        if (serializedObject.fontWeight) {\r\n            this.fontWeight = serializedObject.fontWeight;\r\n        }\r\n\r\n        if (serializedObject.fontStyle) {\r\n            this.fontStyle = serializedObject.fontStyle;\r\n        }\r\n\r\n        // Gradient\r\n        if (serializedObject.gradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.gradient.className);\r\n            this._gradient = new className();\r\n            this._gradient?.parse(serializedObject.gradient);\r\n        }\r\n\r\n        // Animations\r\n        if (serializedObject.animations) {\r\n            this.animations = [];\r\n            for (let animationIndex = 0; animationIndex < serializedObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializedObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    this.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializedObject.autoAnimate && this._host && this._host.getScene()) {\r\n                this._host\r\n                    .getScene()!\r\n                    .beginAnimation(\r\n                        this,\r\n                        serializedObject.autoAnimateFrom,\r\n                        serializedObject.autoAnimateTo,\r\n                        serializedObject.autoAnimateLoop,\r\n                        serializedObject.autoAnimateSpeed || 1.0\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.fixedRatioMasterIsWidth = serializedObject.fixedRatioMasterIsWidth ?? this.fixedRatioMasterIsWidth;\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n        this.onWheelObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            const index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number; height: number; descent: number } } = {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n\r\n        const result = engine.getFontOffset(font);\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a Control from parsed data\r\n     * @param serializedObject defines parsed data\r\n     * @param host defines the hosting AdvancedDynamicTexture\r\n     * @returns a new Control\r\n     */\r\n    public static Parse(serializedObject: any, host: AdvancedDynamicTexture): Control {\r\n        const controlType = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.className);\r\n        const control = SerializationHelper.Parse(() => new controlType(), serializedObject, null);\r\n\r\n        control.name = serializedObject.name;\r\n\r\n        control._parseFromContent(serializedObject, host);\r\n\r\n        return control;\r\n    }\r\n\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }) => any = () => {};\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: ICanvasRenderingContext): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the control is ready to be used\r\n     * @returns\r\n     */\r\n    public isReady(): boolean {\r\n        // Most controls are ready by default, so the default implementation is to return true\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Control\", Control);\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { BaseGradient } from \"./gradient/BaseGradient\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Matrix2D } from \"../math2D\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @internal */\r\n    public _children = new Array<Control>();\r\n    /** @internal */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @internal */\r\n    protected _background = \"\";\r\n    /** @internal */\r\n    protected _backgroundGradient: Nullable<BaseGradient> = null;\r\n    /** @internal */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @internal */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @internal */\r\n    protected _renderToIntermediateTexture: boolean = false;\r\n    /** @internal */\r\n    protected _intermediateTexture: Nullable<DynamicTexture> = null;\r\n\r\n    /** Gets or sets boolean indicating if children should be rendered to an intermediate texture rather than directly to host, useful for alpha blending */\r\n    @serialize()\r\n    public get renderToIntermediateTexture(): boolean {\r\n        return this._renderToIntermediateTexture;\r\n    }\r\n    public set renderToIntermediateTexture(value: boolean) {\r\n        if (this._renderToIntermediateTexture === value) {\r\n            return;\r\n        }\r\n        this._renderToIntermediateTexture = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout cycle errors should be displayed on the console\r\n     */\r\n    public logLayoutCycleErrors = false;\r\n\r\n    /**\r\n     * Gets or sets the number of layout cycles (a change involved by a control while evaluating the layout) allowed\r\n     */\r\n    @serialize()\r\n    public maxLayoutCycle = 3;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    @serialize()\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    @serialize()\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient color. Takes precedence over background */\r\n    @serialize()\r\n    public get backgroundGradient() {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    public get isReadOnly() {\r\n        return this._isReadOnly;\r\n    }\r\n\r\n    public set isReadOnly(value: boolean) {\r\n        this._isReadOnly = value;\r\n\r\n        for (const child of this._children) {\r\n            child.isReadOnly = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this.children) {\r\n            child._isClipped = false;\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (const child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlAddedObservable.notifyObservers(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        const children = this.children.slice();\r\n\r\n        for (const child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onControlRemovedObservable.notifyObservers(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when any control is added to this container.\r\n     */\r\n    public onControlAddedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * An event triggered when any control is removed from this container.\r\n     */\r\n    public onControlRemovedObservable = new Observable<Nullable<Control>>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reOrderControl(control: Control): void {\r\n        const linkedMesh = control.linkedMesh;\r\n\r\n        this.removeControl(control);\r\n\r\n        let wasAdded = false;\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                wasAdded = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!wasAdded) {\r\n            this._children.push(control);\r\n        }\r\n\r\n        control.parent = this;\r\n\r\n        if (linkedMesh) {\r\n            control.linkWithMesh(linkedMesh);\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (const child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        if (this._background || this._backgroundGradient) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (const child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n            if (this._renderToIntermediateTexture) {\r\n                if (this._intermediateTexture && this._host.getScene() != this._intermediateTexture.getScene()) {\r\n                    this._intermediateTexture.dispose();\r\n                    this._intermediateTexture = null;\r\n                }\r\n                if (!this._intermediateTexture) {\r\n                    this._intermediateTexture = new DynamicTexture(\r\n                        \"\",\r\n                        { width: this._currentMeasure.width, height: this._currentMeasure.height },\r\n                        this._host.getScene(),\r\n                        false,\r\n                        Texture.NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTUREFORMAT_RGBA,\r\n                        false\r\n                    );\r\n                    this._intermediateTexture.hasAlpha = true;\r\n                } else {\r\n                    this._intermediateTexture.scaleTo(this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (!this.isDirty && (!this.isVisible || this.notRenderable)) {\r\n            return false;\r\n        }\r\n\r\n        this.host._numLayoutCalls++;\r\n\r\n        if (this._isDirty) {\r\n            this._currentMeasure.transformToRef(this._transformMatrix, this._prevCurrentMeasureTransformedIntoGlobalSpace);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (const child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n                        if (child.isVisible && !child.notRenderable) {\r\n                            if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                                computedWidth = Math.max(computedWidth, child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels);\r\n                            }\r\n                            if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                                computedHeight = Math.max(computedHeight, child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    computedWidth += this.paddingLeftInPixels + this.paddingRightInPixels;\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.width = computedWidth + \"px\";\r\n                        this._width.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    computedHeight += this.paddingTopInPixels + this.paddingBottomInPixels;\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.parent?._markAsDirty();\r\n                        this.height = computedHeight + \"px\";\r\n                        this._height.ignoreAdaptiveScaling = true;\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        } while (this._rebuildLayout && rebuildCount < this.maxLayoutCycle);\r\n\r\n        if (rebuildCount >= 3 && this.logLayoutCycleErrors) {\r\n            Logger.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect();\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    private _inverseTransformMatrix = Matrix2D.Identity();\r\n    private _inverseMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        const renderToIntermediateTextureThisDraw = this._renderToIntermediateTexture && this._intermediateTexture;\r\n        const contextToDrawTo = renderToIntermediateTextureThisDraw ? (<DynamicTexture>this._intermediateTexture).getContext() : context;\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.save();\r\n            contextToDrawTo.translate(-this._currentMeasure.left, -this._currentMeasure.top);\r\n            if (invalidatedRectangle) {\r\n                this._transformMatrix.invertToRef(this._inverseTransformMatrix);\r\n                invalidatedRectangle.transformToRef(this._inverseTransformMatrix, this._inverseMeasure);\r\n                contextToDrawTo.clearRect(this._inverseMeasure.left, this._inverseMeasure.top, this._inverseMeasure.width, this._inverseMeasure.height);\r\n            } else {\r\n                contextToDrawTo.clearRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        this._localDraw(contextToDrawTo);\r\n\r\n        context.save();\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(contextToDrawTo);\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(contextToDrawTo, invalidatedRectangle);\r\n        }\r\n\r\n        if (renderToIntermediateTextureThisDraw) {\r\n            contextToDrawTo.restore();\r\n            context.save();\r\n            context.globalAlpha = this.alpha;\r\n            context.drawImage(contextToDrawTo.canvas, this._currentMeasure.left, this._currentMeasure.top);\r\n            context.restore();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public getDescendantsToRef(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            const item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item.getDescendantsToRef(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        // checks if the picking position is within the container\r\n        const contains = super.contains(x, y);\r\n\r\n        // if clipChildren is off, we should still pass picking events to children even if we don't contain the pointer\r\n        if (!contains && this.clipChildren) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (let index = this._children.length - 1; index >= 0; index--) {\r\n            const child = this._children[index];\r\n            if (child._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!contains) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n\r\n        if (!this.children.length) {\r\n            return;\r\n        }\r\n\r\n        serializationObject.children = [];\r\n\r\n        for (const child of this.children) {\r\n            const childSerializationObject = {};\r\n            child.serialize(childSerializationObject);\r\n            serializationObject.children.push(childSerializationObject);\r\n        }\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (let index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n        this._intermediateTexture?.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this._link(host);\r\n\r\n        // Gradient\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this._backgroundGradient = new className();\r\n            this._backgroundGradient?.parse(serializedObject.backgroundGradient);\r\n        }\r\n\r\n        if (!serializedObject.children) {\r\n            return;\r\n        }\r\n\r\n        for (const childData of serializedObject.children) {\r\n            this.addControl(Control.Parse(childData, host));\r\n        }\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        for (const child of this.children) {\r\n            if (!child.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Container\", Container);\r\n", "import { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = [0, 0, 0, 0];\r\n    private _cachedRadius = [0, 0, 0, 0];\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius of all angles */\r\n    @serialize()\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius[0] === value && this._cornerRadius[1] === value && this._cornerRadius[2] === value && this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius[0] = this._cornerRadius[1] = this._cornerRadius[2] = this._cornerRadius[3] = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius top left angle */\r\n    @serialize()\r\n    public get cornerRadiusX(): number {\r\n        return this._cornerRadius[0];\r\n    }\r\n\r\n    public set cornerRadiusX(value: number) {\r\n        if (this._cornerRadius[0] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[0] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius top right angle */\r\n    @serialize()\r\n    public get cornerRadiusY(): number {\r\n        return this._cornerRadius[1];\r\n    }\r\n\r\n    public set cornerRadiusY(value: number) {\r\n        if (this._cornerRadius[1] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[1] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom left angle */\r\n    @serialize()\r\n    public get cornerRadiusZ(): number {\r\n        return this._cornerRadius[2];\r\n    }\r\n\r\n    public set cornerRadiusZ(value: number) {\r\n        if (this._cornerRadius[2] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[2] = value;\r\n    }\r\n\r\n    /** Gets or sets the corner radius bottom right angle */\r\n    @serialize()\r\n    public get cornerRadiusW(): number {\r\n        return this._cornerRadius[3];\r\n    }\r\n\r\n    public set cornerRadiusW(value: number) {\r\n        if (this._cornerRadius[3] === value) {\r\n            return;\r\n        }\r\n        this._cornerRadius[3] = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetX() {\r\n        let additionalWidth = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalWidth += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalWidth += this.thickness / 2;\r\n        }\r\n        return additionalWidth;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _computeAdditionalOffsetY() {\r\n        let additionalHeight = 0;\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            // Take in account the aliasing\r\n            additionalHeight += 1;\r\n        }\r\n        if (this.thickness) {\r\n            additionalHeight += this.thickness / 2;\r\n        }\r\n        return additionalHeight;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        return this._getBackgroundColor(context);\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background || this._backgroundGradient) {\r\n            context.fillStyle = this._getRectangleFill(context);\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color || this.gradient) {\r\n                context.strokeStyle = this.gradient ? this.gradient.getCanvasGradient(context) : this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(\r\n                    this._currentMeasure.left + this._thickness / 2,\r\n                    this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness,\r\n                    this._currentMeasure.height - this._thickness\r\n                );\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: ICanvasRenderingContext, offset: number = 0): void {\r\n        const x = this._currentMeasure.left + offset;\r\n        const y = this._currentMeasure.top + offset;\r\n        const width = this._currentMeasure.width - offset * 2;\r\n        const height = this._currentMeasure.height - offset * 2;\r\n\r\n        for (let index = 0; index < this._cornerRadius.length; index++) {\r\n            this._cachedRadius[index] = Math.abs(Math.min(height / 2, Math.min(width / 2, this._cornerRadius[index])));\r\n        }\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + this._cachedRadius[0], y);\r\n        context.lineTo(x + width - this._cachedRadius[1], y);\r\n        context.arc(x + width - this._cachedRadius[1], y + this._cachedRadius[1], this._cachedRadius[1], (3 * Math.PI) / 2, Math.PI * 2);\r\n        context.lineTo(x + width, y + height - this._cachedRadius[2]);\r\n        context.arc(x + width - this._cachedRadius[2], y + height - this._cachedRadius[2], this._cachedRadius[2], 0, Math.PI / 2);\r\n        context.lineTo(x + this._cachedRadius[3], y + height);\r\n        context.arc(x + this._cachedRadius[3], y + height - this._cachedRadius[3], this._cachedRadius[3], Math.PI / 2, Math.PI);\r\n        context.lineTo(x, y + this._cachedRadius[0]);\r\n        context.arc(x + this._cachedRadius[0], y + this._cachedRadius[0], this._cachedRadius[0], Math.PI, (3 * Math.PI) / 2);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        if (this._cornerRadius[0] !== 0 || this._cornerRadius[1] !== 0 || this._cornerRadius[2] !== 0 || this._cornerRadius[3] !== 0) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Rectangle\", Rectangle);\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext, ITextMetrics } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis = 2,\r\n\r\n    /**\r\n     * Wrap the text word-wise and clip the text when the text's height is larger than the Control.height, and shrink the last line with trailing … .\r\n     */\r\n    WordWrapEllipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _underline: boolean = false;\r\n    private _lineThrough: boolean = false;\r\n    private _wordDivider: string = \" \";\r\n    private _forceResizeWidth: boolean = false;\r\n    private _applyOutlineToUnderline: boolean = false;\r\n\r\n    /**\r\n     * An event triggered after the text is changed\r\n     */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Function used to split a string into words. By default, a string is split at each space character found\r\n     */\r\n    public wordSplittingFunction: Nullable<(line: string) => string[]>;\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    @serialize()\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    @serialize()\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value + \"\"; // Making sure it is a text\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    @serialize()\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    @serialize()\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    @serialize()\r\n    public get underline(): boolean {\r\n        return this._underline;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that text must have underline\r\n     */\r\n    public set underline(value: boolean) {\r\n        if (this._underline === value) {\r\n            return;\r\n        }\r\n        this._underline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    @serialize()\r\n    public get lineThrough(): boolean {\r\n        return this._lineThrough;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that text must be crossed out\r\n     */\r\n    public set lineThrough(value: boolean) {\r\n        if (this._lineThrough === value) {\r\n            return;\r\n        }\r\n        this._lineThrough = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * If the outline should be applied to the underline/strike-through too. Has different behavior in Edge/Chrome vs Firefox.\r\n     */\r\n    @serialize()\r\n    public get applyOutlineToUnderline(): boolean {\r\n        return this._applyOutlineToUnderline;\r\n    }\r\n\r\n    public set applyOutlineToUnderline(value: boolean) {\r\n        if (this._applyOutlineToUnderline === value) {\r\n            return;\r\n        }\r\n        this._applyOutlineToUnderline = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    @serialize()\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    @serialize()\r\n    public get wordDivider(): string {\r\n        return this._wordDivider;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets word divider\r\n     */\r\n    public set wordDivider(value: string) {\r\n        if (this._wordDivider === value) {\r\n            return;\r\n        }\r\n        this._wordDivider = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * By default, if a text block has text wrapping other than Clip, its width\r\n     * is not resized even if resizeToFit = true. This parameter forces the width\r\n     * to be resized.\r\n     */\r\n    @serialize()\r\n    public get forceResizeWidth(): boolean {\r\n        return this._forceResizeWidth;\r\n    }\r\n\r\n    public set forceResizeWidth(value: boolean) {\r\n        if (this._forceResizeWidth === value) {\r\n            return;\r\n        }\r\n        this._forceResizeWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (empty string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\"\r\n    ) {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this.isDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, this._currentMeasure.height, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip || this._forceResizeWidth) {\r\n                const newWidth = Math.ceil(this._paddingLeftInPixels) + Math.ceil(this._paddingRightInPixels) + Math.ceil(maxLineWidth);\r\n                if (newWidth !== this._width.getValueInPixel(this._host, this._tempParentMeasure.width)) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = (this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * this._lines.length) | 0;\r\n\r\n            if (this._lines.length > 0 && this._lineSpacing.internalValue !== 0) {\r\n                let lineSpacing = 0;\r\n                if (this._lineSpacing.isPixel) {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n\r\n                newHeight += (this._lines.length - 1) * lineSpacing;\r\n            }\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n\r\n        if (this._underline) {\r\n            this._drawLine(this._currentMeasure.left + x, y + 3, this._currentMeasure.left + x + textWidth, y + 3, context);\r\n        }\r\n\r\n        if (this._lineThrough) {\r\n            this._drawLine(this._currentMeasure.left + x, y - this.fontSizeInPixels / 3, this._currentMeasure.left + x + textWidth, y - this.fontSizeInPixels / 3, context);\r\n        }\r\n    }\r\n\r\n    private _drawLine(xFrom: number, yFrom: number, xTo: number, yTo: number, context: ICanvasRenderingContext): void {\r\n        context.beginPath();\r\n        context.lineWidth = Math.round(this.fontSizeInPixels * 0.05);\r\n        context.moveTo(xFrom, yFrom);\r\n        context.lineTo(xTo, yTo);\r\n        if (this.outlineWidth && this.applyOutlineToUnderline) {\r\n            context.stroke();\r\n            context.fill();\r\n        } else {\r\n            const currentStroke = context.strokeStyle;\r\n            context.strokeStyle = context.fillStyle;\r\n            context.stroke();\r\n            context.strokeStyle = currentStroke;\r\n        }\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n            context.lineJoin = \"miter\";\r\n            context.miterLimit = 2;\r\n        }\r\n    }\r\n\r\n    private _linesTemp: object[] = [];\r\n\r\n    protected _breakLines(refWidth: number, refHeight: number, context: ICanvasRenderingContext): object[] {\r\n        this._linesTemp.length = 0;\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrapEllipsis) {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(...this._parseLineWordWrapEllipsis(_line, refWidth, refHeight!, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                this._linesTemp.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return this._linesTemp;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): object {\r\n        return { text: line, width: this._getTextMetricsWidth(context.measureText(line)) };\r\n    }\r\n\r\n    //Calculate how many characters approximately we need to remove\r\n    private _getCharsToRemove(lineWidth: number, width: number, lineLength: number) {\r\n        const diff = lineWidth > width ? lineWidth - width : 0;\r\n        // This isn't exact unless the font is monospaced\r\n        const charWidth = lineWidth / lineLength;\r\n        const removeChars = Math.max(Math.floor(diff / charWidth), 1);\r\n        return removeChars;\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = \"\", width: number, context: ICanvasRenderingContext): object {\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        let removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n\r\n        // unicode support. split('') does not work with unicode!\r\n        // make sure Array.from is available\r\n        const characters = Array.from && Array.from(line);\r\n        if (!characters) {\r\n            // no array.from, use the old method\r\n            while (line.length > 2 && lineWidth > width) {\r\n                line = line.slice(0, -removeChars);\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line + \"…\"));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n            // Add on the end\r\n            line += \"…\";\r\n        } else {\r\n            while (characters.length && lineWidth > width) {\r\n                characters.splice(characters.length - removeChars, removeChars);\r\n                line = `${characters.join(\"\")}…`;\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n                removeChars = this._getCharsToRemove(lineWidth, width, line.length);\r\n            }\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    private _getTextMetricsWidth(textMetrics: ITextMetrics) {\r\n        if (textMetrics.actualBoundingBoxLeft !== undefined) {\r\n            return Math.abs(textMetrics.actualBoundingBoxLeft) + Math.abs(textMetrics.actualBoundingBoxRight);\r\n        }\r\n        return textMetrics.width;\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = [];\r\n        const words = this.wordSplittingFunction ? this.wordSplittingFunction(line) : line.split(this._wordDivider);\r\n        let lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + this._wordDivider + words[n] : words[0];\r\n            const testWidth = this._getTextMetricsWidth(context.measureText(testLine));\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = this._getTextMetricsWidth(context.measureText(line));\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLineWordWrapEllipsis(line: string = \"\", width: number, height: number, context: ICanvasRenderingContext): object[] {\r\n        const lines = this._parseLineWordWrap(line, width, context);\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            const currentHeight = this._computeHeightForLinesOf(n);\r\n            if (currentHeight > height && n > 1) {\r\n                const lastLine = lines[n - 2] as { text: string; width: number };\r\n                const currentLine = lines[n - 1] as { text: string; width: number };\r\n                lines[n - 2] = this._parseLineEllipsis(lastLine.text + this._wordDivider + currentLine.text, width, context);\r\n                const linesToRemove = lines.length - n + 1;\r\n                for (let i = 0; i < linesToRemove; i++) {\r\n                    lines.pop();\r\n                }\r\n                return lines;\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || !this._lines) {\r\n            return;\r\n        }\r\n        const height = this._currentMeasure.height;\r\n        let rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    private _computeHeightForLinesOf(lineCount: number): number {\r\n        let newHeight = this._paddingTopInPixels + this._paddingBottomInPixels + this._fontOffset.height * lineCount;\r\n\r\n        if (lineCount > 0 && this._lineSpacing.internalValue !== 0) {\r\n            let lineSpacing = 0;\r\n            if (this._lineSpacing.isPixel) {\r\n                lineSpacing = this._lineSpacing.getValue(this._host);\r\n            } else {\r\n                lineSpacing = this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n            }\r\n\r\n            newHeight += (lineCount - 1) * lineSpacing;\r\n        }\r\n\r\n        return newHeight;\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            // Should abstract platform instead of using LastCreatedEngine\r\n            const context = EngineStore.LastCreatedEngine?.createCanvas(0, 0).getContext(\"2d\");\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines\r\n                    ? this._lines\r\n                    : this._breakLines(\r\n                          this.widthInPixels - this._paddingLeftInPixels - this._paddingRightInPixels,\r\n                          this.heightInPixels - this._paddingTopInPixels - this._paddingBottomInPixels,\r\n                          context\r\n                      );\r\n                return this._computeHeightForLinesOf(lines.length);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.TextBlock\", TextBlock);\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext, IImage } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    /**\r\n     *  Specifies an alternate text for the image, if the image for some reason cannot be displayed.\r\n     */\r\n    public alt?: string;\r\n\r\n    private _workingCanvas: Nullable<ICanvas> = null;\r\n\r\n    private _domImage: IImage;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n    private _svgAttributesComputationCompleted: boolean = false;\r\n    private _isSVG: boolean = false;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n\r\n    private _detectPointerOnOpaqueOnly: boolean;\r\n\r\n    private _imageDataCache: {\r\n        data: Uint8ClampedArray | null;\r\n        key: string;\r\n    } = { data: null, key: \"\" };\r\n\r\n    /**\r\n     * Cache of images to avoid loading the same image multiple times\r\n     */\r\n    public static SourceImgCache = new Map<string, { img: IImage; timesUsed: number; loaded: boolean; waitingForLoadCallback: Array<() => void> }>();\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Observable notified when _sourceLeft, _sourceTop, _sourceWidth and _sourceHeight are computed\r\n     */\r\n    public onSVGAttributesComputedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets or sets the referrer policy to apply on the img element load request.\r\n     * You should set referrerPolicy before set the source of the image if you want to ensure the header will be present on the xhr loading request\r\n     */\r\n    public referrerPolicy: Nullable<ReferrerPolicy>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        return this.isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pointers should only be validated on pixels with alpha > 0.\r\n     * Beware using this as this will consume more memory as the image has to be stored twice\r\n     */\r\n    @serialize()\r\n    public get detectPointerOnOpaqueOnly(): boolean {\r\n        return this._detectPointerOnOpaqueOnly;\r\n    }\r\n\r\n    public set detectPointerOnOpaqueOnly(value: boolean) {\r\n        if (this._detectPointerOnOpaqueOnly === value) {\r\n            return;\r\n        }\r\n\r\n        this._detectPointerOnOpaqueOnly = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    @serialize()\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    @serialize()\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image width\r\n     */\r\n    public get imageWidth(): number {\r\n        return this._imageWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets the image height\r\n     */\r\n    public get imageHeight(): number {\r\n        return this._imageHeight;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    @serialize()\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /** Indicates if the format of the image is SVG */\r\n    public get isSVG(): boolean {\r\n        return this._isSVG;\r\n    }\r\n\r\n    /** Gets the status of the SVG attributes computation (sourceLeft, sourceTop, sourceWidth, sourceHeight) */\r\n    public get svgAttributesComputationCompleted(): boolean {\r\n        return this._svgAttributesComputationCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the stretching mode used by the image */\r\n    @serialize()\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _rotate90(n: number, preserveProperties: boolean = false): Image {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(height, width);\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.translate(canvas.width / 2, canvas.height / 2);\r\n        context.rotate((n * Math.PI) / 2);\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height, -width / 2, -height / 2, width, height);\r\n\r\n        const dataUrl: string = canvas.toDataURL(\"image/jpg\");\r\n        const rotatedImage = new Image(this.name + \"rotated\", dataUrl);\r\n\r\n        if (preserveProperties) {\r\n            rotatedImage._stretch = this._stretch;\r\n            rotatedImage._autoScale = this._autoScale;\r\n            rotatedImage._cellId = this._cellId;\r\n            rotatedImage._cellWidth = n % 1 ? this._cellHeight : this._cellWidth;\r\n            rotatedImage._cellHeight = n % 1 ? this._cellWidth : this._cellHeight;\r\n        }\r\n\r\n        this._handleRotationForSVGImage(this, rotatedImage, n);\r\n\r\n        this._imageDataCache.data = null;\r\n\r\n        return rotatedImage;\r\n    }\r\n\r\n    private _handleRotationForSVGImage(srcImage: Image, dstImage: Image, n: number): void {\r\n        if (!srcImage._isSVG) {\r\n            return;\r\n        }\r\n\r\n        if (srcImage._svgAttributesComputationCompleted) {\r\n            this._rotate90SourceProperties(srcImage, dstImage, n);\r\n            this._markAsDirty();\r\n        } else {\r\n            srcImage.onSVGAttributesComputedObservable.addOnce(() => {\r\n                this._rotate90SourceProperties(srcImage, dstImage, n);\r\n                this._markAsDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _rotate90SourceProperties(srcImage: Image, dstImage: Image, n: number): void {\r\n        let srcLeft = srcImage.sourceLeft,\r\n            srcTop = srcImage.sourceTop,\r\n            srcWidth = srcImage.domImage.width,\r\n            srcHeight = srcImage.domImage.height;\r\n\r\n        let dstLeft = srcLeft,\r\n            dstTop = srcTop,\r\n            dstWidth = srcImage.sourceWidth,\r\n            dstHeight = srcImage.sourceHeight;\r\n\r\n        if (n != 0) {\r\n            const mult = n < 0 ? -1 : 1;\r\n            n = n % 4;\r\n            for (let i = 0; i < Math.abs(n); ++i) {\r\n                dstLeft = -(srcTop - srcHeight / 2) * mult + srcHeight / 2;\r\n                dstTop = (srcLeft - srcWidth / 2) * mult + srcWidth / 2;\r\n                [dstWidth, dstHeight] = [dstHeight, dstWidth];\r\n                if (n < 0) {\r\n                    dstTop -= dstHeight;\r\n                } else {\r\n                    dstLeft -= dstWidth;\r\n                }\r\n                srcLeft = dstLeft;\r\n                srcTop = dstTop;\r\n                [srcWidth, srcHeight] = [srcHeight, srcWidth];\r\n            }\r\n        }\r\n\r\n        dstImage.sourceLeft = dstLeft;\r\n        dstImage.sourceTop = dstTop;\r\n        dstImage.sourceWidth = dstWidth;\r\n        dstImage.sourceHeight = dstHeight;\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (let x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (let y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: IImage) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): IImage {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageDataCache.data = null;\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the image source url\r\n     */\r\n    @serialize()\r\n    public get source() {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal Image Element cache. Can reduce memory usage.\r\n     */\r\n    public static ResetImageCache() {\r\n        Image.SourceImgCache.clear();\r\n    }\r\n\r\n    private _removeCacheUsage(source: Nullable<string>) {\r\n        const value = source && Image.SourceImgCache.get(source);\r\n        if (value) {\r\n            value.timesUsed -= 1;\r\n            // Since the image isn't being used anymore, we can clean it from the cache\r\n            if (value.timesUsed === 0) {\r\n                Image.SourceImgCache.delete(source);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._removeCacheUsage(this._source);\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n        this._imageDataCache.data = null;\r\n\r\n        if (value) {\r\n            value = this._svgCheck(value);\r\n        }\r\n\r\n        // Should abstract platform instead of using LastCreatedEngine\r\n        const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        if (value && Image.SourceImgCache.has(value)) {\r\n            const cachedData = Image.SourceImgCache.get(value)!;\r\n            this._domImage = cachedData.img;\r\n            cachedData.timesUsed += 1;\r\n            if (cachedData.loaded) {\r\n                this._onImageLoaded();\r\n            } else {\r\n                cachedData.waitingForLoadCallback.push(this._onImageLoaded.bind(this));\r\n            }\r\n            return;\r\n        }\r\n        this._domImage = engine.createCanvasImage();\r\n        if (value) {\r\n            Image.SourceImgCache.set(value, { img: this._domImage, timesUsed: 1, loaded: false, waitingForLoadCallback: [this._onImageLoaded.bind(this)] });\r\n        }\r\n\r\n        this._domImage.onload = () => {\r\n            if (value) {\r\n                const cachedData = Image.SourceImgCache.get(value);\r\n                if (cachedData) {\r\n                    cachedData.loaded = true;\r\n                    for (const waitingCallback of cachedData.waitingForLoadCallback) {\r\n                        waitingCallback();\r\n                    }\r\n                    cachedData.waitingForLoadCallback.length = 0;\r\n                    return;\r\n                }\r\n            }\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            Tools.SetReferrerPolicyBehavior(this.referrerPolicy, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for svg document with icon id present\r\n     * @param value\r\n     */\r\n    private _svgCheck(value: string): string {\r\n        if (window.SVGSVGElement && value.search(/.svg#/gi) !== -1 && value.indexOf(\"#\") === value.lastIndexOf(\"#\")) {\r\n            this._isSVG = true;\r\n            const svgsrc = value.split(\"#\")[0];\r\n            const elemid = value.split(\"#\")[1];\r\n            // check if object alr exist in document\r\n            const svgExist = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n            if (svgExist) {\r\n                const svgDoc = svgExist.contentDocument;\r\n                // get viewbox width and height, get svg document width and height in px\r\n                if (svgDoc && svgDoc.documentElement) {\r\n                    const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n                    const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n                    const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n                    const elem = <SVGGraphicsElement>(<unknown>svgDoc.getElementById(elemid));\r\n                    if (elem && vb && docwidth && docheight) {\r\n                        this._getSVGAttribs(svgExist, elemid);\r\n                        return value;\r\n                    }\r\n                }\r\n\r\n                // wait for object to load\r\n                svgExist.addEventListener(\"load\", () => {\r\n                    this._getSVGAttribs(svgExist, elemid);\r\n                });\r\n            } else {\r\n                // create document object\r\n                const svgImage = document.createElement(\"object\");\r\n                svgImage.data = svgsrc;\r\n                svgImage.type = \"image/svg+xml\";\r\n                svgImage.width = \"0%\";\r\n                svgImage.height = \"0%\";\r\n                document.body.appendChild(svgImage);\r\n                // when the object has loaded, get the element attribs\r\n                svgImage.onload = () => {\r\n                    const svgobj = <HTMLObjectElement>document.body.querySelector('object[data=\"' + svgsrc + '\"]');\r\n                    if (svgobj) {\r\n                        this._getSVGAttribs(svgobj, elemid);\r\n                    }\r\n                };\r\n            }\r\n            return svgsrc;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets sourceLeft, sourceTop, sourceWidth, sourceHeight automatically\r\n     * given external svg file and icon id\r\n     * @param svgsrc\r\n     * @param elemid\r\n     */\r\n    private _getSVGAttribs(svgsrc: HTMLObjectElement, elemid: string) {\r\n        const svgDoc = svgsrc.contentDocument;\r\n        // get viewbox width and height, get svg document width and height in px\r\n        if (svgDoc && svgDoc.documentElement) {\r\n            const vb = svgDoc.documentElement.getAttribute(\"viewBox\");\r\n            const docwidth = Number(svgDoc.documentElement.getAttribute(\"width\"));\r\n            const docheight = Number(svgDoc.documentElement.getAttribute(\"height\"));\r\n            // get element bbox and matrix transform\r\n            const elem = svgDoc.getElementById(elemid) as Nullable<SVGGraphicsElement>;\r\n            if (vb && docwidth && docheight && elem) {\r\n                const vb_width = Number(vb.split(\" \")[2]);\r\n                const vb_height = Number(vb.split(\" \")[3]);\r\n                const elem_bbox = elem.getBBox();\r\n                let elem_matrix_a = 1;\r\n                let elem_matrix_d = 1;\r\n                let elem_matrix_e = 0;\r\n                let elem_matrix_f = 0;\r\n                const mainMatrix = elem.transform.baseVal.consolidate()!.matrix;\r\n                if (elem.transform && elem.transform.baseVal.consolidate()) {\r\n                    elem_matrix_a = mainMatrix.a;\r\n                    elem_matrix_d = mainMatrix.d;\r\n                    elem_matrix_e = mainMatrix.e;\r\n                    elem_matrix_f = mainMatrix.f;\r\n                }\r\n\r\n                // compute source coordinates and dimensions\r\n                this.sourceLeft = ((elem_matrix_a * elem_bbox.x + elem_matrix_e) * docwidth) / vb_width;\r\n                this.sourceTop = ((elem_matrix_d * elem_bbox.y + elem_matrix_f) * docheight) / vb_height;\r\n                this.sourceWidth = elem_bbox.width * elem_matrix_a * (docwidth / vb_width);\r\n                this.sourceHeight = elem_bbox.height * elem_matrix_d * (docheight / vb_height);\r\n                this._svgAttributesComputationCompleted = true;\r\n                this.onSVGAttributesComputedObservable.notifyObservers(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#image\r\n     */\r\n    @serialize()\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n        this.source = url;\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._detectPointerOnOpaqueOnly || !this._workingCanvas) {\r\n            return true;\r\n        }\r\n\r\n        const width = this._currentMeasure.width | 0;\r\n        const height = this._currentMeasure.height | 0;\r\n        const key = width + \"_\" + height;\r\n\r\n        let imageData = this._imageDataCache.data;\r\n\r\n        if (!imageData || this._imageDataCache.key !== key) {\r\n            const canvas = this._workingCanvas;\r\n            const context = canvas.getContext(\"2d\")!;\r\n\r\n            this._imageDataCache.data = imageData = context.getImageData(0, 0, width, height).data;\r\n            this._imageDataCache.key = key;\r\n        }\r\n\r\n        x = (x - this._currentMeasure.left) | 0;\r\n        y = (y - this._currentMeasure.top) | 0;\r\n\r\n        const pickedPixel = imageData[(x + y * width) * 4 + 3];\r\n\r\n        return pickedPixel > 0;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) {\r\n                        // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    private _prepareWorkingCanvasForOpaqueDetection() {\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const width = this._currentMeasure.width;\r\n        const height = this._currentMeasure.height;\r\n\r\n        if (!this._workingCanvas) {\r\n            const engine = this._host?.getScene()?.getEngine() || EngineStore.LastCreatedEngine;\r\n            if (!engine) {\r\n                throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n            }\r\n            this._workingCanvas = engine.createCanvas(width, height);\r\n        }\r\n        const canvas = this._workingCanvas;\r\n\r\n        const context = canvas.getContext(\"2d\")!;\r\n\r\n        context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    private _drawImage(context: ICanvasRenderingContext, sx: number, sy: number, sw: number, sh: number, tx: number, ty: number, tw: number, th: number) {\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx, ty, tw, th);\r\n\r\n        if (!this._detectPointerOnOpaqueOnly) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this._workingCanvas!;\r\n        context = canvas.getContext(\"2d\")!;\r\n\r\n        context.drawImage(this._domImage, sx, sy, sw, sh, tx - this._currentMeasure.left, ty - this._currentMeasure.top, tw, th);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        } else {\r\n            const rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            const column = (this.cellId / rowCount) >> 0;\r\n            const row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._prepareWorkingCanvasForOpaqueDetection();\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM: {\r\n                    const hRatio = this._currentMeasure.width / width;\r\n                    const vRatio = this._currentMeasure.height / height;\r\n                    const ratio = Math.min(hRatio, vRatio);\r\n                    const centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    const centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                }\r\n                case Image.STRETCH_EXTEND:\r\n                    this._drawImage(context, x, y, width, height, this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderNinePatch(context: ICanvasRenderingContext): void {\r\n        const leftWidth = this._sliceLeft;\r\n        const topHeight = this._sliceTop;\r\n        const bottomHeight = this._imageHeight - this._sliceBottom;\r\n        const rightWidth = this._imageWidth - this._sliceRight;\r\n        const centerWidth = this._sliceRight - this._sliceLeft;\r\n        const centerHeight = this._sliceBottom - this._sliceTop;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - leftWidth + 2;\r\n        const targetCenterHeight = this._currentMeasure.height - bottomHeight - topHeight + 2;\r\n        const centerLeftOffset = this._currentMeasure.left + leftWidth - 1;\r\n        const centerTopOffset = this._currentMeasure.top + topHeight - 1;\r\n        const rightOffset = this._currentMeasure.left + this._currentMeasure.width - rightWidth;\r\n        const bottomOffset = this._currentMeasure.top + this._currentMeasure.height - bottomHeight;\r\n\r\n        //Top Left\r\n        this._drawImage(context, 0, 0, leftWidth, topHeight, this._currentMeasure.left, this._currentMeasure.top, leftWidth, topHeight);\r\n        //Top\r\n        context.clearRect(centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        this._drawImage(context, this._sliceLeft, 0, centerWidth, topHeight, centerLeftOffset, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n        //Top Right\r\n        context.clearRect(rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        this._drawImage(context, this._sliceRight, 0, rightWidth, topHeight, rightOffset, this._currentMeasure.top, rightWidth, topHeight);\r\n        //Left\r\n        context.clearRect(this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        this._drawImage(context, 0, this._sliceTop, leftWidth, centerHeight, this._currentMeasure.left, centerTopOffset, leftWidth, targetCenterHeight);\r\n        // Center\r\n        context.clearRect(centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceLeft, this._sliceTop, centerWidth, centerHeight, centerLeftOffset, centerTopOffset, targetCenterWidth, targetCenterHeight);\r\n        //Right\r\n        context.clearRect(rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceTop, rightWidth, centerHeight, rightOffset, centerTopOffset, rightWidth, targetCenterHeight);\r\n        //Bottom Left\r\n        context.clearRect(this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        this._drawImage(context, 0, this._sliceBottom, leftWidth, bottomHeight, this._currentMeasure.left, bottomOffset, leftWidth, bottomHeight);\r\n        //Bottom\r\n        context.clearRect(centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        this._drawImage(context, this.sliceLeft, this._sliceBottom, centerWidth, bottomHeight, centerLeftOffset, bottomOffset, targetCenterWidth, bottomHeight);\r\n        //Bottom Right\r\n        context.clearRect(rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n        this._drawImage(context, this._sliceRight, this._sliceBottom, rightWidth, bottomHeight, rightOffset, bottomOffset, rightWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n        this.onSVGAttributesComputedObservable.clear();\r\n        this._removeCacheUsage(this._source);\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}\r\nRegisterClass(\"BABYLON.GUI.Image\", Image);\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the TextBlock part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly && this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly && this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _getRectangleFill(context: ICanvasRenderingContext) {\r\n        if (this.isEnabled) {\r\n            return this._getBackgroundColor(context);\r\n        } else {\r\n            return this._disabledColor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly && this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current button\r\n     * @param serializationObject defines the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this._textBlock) {\r\n            serializationObject.textBlockName = this._textBlock.name;\r\n        }\r\n        if (this._image) {\r\n            serializationObject.imageName = this._image.name;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.textBlockName) {\r\n            this._textBlock = this.getChildByName(serializedObject.textBlockName) as Nullable<TextBlock>;\r\n        }\r\n\r\n        if (serializedObject.imageName) {\r\n            this._image = this.getChildByName(serializedObject.imageName) as Nullable<Image>;\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        const result = new this(name);\r\n\r\n        // Adding image\r\n        const iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        const textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Button\", Button);\r\n", "import { Tools } from \"core/Misc/tools\";\r\n\r\nimport { Container } from \"./container\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport { TextWrapping } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _spacing = 0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that layout warnings should be ignored\r\n     */\r\n    @serialize()\r\n    public ignoreLayoutWarnings = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the spacing (in pixels) between each child.\r\n     */\r\n    @serialize()\r\n    public get spacing(): number {\r\n        return this._spacing;\r\n    }\r\n\r\n    public set spacing(value: number) {\r\n        if (this._spacing === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacing = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    @serialize()\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        for (const child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        let stackWidth = 0;\r\n        let stackHeight = 0;\r\n        const childrenCount = this._children.length;\r\n        for (let index = 0; index < childrenCount; index++) {\r\n            const child = this._children[index];\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage && !child._automaticSize) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child._paddingTopInPixels + child._paddingBottomInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (\r\n                    child._width.isPercentage &&\r\n                    !child._automaticSize &&\r\n                    child.getClassName() === \"TextBlock\" &&\r\n                    (child as TextBlock).textWrapping !== TextWrapping.Clip &&\r\n                    !(child as TextBlock).forceResizeWidth\r\n                ) {\r\n                    if (!this.ignoreLayoutWarnings) {\r\n                        Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                    }\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child._paddingLeftInPixels + child._paddingRightInPixels + (index < childrenCount - 1 ? this._spacing : 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        stackWidth += this._paddingLeftInPixels + this._paddingRightInPixels;\r\n        stackHeight += this._paddingTopInPixels + this._paddingBottomInPixels;\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if ((!this._manualHeight || this.adaptHeightToChildren) && this._isVertical) {\r\n            // do not specify height if strictly defined by user\r\n            const previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if ((!this._manualWidth || this.adaptWidthToChildren) && !this._isVertical) {\r\n            // do not specify width if strictly defined by user\r\n            const previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.manualWidth = this._manualWidth;\r\n        serializationObject.manualHeight = this._manualHeight;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        this._manualWidth = serializedObject.manualWidth;\r\n        this._manualHeight = serializedObject.manualHeight;\r\n\r\n        super._parseFromContent(serializedObject, host);\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.StackPanel\", StackPanel);\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColorItem;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offsetHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(\r\n                this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2,\r\n                this._currentMeasure.top + this._thickness / 2 + (actualHeight - offsetHeight) / 2,\r\n                offsetWidth,\r\n                offsetHeight\r\n            );\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            this.isChecked = !this.isChecked;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Checkbox\", Checkbox);\r\n", "/** @internal */\r\nexport class TextWrapper {\r\n    private _text: string;\r\n    private _characters: string[] | undefined;\r\n\r\n    public get text(): string {\r\n        return this._characters ? this._characters.join(\"\") : this._text;\r\n    }\r\n\r\n    public set text(txt: string) {\r\n        this._text = txt;\r\n        this._characters = Array.from && Array.from(txt);\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._characters ? this._characters.length : this._text.length;\r\n    }\r\n\r\n    public removePart(idxStart: number, idxEnd: number, insertTxt?: string): void {\r\n        this._text = this._text.slice(0, idxStart) + (insertTxt ? insertTxt : \"\") + this._text.slice(idxEnd);\r\n        if (this._characters) {\r\n            const newCharacters = insertTxt ? Array.from(insertTxt) : [];\r\n            this._characters.splice(idxStart, idxEnd - idxStart, ...newCharacters);\r\n        }\r\n    }\r\n\r\n    public charAt(idx: number): string {\r\n        return this._characters ? this._characters[idx] : this._text.charAt(idx);\r\n    }\r\n\r\n    public substr(from: number, length?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from >= 0) {\r\n                from = Math.min(from, this._characters.length);\r\n            } else {\r\n                from = this._characters.length + Math.max(from, -this._characters.length);\r\n            }\r\n            if (length === undefined) {\r\n                length = this._characters.length - from;\r\n            } else if (isNaN(length)) {\r\n                length = 0;\r\n            } else if (length < 0) {\r\n                length = 0;\r\n            }\r\n            const temp = [];\r\n            while (--length >= 0) {\r\n                temp[length] = this._characters[from + length];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substr(from, length);\r\n    }\r\n\r\n    public substring(from: number, to?: number): string {\r\n        if (this._characters) {\r\n            if (isNaN(from)) {\r\n                from = 0;\r\n            } else if (from > this._characters.length) {\r\n                from = this._characters.length;\r\n            } else if (from < 0) {\r\n                from = 0;\r\n            }\r\n            if (to === undefined) {\r\n                to = this._characters.length;\r\n            } else if (isNaN(to)) {\r\n                to = 0;\r\n            } else if (to > this._characters.length) {\r\n                to = this._characters.length;\r\n            } else if (to < 0) {\r\n                to = 0;\r\n            }\r\n            const temp = [];\r\n            let idx = 0;\r\n            while (from < to) {\r\n                temp[idx++] = this._characters[from++];\r\n            }\r\n            return temp.join(\"\");\r\n        }\r\n\r\n        return this._text.substring(from, to);\r\n    }\r\n\r\n    public isWord(index: number): boolean {\r\n        const rWord = /\\w/g;\r\n        return this._characters ? this._characters[index].search(rWord) !== -1 : this._text.search(rWord) !== -1;\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    protected _textWrapper: TextWrapper;\r\n    protected _placeholderText = \"\";\r\n    protected _background = \"#222222\";\r\n    protected _focusedBackground = \"#000000\";\r\n    protected _focusedColor = \"white\";\r\n    protected _placeholderColor = \"gray\";\r\n    protected _thickness = 1;\r\n    protected _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    protected _autoStretchWidth = true;\r\n    protected _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    protected _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    protected _focusedBy: string;\r\n    protected _blinkTimeout: number;\r\n    protected _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    protected _scrollLeft: Nullable<number>;\r\n    protected _textWidth: number;\r\n    protected _clickedCoordinate: Nullable<number>;\r\n    protected _deadKey = false;\r\n    protected _addKey = true;\r\n    protected _currentKey = \"\";\r\n    protected _isTextHighlightOn = false;\r\n    protected _textHighlightColor = \"#d5e0ff\";\r\n    protected _highligherOpacity = 0.4;\r\n    protected _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    protected _onFocusSelectAll = false;\r\n    protected _isPointerDown = false;\r\n    protected _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    protected _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /**Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /**Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key. 0 to disable. */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    protected _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this.isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this.isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this.isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this.isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this.isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this.isTextHighlightOn) {\r\n                        this.isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this.isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this.isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this.isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this.isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n        if (keyCode === 32) {\r\n            key = evt?.key ?? \" \";\r\n        }\r\n        this._deadKey = key === \"Dead\";\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey && !this._deadKey) {\r\n                if (this.isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this.isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += this._deadKey && evt?.key ? evt.key : key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this.isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this.isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n\r\n        this.isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this.isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this.isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this.isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this.isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this.isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this.isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    /** @internal */\r\n    private set isTextHighlightOn(value: boolean) {\r\n        if (this._isTextHighlightOn === value) {\r\n            return;\r\n        }\r\n        if (value) {\r\n            this.onTextHighlightObservable.notifyObservers(this);\r\n        }\r\n        this._isTextHighlightOn = value;\r\n    }\r\n\r\n    /** @internal */\r\n    private get isTextHighlightOn(): boolean {\r\n        return this._isTextHighlightOn;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n", "import type { Nullable } from \"core/types\";\r\n\r\nimport { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _rowDefinitionObservers: Observer<void>[] = [];\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitionObservers: Observer<void>[] = [];\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating that control content must be clipped\r\n     * Please note that not clipping content may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipContent(value: boolean) {\r\n        this._clipContent = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipContent = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get clipContent(): boolean {\r\n        return this._clipContent;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets a boolean indicating if the children are clipped to the current control bounds.\r\n     * Please note that not clipping children may generate issues with adt.useInvalidateRectOptimization so it is recommended to turn this optimization off if you want to use unclipped children\r\n     */\r\n    public set clipChildren(value: boolean) {\r\n        this._clipChildren = value;\r\n\r\n        // This value has to be replicated on all of the container cells\r\n        for (const key in this._cells) {\r\n            this._cells[key].clipChildren = value;\r\n        }\r\n    }\r\n\r\n    public get clipChildren(): boolean {\r\n        return this._clipChildren;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /** Gets the list of cells (e.g. the containers) */\r\n    public get cells(): { [key: string]: Container } {\r\n        return this._cells;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._rowDefinitionObservers.push(this._rowDefinitions[this.rowCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n        this._columnDefinitionObservers.push(this._columnDefinitions[this.columnCount - 1].onChangedObservable.add(() => this._markAsDirty())!);\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._rowDefinitionObservers[index] = this._rowDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        const current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.value === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n        this._columnDefinitionObservers[index] = this._columnDefinitions[index].onChangedObservable.add(() => this._markAsDirty())!;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (const control of cell.children) {\r\n            const childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (const control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            const key = `${x}:${index}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (let y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                const previousKey = `${x}:${y - 1}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        this._columnDefinitions.splice(index, 1);\r\n        this._columnDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            const key = `${index}:${y}`;\r\n            const cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (let y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (let x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                const previousKey = `${x - 1}:${y}`;\r\n                const key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        this._rowDefinitions.splice(index, 1);\r\n        this._rowDefinitionObservers.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        if (this._childControls.indexOf(control) !== -1) {\r\n            Tools.Warn(`Control (Name:${control.name}, UniqueId:${control.uniqueId}) is already associated with this grid. You must remove it before reattaching it`);\r\n            return this;\r\n        }\r\n\r\n        const x = Math.min(row, this._rowDefinitions.length - 1);\r\n        const y = Math.min(column, this._columnDefinitions.length - 1);\r\n        const key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            goodContainer.clipContent = this.clipContent;\r\n            goodContainer.clipChildren = this.clipChildren;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        const index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        const cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n            control._tag = null;\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        const widths = [];\r\n        const heights = [];\r\n        const lefts = [];\r\n        const tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            if (rowDefinition.isPixel) {\r\n                const height = rowDefinition.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += rowDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (const rowDefinition of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!rowDefinition.isPixel) {\r\n                const height = Math.round((rowDefinition.value / globalHeightPercentage) * availableHeight);\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += rowDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            if (columnDefinition.isPixel) {\r\n                const width = columnDefinition.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += columnDefinition.value;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (const columnDefinition of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!columnDefinition.isPixel) {\r\n                const width = Math.round((columnDefinition.value / globalWidthPercentage) * availableWidth);\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += columnDefinition.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (const key in this._cells) {\r\n                if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                    continue;\r\n                }\r\n                const split = key.split(\":\");\r\n                const x = parseInt(split[0]);\r\n                const y = parseInt(split[1]);\r\n                const cell = this._cells[key];\r\n\r\n                cell.leftInPixels = lefts[y];\r\n                cell.topInPixels = tops[x];\r\n                cell.widthInPixels = widths[y];\r\n                cell.heightInPixels = heights[x];\r\n                cell._left.ignoreAdaptiveScaling = true;\r\n                cell._top.ignoreAdaptiveScaling = true;\r\n                cell._width.ignoreAdaptiveScaling = true;\r\n                cell._height.ignoreAdaptiveScaling = true;\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const key in this._cells) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._cells, key)) {\r\n                continue;\r\n            }\r\n\r\n            const child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Columns\r\n            for (let index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (let index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (const control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n        for (let index = 0; index < this._rowDefinitions.length; index++) {\r\n            this._rowDefinitions[index].onChangedObservable.remove(this._rowDefinitionObservers[index]);\r\n        }\r\n        for (let index = 0; index < this._columnDefinitions.length; index++) {\r\n            this._columnDefinitions[index].onChangedObservable.remove(this._columnDefinitionObservers[index]);\r\n        }\r\n        this._rowDefinitionObservers.length = 0;\r\n        this._rowDefinitions.length = 0;\r\n        this._columnDefinitionObservers.length = 0;\r\n        this._columnDefinitions.length = 0;\r\n        this._cells = {};\r\n        this._childControls.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        serializationObject.columnCount = this.columnCount;\r\n        serializationObject.rowCount = this.rowCount;\r\n        serializationObject.columns = [];\r\n        serializationObject.rows = [];\r\n        serializationObject.tags = [];\r\n        for (let i = 0; i < this.columnCount; ++i) {\r\n            const cd = this.getColumnDefinition(i);\r\n            const childSerializationObject = { value: cd?.getValue(this.host), unit: cd?.unit };\r\n            serializationObject.columns.push(childSerializationObject);\r\n        }\r\n        for (let i = 0; i < this.rowCount; ++i) {\r\n            const rd = this.getRowDefinition(i);\r\n            const childSerializationObject = { value: rd?.getValue(this.host), unit: rd?.unit };\r\n            serializationObject.rows.push(childSerializationObject);\r\n        }\r\n        this.children.forEach((child) => {\r\n            serializationObject.tags.push(child._tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        const children: Control[] = [];\r\n        this.children.forEach((child) => {\r\n            children.push(child);\r\n        });\r\n        this.removeRowDefinition(0);\r\n        this.removeColumnDefinition(0);\r\n        for (let i = 0; i < serializedObject.columnCount; ++i) {\r\n            const columnValue = serializedObject.columns[i].value;\r\n            const unit = serializedObject.columns[i].unit;\r\n            this.addColumnDefinition(columnValue, unit === 1 ? true : false);\r\n        }\r\n        for (let i = 0; i < serializedObject.rowCount; ++i) {\r\n            const rowValue = serializedObject.rows[i].value;\r\n            const unit = serializedObject.rows[i].unit;\r\n            this.addRowDefinition(rowValue, unit === 1 ? true : false);\r\n        }\r\n\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const cellInfo = serializedObject.tags[i];\r\n            let rowNumber = parseInt(cellInfo.substring(0, cellInfo.search(\":\")));\r\n            if (isNaN(rowNumber)) {\r\n                rowNumber = 0;\r\n            }\r\n            let columnNumber = parseInt(cellInfo.substring(cellInfo.search(\":\") + 1));\r\n            if (isNaN(columnNumber)) {\r\n                columnNumber = 0;\r\n            }\r\n            this.addControl(children[i], rowNumber, columnNumber);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Grid\", Grid);\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \"../controls/textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: ICanvas;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    @serialize()\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._value.toHSVToRef(this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            if (this._width.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._width.fromString(value);\r\n            }\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#position-and-size\r\n     */\r\n    @serialize()\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            if (this._height.getValue(this._host) === 0) {\r\n                value = \"1px\";\r\n                this._height.fromString(value);\r\n            }\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    @serialize()\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(0.88, 0.1, 0.1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure): void {\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerDiameter = (radius - wheelThickness) * 2;\r\n        const squareSize = innerDiameter / Math.sqrt(2);\r\n        const offset = radius - squareSize * 0.5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: ICanvasRenderingContext) {\r\n        const lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, \"#fff\");\r\n        lgh.addColorStop(1, \"hsl(\" + hueValue + \", 100%, 50%)\");\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        const lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, \"rgba(0,0,0,0)\");\r\n        lgv.addColorStop(1, \"#000\");\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: ICanvasRenderingContext) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#333333\";\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"#ffffff\";\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): ICanvas {\r\n        // Shoudl abstract platform instead of using LastCreatedEngine\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            throw new Error(\"Invalid engine. Unable to create a canvas.\");\r\n        }\r\n        const canvas = engine.createCanvas(radius * 2, radius * 2);\r\n        const context = canvas.getContext(\"2d\");\r\n        const image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        const data = image.data;\r\n\r\n        const color = this._tmpColor;\r\n        const maxDistSq = radius * radius;\r\n        const innerRadius = radius - thickness;\r\n        const minDistSq = innerRadius * innerRadius;\r\n\r\n        for (let x = -radius; x < radius; x++) {\r\n            for (let y = -radius; y < radius; y++) {\r\n                const distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                const dist = Math.sqrt(distSq);\r\n                const ang = Math.atan2(y, x);\r\n\r\n                Color3.HSVtoRGBToRef((ang * 180) / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                const index = (x + radius + (y + radius) * 2 * radius) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                let alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                let alphaAmount = 0.2;\r\n                const maxAlpha = 0.2;\r\n                const minAlpha = 0.04;\r\n                const lowerRadius = 50;\r\n                const upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = ((minAlpha - maxAlpha) * (radius - lowerRadius)) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - (alphaRatio - (1 - alphaAmount)) / alphaAmount);\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const wheelThickness = radius * 0.2;\r\n        const left = this._currentMeasure.left;\r\n        const top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h, this._squareLeft, this._squareTop, this._squareSize, this._squareSize, context);\r\n\r\n        let cx = this._squareLeft + this._squareSize * this._s;\r\n        let cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * 0.04, context);\r\n\r\n        const dist = radius - wheelThickness * 0.5;\r\n        cx = left + radius + Math.cos(((this._h - 180) * Math.PI) / 180) * dist;\r\n        cy = top + radius + Math.sin(((this._h - 180) * Math.PI) / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * 0.35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n            const centerX = radius + this._currentMeasure.left;\r\n            const centerY = radius + this._currentMeasure.top;\r\n            this._h = (Math.atan2(y - centerY, x - centerX) * 180) / Math.PI + 180;\r\n        } else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        Color3.HSVtoRGBToRef(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        const left = this._squareLeft;\r\n        const top = this._squareTop;\r\n        const size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size && y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        const radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * 0.5;\r\n        const centerX = radius + this._currentMeasure.left;\r\n        const centerY = radius + this._currentMeasure.top;\r\n        const wheelThickness = radius * 0.2;\r\n        const innerRadius = radius - wheelThickness;\r\n        const radiusSq = radius * radius;\r\n        const innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        const dx = x - centerX;\r\n        const dy = y - centerY;\r\n\r\n        const distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        const x = this._transformedPosition.x;\r\n        const y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isReadOnly) {\r\n            // Invert transform\r\n            this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n            const x = this._transformedPosition.x;\r\n            const y = this._transformedPosition.y;\r\n\r\n            if (this._pointerIsDown) {\r\n                this._updateValueFromPointer(x, y);\r\n            }\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n\r\n    public _onCanvasBlur() {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n\r\n    /**\r\n     * This function expands the color picker by creating a color picker dialog with manual\r\n     * color value input and the ability to save colors into an array to be used later in\r\n     * subsequent launches of the dialogue.\r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\r\n     * @param options.pickerWidth\r\n     * @param options.pickerHeight\r\n     * @param options.headerHeight\r\n     * @param options.lastColor\r\n     * @param options.swatchLimit\r\n     * @param options.numSwatchesPerLine\r\n     * @param options.savedColors\r\n     * @returns picked color as a hex string and the saved colors array as hex strings.\r\n     */\r\n    public static ShowPickerDialogAsync(\r\n        advancedTexture: AdvancedDynamicTexture,\r\n        options: {\r\n            pickerWidth?: string;\r\n            pickerHeight?: string;\r\n            headerHeight?: string;\r\n            lastColor?: string;\r\n            swatchLimit?: number;\r\n            numSwatchesPerLine?: number;\r\n            savedColors?: Array<string>;\r\n        }\r\n    ): Promise<{\r\n        savedColors?: string[];\r\n        pickedColor: string;\r\n    }> {\r\n        return new Promise((resolve) => {\r\n            // Default options\r\n            options.pickerWidth = options.pickerWidth || \"640px\";\r\n            options.pickerHeight = options.pickerHeight || \"400px\";\r\n            options.headerHeight = options.headerHeight || \"35px\";\r\n            options.lastColor = options.lastColor || \"#000000\";\r\n            options.swatchLimit = options.swatchLimit || 20;\r\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\r\n\r\n            // Window size settings\r\n            const drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\r\n            const rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\r\n            const gutterSize: number = Math.floor(rawSwatchSize * 0.25);\r\n            const colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\r\n            const swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\r\n            const drawerMaxSize: number = swatchSize * drawerMaxRows + gutterSize * (drawerMaxRows + 1);\r\n            const containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\r\n\r\n            // Button Colors\r\n            const buttonColor: string = \"#c0c0c0\";\r\n            const buttonBackgroundColor: string = \"#535353\";\r\n            const buttonBackgroundHoverColor: string = \"#414141\";\r\n            const buttonBackgroundClickColor: string = \"515151\";\r\n            const buttonDisabledColor: string = \"#555555\";\r\n            const buttonDisabledBackgroundColor: string = \"#454545\";\r\n            const currentSwatchesOutlineColor: string = \"#404040\";\r\n            const luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\r\n            const luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\r\n            const iconColorDark: string = \"#aaaaaa\";\r\n            const iconColorLight: string = \"#ffffff\";\r\n\r\n            // Button settings\r\n            let buttonFontSize: number;\r\n            let butEdit: Button;\r\n\r\n            // Input Text Colors\r\n            const inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\r\n            const inputTextBackgroundColor: string = \"#454545\";\r\n            const inputTextColor: string = \"#f0f0f0\";\r\n\r\n            // This int is used for naming swatches and serves as the index for calling them from the list\r\n            let swatchNumber: number;\r\n\r\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\r\n            let swatchDrawer: Grid;\r\n            let editSwatchMode: boolean = false;\r\n\r\n            // Color InputText fields that will be updated upon value change\r\n            let butSave: Button;\r\n            let lastVal: string;\r\n            let activeField: string;\r\n\r\n            // Dialog menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n            const dialogContainer: Grid = new Grid();\r\n            dialogContainer.name = \"Dialog Container\";\r\n            dialogContainer.width = options.pickerWidth;\r\n            if (options.savedColors) {\r\n                dialogContainer.height = containerSize;\r\n                const topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\r\n                dialogContainer.addRowDefinition(topRow, false);\r\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\r\n            } else {\r\n                dialogContainer.height = options.pickerHeight;\r\n                dialogContainer.addRowDefinition(1.0, false);\r\n            }\r\n            advancedTexture.addControl(dialogContainer);\r\n\r\n            // Swatch drawer which contains all saved color buttons\r\n            if (options.savedColors) {\r\n                swatchDrawer = new Grid();\r\n                swatchDrawer.name = \"Swatch Drawer\";\r\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                swatchDrawer.background = buttonBackgroundColor;\r\n                swatchDrawer.width = options.pickerWidth!;\r\n                const initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\r\n                let gutterCount: number;\r\n                if (initialRows == 0) {\r\n                    gutterCount = 0;\r\n                } else {\r\n                    gutterCount = initialRows + 1;\r\n                }\r\n                swatchDrawer.height = (swatchSize * initialRows + gutterCount * gutterSize).toString() + \"px\";\r\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\r\n                for (let i = 0; i < Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addRowDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addRowDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                for (let i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\r\n                    if (i % 2 != 0) {\r\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\r\n                    } else {\r\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\r\n                    }\r\n                }\r\n                dialogContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n            // Picker container\r\n            const pickerPanel: Grid = new Grid();\r\n            pickerPanel.name = \"Picker Panel\";\r\n            pickerPanel.height = options.pickerHeight;\r\n            const panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\r\n            const pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\r\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\r\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\r\n            dialogContainer.addControl(pickerPanel, 0, 0);\r\n\r\n            // Picker container header\r\n            const header: Rectangle = new Rectangle();\r\n            header.name = \"Dialogue Header Bar\";\r\n            header.background = \"#cccccc\";\r\n            header.thickness = 0;\r\n            pickerPanel.addControl(header, 0, 0);\r\n\r\n            // Header close button\r\n            const closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\r\n            closeButton.fontFamily = \"coreglyphs\";\r\n            const headerColor3: Color3 = Color3.FromHexString(header.background);\r\n            const closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\r\n            closeButton.color = closeIconColor.toHexString();\r\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\r\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n            closeButton.height = closeButton.width = options.headerHeight;\r\n            closeButton.background = header.background;\r\n            closeButton.thickness = 0;\r\n            closeButton.pointerDownAnimation = () => {};\r\n            closeButton.pointerUpAnimation = () => {\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.pointerEnterAnimation = () => {\r\n                closeButton.color = header.background;\r\n                closeButton.background = \"red\";\r\n            };\r\n            closeButton.pointerOutAnimation = () => {\r\n                closeButton.color = closeIconColor.toHexString();\r\n                closeButton.background = header.background;\r\n            };\r\n            closeButton.onPointerClickObservable.add(() => {\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            pickerPanel.addControl(closeButton, 0, 0);\r\n\r\n            // Dialog container body\r\n            const dialogBody: Grid = new Grid();\r\n            dialogBody.name = \"Dialogue Body\";\r\n            dialogBody.background = buttonBackgroundColor;\r\n            const dialogBodyCols: number[] = [0.4375, 0.5625];\r\n            dialogBody.addRowDefinition(1.0, false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\r\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\r\n            pickerPanel.addControl(dialogBody, 1, 0);\r\n\r\n            // Picker grid\r\n            const pickerGrid: Grid = new Grid();\r\n            pickerGrid.name = \"Picker Grid\";\r\n            pickerGrid.addRowDefinition(0.85, false);\r\n            pickerGrid.addRowDefinition(0.15, false);\r\n            dialogBody.addControl(pickerGrid, 0, 0);\r\n\r\n            //  Picker control\r\n            const picker = new ColorPicker();\r\n            picker.name = \"GUI Color Picker\";\r\n            if (options.pickerHeight < options.pickerWidth) {\r\n                picker.width = 0.89;\r\n            } else {\r\n                picker.height = 0.89;\r\n            }\r\n            picker.value = Color3.FromHexString(options.lastColor);\r\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            picker.onPointerDownObservable.add(() => {\r\n                activeField = picker.name!;\r\n                lastVal = \"\";\r\n                editSwatches(false);\r\n            });\r\n            picker.onValueChangedObservable.add(function (value) {\r\n                // value is a color3\r\n                if (activeField == picker.name) {\r\n                    updateValues(value, picker.name);\r\n                }\r\n            });\r\n            pickerGrid.addControl(picker, 0, 0);\r\n\r\n            // Picker body right quarant\r\n            const pickerBodyRight: Grid = new Grid();\r\n            pickerBodyRight.name = \"Dialogue Right Half\";\r\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            const pickerBodyRightRows: number[] = [0.514, 0.486];\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\r\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\r\n            dialogBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n            // Picker container swatches and buttons\r\n            const pickerSwatchesButtons: Grid = new Grid();\r\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n            const pickerButtonsCol: number[] = [0.417, 0.583];\r\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\r\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\r\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n            // Picker Swatches quadrant\r\n            const pickerSwatches: Grid = new Grid();\r\n            pickerSwatches.name = \"New and Current Swatches\";\r\n            const pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\r\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\r\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n            // Active swatches\r\n            const activeSwatches: Grid = new Grid();\r\n            activeSwatches.name = \"Active Swatches\";\r\n            activeSwatches.width = 0.67;\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            activeSwatches.addRowDefinition(0.5, false);\r\n            pickerSwatches.addControl(activeSwatches, 2, 0);\r\n\r\n            const labelWidth: number = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11);\r\n            const labelHeight: number = Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5);\r\n\r\n            let labelTextSize: number;\r\n            if (options.pickerWidth > options.pickerHeight) {\r\n                labelTextSize = labelHeight;\r\n            } else {\r\n                labelTextSize = labelWidth;\r\n            }\r\n            // New color swatch and previous color button\r\n            const newText: TextBlock = new TextBlock();\r\n            newText.text = \"new\";\r\n            newText.name = \"New Color Label\";\r\n            newText.color = buttonColor;\r\n            newText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(newText, 1, 0);\r\n\r\n            const newSwatch = new Rectangle();\r\n            newSwatch.name = \"New Color Swatch\";\r\n            newSwatch.background = options.lastColor;\r\n            newSwatch.thickness = 0;\r\n            activeSwatches.addControl(newSwatch, 0, 0);\r\n\r\n            const currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n            currentSwatch.background = options.lastColor;\r\n            currentSwatch.thickness = 0;\r\n            currentSwatch.onPointerClickObservable.add(() => {\r\n                const revertColor = Color3.FromHexString(currentSwatch.background);\r\n                updateValues(revertColor, currentSwatch.name!);\r\n                editSwatches(false);\r\n            });\r\n            currentSwatch.pointerDownAnimation = () => {};\r\n            currentSwatch.pointerUpAnimation = () => {};\r\n            currentSwatch.pointerEnterAnimation = () => {};\r\n            currentSwatch.pointerOutAnimation = () => {};\r\n            activeSwatches.addControl(currentSwatch, 1, 0);\r\n\r\n            const swatchOutline: Rectangle = new Rectangle();\r\n            swatchOutline.name = \"Swatch Outline\";\r\n            swatchOutline.width = 0.67;\r\n            swatchOutline.thickness = 2;\r\n            swatchOutline.color = currentSwatchesOutlineColor;\r\n            swatchOutline.isHitTestVisible = false;\r\n            pickerSwatches.addControl(swatchOutline, 2, 0);\r\n\r\n            const currentText: TextBlock = new TextBlock();\r\n            currentText.name = \"Current Color Label\";\r\n            currentText.text = \"current\";\r\n            currentText.color = buttonColor;\r\n            currentText.fontSize = labelTextSize;\r\n            pickerSwatches.addControl(currentText, 3, 0);\r\n\r\n            // Buttons grid\r\n            const buttonGrid: Grid = new Grid();\r\n            buttonGrid.name = \"Button Grid\";\r\n            buttonGrid.height = 0.8;\r\n            const buttonGridRows: number = 1 / 3;\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            buttonGrid.addRowDefinition(buttonGridRows, false);\r\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\r\n\r\n            // Determine pixel width and height for all buttons from overall panel dimensions\r\n            const buttonWidth = Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67).toString() + \"px\";\r\n            const buttonHeight =\r\n                Math.floor(\r\n                    parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7\r\n                ).toString() + \"px\";\r\n\r\n            // Determine button type size\r\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\r\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\r\n            } else {\r\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\r\n            }\r\n\r\n            // Panel Buttons\r\n            const butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n            butOK.width = buttonWidth;\r\n            butOK.height = buttonHeight;\r\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butOK.thickness = 2;\r\n            butOK.color = buttonColor;\r\n            butOK.fontSize = buttonFontSize;\r\n            butOK.background = buttonBackgroundColor;\r\n            butOK.onPointerEnterObservable.add(() => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            });\r\n            butOK.onPointerOutObservable.add(() => {\r\n                butOK.background = buttonBackgroundColor;\r\n            });\r\n            butOK.pointerDownAnimation = () => {\r\n                butOK.background = buttonBackgroundClickColor;\r\n            };\r\n            butOK.pointerUpAnimation = () => {\r\n                butOK.background = buttonBackgroundHoverColor;\r\n            };\r\n            butOK.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(newSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butOK, 0, 0);\r\n\r\n            const butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n            butCancel.width = buttonWidth;\r\n            butCancel.height = buttonHeight;\r\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            butCancel.thickness = 2;\r\n            butCancel.color = buttonColor;\r\n            butCancel.fontSize = buttonFontSize;\r\n            butCancel.background = buttonBackgroundColor;\r\n            butCancel.onPointerEnterObservable.add(() => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            });\r\n            butCancel.onPointerOutObservable.add(() => {\r\n                butCancel.background = buttonBackgroundColor;\r\n            });\r\n            butCancel.pointerDownAnimation = () => {\r\n                butCancel.background = buttonBackgroundClickColor;\r\n            };\r\n            butCancel.pointerUpAnimation = () => {\r\n                butCancel.background = buttonBackgroundHoverColor;\r\n            };\r\n            butCancel.onPointerClickObservable.add(() => {\r\n                editSwatches(false);\r\n                closePicker(currentSwatch.background);\r\n            });\r\n            buttonGrid.addControl(butCancel, 1, 0);\r\n\r\n            if (options.savedColors) {\r\n                butSave = Button.CreateSimpleButton(\"butSave\", \"Save\");\r\n                butSave.width = buttonWidth;\r\n                butSave.height = buttonHeight;\r\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                butSave.thickness = 2;\r\n                butSave.fontSize = buttonFontSize;\r\n                if (options.savedColors.length < options.swatchLimit!) {\r\n                    butSave.color = buttonColor;\r\n                    butSave.background = buttonBackgroundColor;\r\n                } else {\r\n                    disableButton(butSave, true);\r\n                }\r\n                butSave.onPointerEnterObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.onPointerOutObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundColor;\r\n                        }\r\n                    }\r\n                });\r\n                butSave.pointerDownAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundClickColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.pointerUpAnimation = () => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            butSave.background = buttonBackgroundHoverColor;\r\n                        }\r\n                    }\r\n                };\r\n                butSave.onPointerClickObservable.add(() => {\r\n                    if (options.savedColors) {\r\n                        if (options.savedColors.length == 0) {\r\n                            setEditButtonVisibility(true);\r\n                        }\r\n                        if (options.savedColors.length < options.swatchLimit!) {\r\n                            updateSwatches(newSwatch.background, butSave);\r\n                        }\r\n                        editSwatches(false);\r\n                    }\r\n                });\r\n                if (options.savedColors.length > 0) {\r\n                    setEditButtonVisibility(true);\r\n                }\r\n                buttonGrid.addControl(butSave, 2, 0);\r\n            }\r\n\r\n            // Picker color values input\r\n            const pickerColorValues: Grid = new Grid();\r\n            pickerColorValues.name = \"Dialog Lower Right\";\r\n            pickerColorValues.addRowDefinition(0.02, false);\r\n            pickerColorValues.addRowDefinition(0.63, false);\r\n            pickerColorValues.addRowDefinition(0.21, false);\r\n            pickerColorValues.addRowDefinition(0.14, false);\r\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n            // RGB values text boxes\r\n            const currentColor = Color3.FromHexString(options.lastColor);\r\n            const rgbValuesQuadrant: Grid = new Grid();\r\n            rgbValuesQuadrant.name = \"RGB Values\";\r\n            rgbValuesQuadrant.width = 0.82;\r\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n            for (let i = 0; i < inputFieldLabels.length; i++) {\r\n                const labelText: TextBlock = new TextBlock();\r\n                labelText.text = inputFieldLabels[i];\r\n                labelText.color = buttonColor;\r\n                labelText.fontSize = buttonFontSize;\r\n                rgbValuesQuadrant.addControl(labelText, i, 0);\r\n            }\r\n\r\n            // Input fields for RGB values\r\n            const rValInt = new InputText();\r\n            rValInt.width = 0.83;\r\n            rValInt.height = 0.72;\r\n            rValInt.name = \"rIntField\";\r\n            rValInt.fontSize = buttonFontSize;\r\n            rValInt.text = (currentColor.r * 255).toString();\r\n            rValInt.color = inputTextColor;\r\n            rValInt.background = inputTextBackgroundColor;\r\n            rValInt.onFocusObservable.add(() => {\r\n                activeField = rValInt.name!;\r\n                lastVal = rValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            rValInt.onBlurObservable.add(() => {\r\n                if (rValInt.text == \"\") {\r\n                    rValInt.text = \"0\";\r\n                }\r\n                updateInt(rValInt, \"r\");\r\n                if (activeField == rValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == rValInt.name) {\r\n                    updateInt(rValInt, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n            const gValInt = new InputText();\r\n            gValInt.width = 0.83;\r\n            gValInt.height = 0.72;\r\n            gValInt.name = \"gIntField\";\r\n            gValInt.fontSize = buttonFontSize;\r\n            gValInt.text = (currentColor.g * 255).toString();\r\n            gValInt.color = inputTextColor;\r\n            gValInt.background = inputTextBackgroundColor;\r\n            gValInt.onFocusObservable.add(() => {\r\n                activeField = gValInt.name!;\r\n                lastVal = gValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            gValInt.onBlurObservable.add(() => {\r\n                if (gValInt.text == \"\") {\r\n                    gValInt.text = \"0\";\r\n                }\r\n                updateInt(gValInt, \"g\");\r\n                if (activeField == gValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == gValInt.name) {\r\n                    updateInt(gValInt, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n            const bValInt = new InputText();\r\n            bValInt.width = 0.83;\r\n            bValInt.height = 0.72;\r\n            bValInt.name = \"bIntField\";\r\n            bValInt.fontSize = buttonFontSize;\r\n            bValInt.text = (currentColor.b * 255).toString();\r\n            bValInt.color = inputTextColor;\r\n            bValInt.background = inputTextBackgroundColor;\r\n            bValInt.onFocusObservable.add(() => {\r\n                activeField = bValInt.name!;\r\n                lastVal = bValInt.text;\r\n                editSwatches(false);\r\n            });\r\n            bValInt.onBlurObservable.add(() => {\r\n                if (bValInt.text == \"\") {\r\n                    bValInt.text = \"0\";\r\n                }\r\n                updateInt(bValInt, \"b\");\r\n                if (activeField == bValInt.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValInt.onTextChangedObservable.add(() => {\r\n                if (activeField == bValInt.name) {\r\n                    updateInt(bValInt, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n            const rValDec = new InputText();\r\n            rValDec.width = 0.95;\r\n            rValDec.height = 0.72;\r\n            rValDec.name = \"rDecField\";\r\n            rValDec.fontSize = buttonFontSize;\r\n            rValDec.text = currentColor.r.toString();\r\n            rValDec.color = inputTextColor;\r\n            rValDec.background = inputTextBackgroundColor;\r\n            rValDec.onFocusObservable.add(() => {\r\n                activeField = rValDec.name!;\r\n                lastVal = rValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            rValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\r\n                    rValDec.text = \"0\";\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n                if (activeField == rValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            rValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == rValDec.name) {\r\n                    updateFloat(rValDec, \"r\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n            const gValDec = new InputText();\r\n            gValDec.width = 0.95;\r\n            gValDec.height = 0.72;\r\n            gValDec.name = \"gDecField\";\r\n            gValDec.fontSize = buttonFontSize;\r\n            gValDec.text = currentColor.g.toString();\r\n            gValDec.color = inputTextColor;\r\n            gValDec.background = inputTextBackgroundColor;\r\n            gValDec.onFocusObservable.add(() => {\r\n                activeField = gValDec.name!;\r\n                lastVal = gValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            gValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\r\n                    gValDec.text = \"0\";\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n                if (activeField == gValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            gValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == gValDec.name) {\r\n                    updateFloat(gValDec, \"g\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n            const bValDec = new InputText();\r\n            bValDec.width = 0.95;\r\n            bValDec.height = 0.72;\r\n            bValDec.name = \"bDecField\";\r\n            bValDec.fontSize = buttonFontSize;\r\n            bValDec.text = currentColor.b.toString();\r\n            bValDec.color = inputTextColor;\r\n            bValDec.background = inputTextBackgroundColor;\r\n            bValDec.onFocusObservable.add(() => {\r\n                activeField = bValDec.name!;\r\n                lastVal = bValDec.text;\r\n                editSwatches(false);\r\n            });\r\n            bValDec.onBlurObservable.add(() => {\r\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\r\n                    bValDec.text = \"0\";\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n                if (activeField == bValDec.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            bValDec.onTextChangedObservable.add(() => {\r\n                if (activeField == bValDec.name) {\r\n                    updateFloat(bValDec, \"b\");\r\n                }\r\n            });\r\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n            // Hex value input\r\n            const hexValueQuadrant: Grid = new Grid();\r\n            hexValueQuadrant.name = \"Hex Value\";\r\n            hexValueQuadrant.width = 0.82;\r\n            hexValueQuadrant.addRowDefinition(1.0, false);\r\n            hexValueQuadrant.addColumnDefinition(0.1, false);\r\n            hexValueQuadrant.addColumnDefinition(0.9, false);\r\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n            const labelText: TextBlock = new TextBlock();\r\n            labelText.text = \"#\";\r\n            labelText.color = buttonColor;\r\n            labelText.fontSize = buttonFontSize;\r\n            hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n            const hexVal = new InputText();\r\n            hexVal.width = 0.96;\r\n            hexVal.height = 0.72;\r\n            hexVal.name = \"hexField\";\r\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            hexVal.fontSize = buttonFontSize;\r\n            const minusPound = options.lastColor.split(\"#\");\r\n            hexVal.text = minusPound[1];\r\n            hexVal.color = inputTextColor;\r\n            hexVal.background = inputTextBackgroundColor;\r\n            hexVal.onFocusObservable.add(() => {\r\n                activeField = hexVal.name!;\r\n                lastVal = hexVal.text;\r\n                editSwatches(false);\r\n            });\r\n            hexVal.onBlurObservable.add(() => {\r\n                if (hexVal.text.length == 3) {\r\n                    const val = hexVal.text.split(\"\");\r\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                if (hexVal.text == \"\") {\r\n                    hexVal.text = \"000000\";\r\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\r\n                }\r\n                if (activeField == hexVal.name) {\r\n                    activeField = \"\";\r\n                }\r\n            });\r\n            hexVal.onTextChangedObservable.add(() => {\r\n                let newHexValue: string = hexVal.text;\r\n                const checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\r\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                    hexVal.text = lastVal;\r\n                } else {\r\n                    if (hexVal.text.length < 6) {\r\n                        const leadingZero: number = 6 - hexVal.text.length;\r\n                        for (let i = 0; i < leadingZero; i++) {\r\n                            newHexValue = \"0\" + newHexValue;\r\n                        }\r\n                    }\r\n                    if (hexVal.text.length == 3) {\r\n                        const val: string[] = hexVal.text.split(\"\");\r\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                    }\r\n                    newHexValue = \"#\" + newHexValue;\r\n                    if (activeField == hexVal.name) {\r\n                        lastVal = hexVal.text;\r\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\r\n                    }\r\n                }\r\n            });\r\n            hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n            if (options.savedColors && options.savedColors.length > 0) {\r\n                updateSwatches(\"\", butSave!);\r\n            }\r\n\r\n            /**\r\n             * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n             * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n             * are will receive no update. This is to prevent the input from the user being overwritten.\r\n             * @param value\r\n             * @param inputField\r\n             */\r\n            function updateValues(value: Color3, inputField: string) {\r\n                activeField = inputField;\r\n                const pickedColor: string = value.toHexString();\r\n                newSwatch.background = pickedColor;\r\n                if (rValInt.name != activeField) {\r\n                    rValInt.text = Math.floor(value.r * 255).toString();\r\n                }\r\n                if (gValInt.name != activeField) {\r\n                    gValInt.text = Math.floor(value.g * 255).toString();\r\n                }\r\n                if (bValInt.name != activeField) {\r\n                    bValInt.text = Math.floor(value.b * 255).toString();\r\n                }\r\n                if (rValDec.name != activeField) {\r\n                    rValDec.text = value.r.toString();\r\n                }\r\n                if (gValDec.name != activeField) {\r\n                    gValDec.text = value.g.toString();\r\n                }\r\n                if (bValDec.name != activeField) {\r\n                    bValDec.text = value.b.toString();\r\n                }\r\n                if (hexVal.name != activeField) {\r\n                    const minusPound: string[] = pickedColor.split(\"#\");\r\n                    hexVal.text = minusPound[1];\r\n                }\r\n                if (picker.name != activeField) {\r\n                    picker.value = value;\r\n                }\r\n            }\r\n\r\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateInt(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\") {\r\n                        if (Math.floor(parseInt(newValue)) < 0) {\r\n                            newValue = \"0\";\r\n                        } else if (Math.floor(parseInt(newValue)) > 255) {\r\n                            newValue = \"255\";\r\n                        } else if (isNaN(parseInt(newValue))) {\r\n                            newValue = \"0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\") {\r\n                    newValue = parseInt(newValue).toString();\r\n                    field.text = newValue;\r\n                    const newSwatchRGB: Color3 = Color3.FromHexString(newSwatch.background);\r\n                    if (activeField == field.name) {\r\n                        if (channel == \"r\") {\r\n                            updateValues(new Color3(parseInt(newValue) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                        } else if (channel == \"g\") {\r\n                            updateValues(new Color3(newSwatchRGB.r, parseInt(newValue) / 255, newSwatchRGB.b), field.name);\r\n                        } else {\r\n                            updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseInt(newValue) / 255), field.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\r\n            function updateFloat(field: InputText, channel: string) {\r\n                let newValue: string = field.text;\r\n                const checkVal: boolean = /[^0-9.]/g.test(newValue);\r\n                if (checkVal) {\r\n                    field.text = lastVal;\r\n                    return;\r\n                } else {\r\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                        if (parseFloat(newValue) < 0.0) {\r\n                            newValue = \"0.0\";\r\n                        } else if (parseFloat(newValue) > 1.0) {\r\n                            newValue = \"1.0\";\r\n                        } else if (isNaN(parseFloat(newValue))) {\r\n                            newValue = \"0.0\";\r\n                        }\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    newValue = parseFloat(newValue).toString();\r\n                    field.text = newValue;\r\n                } else {\r\n                    newValue = \"0.0\";\r\n                }\r\n                const newSwatchRGB = Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\") {\r\n                        updateValues(new Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\r\n                    } else if (channel == \"g\") {\r\n                        updateValues(new Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\r\n                    } else {\r\n                        updateValues(new Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\r\n            function deleteSwatch(index: number) {\r\n                if (options.savedColors) {\r\n                    options.savedColors.splice(index, 1);\r\n                }\r\n                if (options.savedColors && options.savedColors.length == 0) {\r\n                    setEditButtonVisibility(false);\r\n                    editSwatchMode = false;\r\n                }\r\n            }\r\n\r\n            // Creates and styles an individual swatch when updateSwatches is called.\r\n            function createSwatch() {\r\n                if (options.savedColors && options.savedColors[swatchNumber]) {\r\n                    let icon: string;\r\n                    if (editSwatchMode) {\r\n                        icon = \"b\";\r\n                    } else {\r\n                        icon = \"\";\r\n                    }\r\n                    const swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                    swatch.fontFamily = \"coreglyphs\";\r\n                    const swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\r\n                    const swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\r\n\r\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\r\n                    if (swatchLuminence > luminanceLimit) {\r\n                        swatch.color = iconColorDark;\r\n                    } else {\r\n                        swatch.color = iconColorLight;\r\n                    }\r\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\r\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    swatch.height = swatch.width = swatchSize.toString() + \"px\";\r\n                    swatch.background = options.savedColors[swatchNumber];\r\n                    swatch.thickness = 2;\r\n                    const metadata = swatchNumber;\r\n                    swatch.pointerDownAnimation = () => {\r\n                        swatch.thickness = 4;\r\n                    };\r\n                    swatch.pointerUpAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerEnterAnimation = () => {\r\n                        swatch.thickness = 3;\r\n                    };\r\n                    swatch.pointerOutAnimation = () => {\r\n                        swatch.thickness = 2;\r\n                    };\r\n                    swatch.onPointerClickObservable.add(() => {\r\n                        if (!editSwatchMode) {\r\n                            if (options.savedColors) {\r\n                                updateValues(Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\r\n                            }\r\n                        } else {\r\n                            deleteSwatch(metadata);\r\n                            updateSwatches(\"\", butSave);\r\n                        }\r\n                    });\r\n                    return swatch;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            // Mode switch to render button text and close symbols on swatch controls\r\n            function editSwatches(mode?: boolean) {\r\n                if (mode !== undefined) {\r\n                    editSwatchMode = mode;\r\n                }\r\n                let thisButton: Button;\r\n                if (editSwatchMode) {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"b\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Done\";\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < swatchDrawer.children.length; i++) {\r\n                        thisButton = swatchDrawer.children[i] as Button;\r\n                        thisButton.textBlock!.text = \"\";\r\n                    }\r\n                    if (butEdit !== undefined) {\r\n                        butEdit.textBlock!.text = \"Edit\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\r\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\r\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\r\n             * saved colors there are and how many can be stored per row.\r\n             * @param color\r\n             * @param button\r\n             */\r\n            function updateSwatches(color: string, button: Button) {\r\n                if (options.savedColors) {\r\n                    if (color != \"\") {\r\n                        options.savedColors.push(color);\r\n                    }\r\n                    swatchNumber = 0;\r\n                    swatchDrawer.clearControls();\r\n                    const rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\r\n                    let gutterCount: number;\r\n                    if (rowCount == 0) {\r\n                        gutterCount = 0;\r\n                    } else {\r\n                        gutterCount = rowCount + 1;\r\n                    }\r\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\r\n                        const currentRows: number = swatchDrawer.rowCount;\r\n                        for (let i = 0; i < currentRows; i++) {\r\n                            swatchDrawer.removeRowDefinition(0);\r\n                        }\r\n                        for (let i = 0; i < rowCount + gutterCount; i++) {\r\n                            if (i % 2) {\r\n                                swatchDrawer.addRowDefinition(swatchSize, true);\r\n                            } else {\r\n                                swatchDrawer.addRowDefinition(gutterSize, true);\r\n                            }\r\n                        }\r\n                    }\r\n                    swatchDrawer.height = (swatchSize * rowCount + gutterCount * gutterSize).toString() + \"px\";\r\n\r\n                    for (let y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\r\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                        let totalButtonsThisRow: number;\r\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\r\n                            totalButtonsThisRow = options.numSwatchesPerLine!;\r\n                        } else {\r\n                            totalButtonsThisRow = options.savedColors.length - (thisRow - 1) * options.numSwatchesPerLine!;\r\n                        }\r\n                        const buttonIterations: number = Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!);\r\n                        for (let x = 0, w = 1; x < buttonIterations; x++) {\r\n                            if (x > options.numSwatchesPerLine!) {\r\n                                continue;\r\n                            }\r\n                            const swatch: Button | null = createSwatch();\r\n                            if (swatch != null) {\r\n                                swatchDrawer.addControl(swatch, y, w);\r\n                                w += 2;\r\n                                swatchNumber++;\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (options.savedColors.length >= options.swatchLimit!) {\r\n                        disableButton(button, true);\r\n                    } else {\r\n                        disableButton(button, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Shows or hides edit swatches button depending on if there are saved swatches\r\n            function setEditButtonVisibility(enableButton: boolean) {\r\n                if (enableButton) {\r\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\r\n                    butEdit.width = buttonWidth;\r\n                    butEdit.height = buttonHeight;\r\n                    butEdit.left = Math.floor(parseInt(buttonWidth) * 0.1).toString() + \"px\";\r\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\r\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                    butEdit.thickness = 2;\r\n                    butEdit.color = buttonColor;\r\n                    butEdit.fontSize = buttonFontSize;\r\n                    butEdit.background = buttonBackgroundColor;\r\n                    butEdit.onPointerEnterObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    });\r\n                    butEdit.onPointerOutObservable.add(() => {\r\n                        butEdit.background = buttonBackgroundColor;\r\n                    });\r\n                    butEdit.pointerDownAnimation = () => {\r\n                        butEdit.background = buttonBackgroundClickColor;\r\n                    };\r\n                    butEdit.pointerUpAnimation = () => {\r\n                        butEdit.background = buttonBackgroundHoverColor;\r\n                    };\r\n                    butEdit.onPointerClickObservable.add(() => {\r\n                        if (editSwatchMode) {\r\n                            editSwatchMode = false;\r\n                        } else {\r\n                            editSwatchMode = true;\r\n                        }\r\n                        editSwatches();\r\n                    });\r\n                    pickerGrid.addControl(butEdit, 1, 0);\r\n                } else {\r\n                    pickerGrid.removeControl(butEdit);\r\n                }\r\n            }\r\n\r\n            // Called when the user hits the limit of saved colors in the drawer.\r\n            function disableButton(button: Button, disabled: boolean) {\r\n                if (disabled) {\r\n                    button.color = buttonDisabledColor;\r\n                    button.background = buttonDisabledBackgroundColor;\r\n                } else {\r\n                    button.color = buttonColor;\r\n                    button.background = buttonBackgroundColor;\r\n                }\r\n            }\r\n\r\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n            function closePicker(color: string) {\r\n                if (options.savedColors && options.savedColors.length > 0) {\r\n                    resolve({\r\n                        savedColors: options.savedColors,\r\n                        pickedColor: color,\r\n                    });\r\n                } else {\r\n                    resolve({\r\n                        pickedColor: color,\r\n                    });\r\n                }\r\n                advancedTexture.removeControl(dialogContainer);\r\n            }\r\n        });\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ColorPicker\", ColorPicker);\r\n", "import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        if (this._backgroundGradient || this._background) {\r\n            context.fillStyle = this._getBackgroundColor(context);\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: ICanvasRenderingContext) {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2,\r\n            this._currentMeasure.height / 2,\r\n            context\r\n        );\r\n\r\n        context.clip();\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._highlightLineWidth / 2,\r\n            this._currentMeasure.height / 2 - this._highlightLineWidth / 2,\r\n            context\r\n        );\r\n        context.stroke();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Ellipse\", Ellipse);\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Button } from \"./button\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class used to create a focusable button that can easily handle keyboard events\r\n * @since 5.0.0\r\n */\r\nexport class FocusableButton extends Button implements IFocusableControl {\r\n    /** Highlight color when button is focused */\r\n    public focusedColor: Nullable<string> = null;\r\n    private _isFocused = false;\r\n    private _unfocusedColor: Nullable<string> = null;\r\n\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<Button>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<Button>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._unfocusedColor = this.color;\r\n    }\r\n\r\n    /** @internal */\r\n    public onBlur(): void {\r\n        if (this._isFocused) {\r\n            this._isFocused = false;\r\n            if (this.focusedColor && this._unfocusedColor != null) {\r\n                // Set color back to saved unfocused color\r\n                this.color = this._unfocusedColor;\r\n            }\r\n            this.onBlurObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onFocus(): void {\r\n        this._isFocused = true;\r\n\r\n        if (this.focusedColor) {\r\n            // Save the unfocused color\r\n            this._unfocusedColor = this.color;\r\n            this.color = this.focusedColor;\r\n        }\r\n        this.onFocusObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Function to focus a button programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus a button programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!this.isReadOnly) {\r\n            // Clicking on button should focus\r\n            this.focus();\r\n        }\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    /** @internal */\r\n    public displose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.FocusableButton\", FocusableButton);\r\n", "export {};\n//# sourceMappingURL=focusableControl.js.map", "import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport type { IKeyboardEvent } from \"core/Events/deviceInputEvents\";\r\n\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputTextArea extends InputText {\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    private _lines: any[];\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    private _maxHeight = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n\r\n    private _clipTextTop: number;\r\n    private _clipTextLeft: number;\r\n\r\n    private _cursorInfo: { globalStartIndex: number; globalEndIndex: number; relativeStartIndex: number; relativeEndIndex: number; currentLineIndex: number };\r\n    private _highlightCursorInfo: { initialStartIndex: number; initialRelativeStartIndex: number; initialLineIndex: number };\r\n\r\n    /**\r\n     * An event triggered after the text was broken up into lines\r\n     */\r\n    public onLinesReadyObservable = new Observable<InputTextArea>();\r\n\r\n    /** @internal */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n    private _contextForBreakLines: ICanvasRenderingContext;\r\n    private _clickedCoordinateX: Nullable<number>;\r\n    private _clickedCoordinateY: Nullable<number>;\r\n\r\n    private _availableWidth: number;\r\n    private _availableHeight: number;\r\n\r\n    private _scrollTop: Nullable<number>;\r\n\r\n    private _autoStretchHeight: boolean;\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its height to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchHeight(): boolean {\r\n        return this._autoStretchHeight;\r\n    }\r\n\r\n    public set autoStretchHeight(value: boolean) {\r\n        if (this._autoStretchHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        this.fixedRatioMasterIsWidth = false;\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this._autoStretchHeight = false;\r\n    }\r\n\r\n    @serialize()\r\n    public get maxHeight(): string | number {\r\n        return this._maxHeight.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxHeightInPixels(): number {\r\n        return this._maxHeight.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set maxHeight(value: string | number) {\r\n        if (this._maxHeight.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxHeight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputTextArea\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n\r\n        this.isPointerBlocker = true;\r\n\r\n        this.onLinesReadyObservable.add(() => this._updateCursorPosition());\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: -1,\r\n            initialRelativeStartIndex: -1,\r\n            initialLineIndex: -1,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: 0,\r\n            relativeEndIndex: 0,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: 0,\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputTextArea\";\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.alternativeProcessKey(evt.code, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * Process the last keyboard input\r\n     *\r\n     * @param code The ascii input number\r\n     * @param key The key string representation\r\n     * @param evt The keyboard event emits with input\r\n     * @internal\r\n     */\r\n    public alternativeProcessKey(code: string, key?: string, evt?: IKeyboardEvent) {\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (code === \"KeyC\" || code === \"KeyV\" || code === \"KeyX\")) {\r\n            return;\r\n        }\r\n\r\n        // Specific cases\r\n        switch (code) {\r\n            case \"KeyA\": // A - select all\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._selectAllText();\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                break;\r\n            case \"Period\": //SLASH\r\n                if (evt && evt.shiftKey) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case \"Backspace\": // BACKSPACE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Delete\": // DELETE\r\n                if (!this._isTextHighlightOn && this._cursorInfo.globalEndIndex < this.text.length) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex + 1;\r\n                }\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                break;\r\n            case \"Enter\": // RETURN\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, \"\\n\");\r\n                this._cursorInfo.globalStartIndex++;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n\r\n                this._textHasChanged();\r\n                return;\r\n            case \"End\": // END\r\n                this._cursorInfo.globalStartIndex = this.text.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"Home\": // HOME\r\n                this._cursorInfo.globalStartIndex = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowLeft\": // LEFT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        // Go to line's start by substract the relativeStartIndex to the globalStartIndex\r\n                        this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalStartIndex--;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalEndIndex > this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalEndIndex--;\r\n                        } else {\r\n                            this._cursorInfo.globalStartIndex--;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    // ctr + <-\r\n                    this._cursorInfo.globalStartIndex -= this._cursorInfo.relativeStartIndex;\r\n                    evt.preventDefault();\r\n                } else if (this._cursorInfo.globalStartIndex > 0) {\r\n                    this._cursorInfo.globalStartIndex--;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowRight\": // RIGHT\r\n                this._markAsDirty();\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex - 1;\r\n                        this._cursorInfo.globalEndIndex += rightDelta;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                    // store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                        this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                        this._cursorInfo.globalEndIndex++;\r\n                        this._isTextHighlightOn = true;\r\n                    } else {\r\n                        if (this._cursorInfo.globalStartIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                            this._cursorInfo.globalStartIndex++;\r\n                        } else {\r\n                            this._cursorInfo.globalEndIndex++;\r\n                        }\r\n                    }\r\n                    this._blinkIsEven = true;\r\n                    evt.preventDefault();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex;\r\n                } else if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    //ctr + ->\r\n                    const rightDelta = this._lines[this._cursorInfo.currentLineIndex].text.length - this._cursorInfo.relativeEndIndex;\r\n                    this._cursorInfo.globalStartIndex += rightDelta;\r\n                } else if (this._cursorInfo.globalStartIndex < this.text.length) {\r\n                    this._cursorInfo.globalStartIndex++;\r\n                }\r\n\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case \"ArrowUp\": // UP\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === 0) {\r\n                    // First line\r\n                    this._cursorInfo.globalStartIndex = 0;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const upperLine = this._lines[this._cursorInfo.currentLineIndex - 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let upperWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex -= relativeIndex; // Start of current line\r\n                    tmpIndex -= upperLine.text.length + upperLine.lineEnding.length; // Start of upper line\r\n                    let upperLineRelativeIndex = 0;\r\n\r\n                    while (upperWidth < currentWidth && upperLineRelativeIndex < upperLine.text.length) {\r\n                        tmpIndex++;\r\n                        upperLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - upperWidth);\r\n                        upperWidth = this._contextForBreakLines.measureText(upperLine.text.substr(0, upperLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - upperWidth) > previousWidth && upperLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex <= this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                        this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n            case \"ArrowDown\": // DOWN\r\n                // update the cursor\r\n                this._blinkIsEven = false;\r\n\r\n                if (evt) {\r\n                    if (evt.shiftKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                            this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                            this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n                        }\r\n\r\n                        this._isTextHighlightOn = true;\r\n                        this._blinkIsEven = true;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                if (this._cursorInfo.currentLineIndex === this._lines.length - 1) {\r\n                    // Last line\r\n                    this._cursorInfo.globalStartIndex = this.text.length;\r\n                } else {\r\n                    const currentLine = this._lines[this._cursorInfo.currentLineIndex];\r\n                    const underLine = this._lines[this._cursorInfo.currentLineIndex + 1];\r\n\r\n                    let tmpIndex = 0;\r\n                    let relativeIndex = 0;\r\n                    if (!this._isTextHighlightOn || this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        tmpIndex = this._cursorInfo.globalStartIndex;\r\n                        relativeIndex = this._cursorInfo.relativeStartIndex;\r\n                    } else {\r\n                        tmpIndex = this._cursorInfo.globalEndIndex;\r\n                        relativeIndex = this._cursorInfo.relativeEndIndex;\r\n                    }\r\n\r\n                    const currentText = currentLine.text.substr(0, relativeIndex);\r\n                    const currentWidth = this._contextForBreakLines.measureText(currentText).width;\r\n\r\n                    let underWidth = 0;\r\n                    let previousWidth = 0;\r\n\r\n                    tmpIndex += currentLine.text.length - relativeIndex + currentLine.lineEnding.length; // Start of current line\r\n                    let underLineRelativeIndex = 0;\r\n\r\n                    while (underWidth < currentWidth && underLineRelativeIndex < underLine.text.length) {\r\n                        tmpIndex++;\r\n                        underLineRelativeIndex++;\r\n                        previousWidth = Math.abs(currentWidth - underWidth);\r\n                        underWidth = this._contextForBreakLines.measureText(underLine.text.substr(0, underLineRelativeIndex)).width;\r\n                    }\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(currentWidth - underWidth) > previousWidth && underLineRelativeIndex > 0) {\r\n                        tmpIndex--;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                    } else if (this._cursorInfo.currentLineIndex < this._highlightCursorInfo.initialLineIndex) {\r\n                        this._cursorInfo.globalStartIndex = tmpIndex;\r\n                        if (this._cursorInfo.globalStartIndex > this._cursorInfo.globalEndIndex) {\r\n                            this._cursorInfo.globalEndIndex += this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalStartIndex = this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex;\r\n                            this._cursorInfo.globalEndIndex -= this._cursorInfo.globalStartIndex;\r\n                        }\r\n                    } else {\r\n                        this._cursorInfo.globalEndIndex = tmpIndex;\r\n                        this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    }\r\n                }\r\n\r\n                this._markAsDirty();\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key?.length === 1) {\r\n            evt?.preventDefault();\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                this._isTextHighlightOn = false;\r\n                this._blinkIsEven = false;\r\n\r\n                this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, key);\r\n                this._cursorInfo.globalStartIndex += key.length;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n                this._textHasChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = \"\", width: number, context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string }[] {\r\n        const lines = [];\r\n        const words = line.split(\" \");\r\n        let lineWidth = 0;\r\n\r\n        for (let n = 0; n < words.length; n++) {\r\n            const testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            const metrics = context.measureText(testLine);\r\n            const testWidth = metrics.width;\r\n            if (testWidth > width) {\r\n                if (n > 0) {\r\n                    // Avoid first word duplication if of too long\r\n                    lineWidth = context.measureText(line).width;\r\n                    lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n                }\r\n\r\n                line = words[n];\r\n\r\n                let flushedLine = \"\";\r\n\r\n                line.split(\"\").map((char) => {\r\n                    if (context.measureText(flushedLine + char).width > width) {\r\n                        lines.push({ text: flushedLine, width: context.measureText(flushedLine).width, lineEnding: \"\\n\" });\r\n                        flushedLine = \"\";\r\n                    }\r\n                    flushedLine += char;\r\n                });\r\n\r\n                line = flushedLine;\r\n                // Measure remaining characters\r\n                lineWidth = context.measureText(line).width;\r\n            } else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth, lineEnding: \" \" });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: ICanvasRenderingContext): object[] {\r\n        const lines: { text: string; width: number; lineEnding: string }[] = [];\r\n        const _lines = this.text.split(\"\\n\");\r\n\r\n        if (this.clipContent) {\r\n            for (const _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (const _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        lines[lines.length - 1].lineEnding = \"\\n\";\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = \"\", context: ICanvasRenderingContext): { text: string; width: number; lineEnding: string } {\r\n        return { text: line, width: context.measureText(line).width, lineEnding: \" \" };\r\n    }\r\n\r\n    /**\r\n     * Processing of child right before the parent measurement update\r\n     *\r\n     * @param parentMeasure The parent measure\r\n     * @param context The rendering canvas\r\n     * @internal\r\n     */\r\n    protected _preMeasure(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper).text;\r\n\r\n        // placeholder conditions and color setting\r\n        if (!this._isFocused && !this.text && this._placeholderText) {\r\n            text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        // measures the textlength -> this.measure.width\r\n        this._textWidth = context.measureText(text).width;\r\n        // we double up the margin width\r\n        const marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n\r\n        if (this._autoStretchWidth) {\r\n            const tmpLines = text.split(\"\\n\");\r\n            const longerString = tmpLines.reduce((acc: string, val: string) => {\r\n                const valueLength = context.measureText(val).width;\r\n                const accLength = context.measureText(acc).width;\r\n                return valueLength > accLength ? val : acc;\r\n            }, \"\");\r\n\r\n            const longerStringWidth = context.measureText(longerString).width;\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), longerStringWidth + marginWidth) + \"px\";\r\n\r\n            this.autoStretchWidth = true;\r\n        }\r\n\r\n        this._availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._availableWidth, context);\r\n        // can we find a cleaner implementation here?\r\n        this._contextForBreakLines = context;\r\n\r\n        if (this._autoStretchHeight) {\r\n            const textHeight = this._lines.length * this._fontOffset.height;\r\n            const totalHeight = textHeight + this._margin.getValueInPixel(this._host, parentMeasure.height) * 2;\r\n            this.height = Math.min(this._maxHeight.getValueInPixel(this._host, parentMeasure.height), totalHeight) + \"px\";\r\n\r\n            this._autoStretchHeight = true;\r\n        }\r\n\r\n        this._availableHeight = this._height.getValueInPixel(this._host, parentMeasure.height) - marginWidth;\r\n\r\n        if (this._isFocused) {\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _computeScroll() {\r\n        this._clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n        this._clipTextTop = this._currentMeasure.top + this._margin.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n\r\n        if (this._isFocused && this._lines[this._cursorInfo.currentLineIndex].width > this._availableWidth) {\r\n            const textLeft = this._clipTextLeft - this._lines[this._cursorInfo.currentLineIndex].width + this._availableWidth;\r\n\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = this._clipTextLeft;\r\n        }\r\n\r\n        if (this._isFocused && !this._autoStretchHeight) {\r\n            const selectedHeight = (this._cursorInfo.currentLineIndex + 1) * this._fontOffset.height;\r\n            const textTop = this._clipTextTop - selectedHeight;\r\n\r\n            if (!this._scrollTop) {\r\n                this._scrollTop = textTop;\r\n            }\r\n        } else {\r\n            this._scrollTop = this._clipTextTop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processing of child after the parent measurement update\r\n     *\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(): void {\r\n        // Flush the highlighted text each frame\r\n        this.highlightedText = \"\";\r\n\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: ICanvasRenderingContext): void {\r\n        const width = this._currentMeasure.width;\r\n        let x = this._scrollLeft as number;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x += 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x += width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x += (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, x, y);\r\n    }\r\n\r\n    /**\r\n     * Copy the text in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n\r\n    /**\r\n     * Cut the text and copy it in the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    /**\r\n     * Paste the copied text from the clipboard\r\n     *\r\n     * @param ev The clipboard event\r\n     * @internal\r\n     */\r\n    protected _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n\r\n        this._isTextHighlightOn = false;\r\n\r\n        this._textWrapper.removePart(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex, data);\r\n\r\n        const deltaIndex = data.length - (this._cursorInfo.globalEndIndex - this._cursorInfo.globalStartIndex);\r\n\r\n        this._cursorInfo.globalStartIndex += deltaIndex;\r\n        this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        this._computeScroll();\r\n\r\n        this._scrollLeft = this._scrollLeft ?? 0;\r\n        this._scrollTop = this._scrollTop ?? 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // sets the color of the rectangle (border if background available)\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        const height = this._currentMeasure.height;\r\n        const width = this._currentMeasure.width;\r\n        let rootY = 0;\r\n\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.fillStyle = this.fontStyle;\r\n\r\n        // here we define the visible reactangle to clip it in next line\r\n        context.rect(this._clipTextLeft, this._clipTextTop, this._availableWidth + 2, this._availableHeight + 2);\r\n        context.clip();\r\n\r\n        // Text\r\n        rootY += this._scrollTop;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Render cursor\r\n            if (!this._blinkIsEven || this._isTextHighlightOn) {\r\n                let cursorLeft = this._scrollLeft + context.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, this._cursorInfo.relativeStartIndex)).width;\r\n\r\n                if (cursorLeft < this._clipTextLeft) {\r\n                    this._scrollLeft += this._clipTextLeft - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > this._clipTextLeft + this._availableWidth) {\r\n                    this._scrollLeft += this._clipTextLeft + this._availableWidth - cursorLeft;\r\n                    cursorLeft = this._clipTextLeft + this._availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                let cursorTop = this._scrollTop + this._cursorInfo.currentLineIndex * this._fontOffset.height; //cursorTop distance from top to cursor start\r\n\r\n                if (cursorTop < this._clipTextTop) {\r\n                    this._scrollTop += this._clipTextTop - cursorTop;\r\n                    cursorTop = this._clipTextTop;\r\n                    this._markAsDirty();\r\n                } else if (cursorTop + this._fontOffset.height > this._clipTextTop + this._availableHeight) {\r\n                    this._scrollTop += this._clipTextTop + this._availableHeight - cursorTop - this._fontOffset.height;\r\n                    cursorTop = this._clipTextTop + this._availableHeight - this._fontOffset.height;\r\n                    this._markAsDirty();\r\n                }\r\n\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, cursorTop, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            this._resetBlinking();\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n\r\n                this._highlightedText = this.text.substring(this._cursorInfo.globalStartIndex, this._cursorInfo.globalEndIndex);\r\n\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n\r\n                const startLineIndex = Math.min(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n                const endLineIndex = Math.max(this._cursorInfo.currentLineIndex, this._highlightCursorInfo.initialLineIndex);\r\n\r\n                let highlightRootY = this._scrollTop + startLineIndex * this._fontOffset.height;\r\n\r\n                for (let i = startLineIndex; i <= endLineIndex; i++) {\r\n                    const line = this._lines[i];\r\n\r\n                    let highlightRootX = this._scrollLeft as number;\r\n                    switch (this._textHorizontalAlignment) {\r\n                        case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                            highlightRootX += 0;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                            highlightRootX += width - line.width;\r\n                            break;\r\n                        case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                            highlightRootX += (width - line.width) / 2;\r\n                            break;\r\n                    }\r\n\r\n                    const begin = i === startLineIndex ? this._cursorInfo.relativeStartIndex : 0;\r\n                    const end = i === endLineIndex ? this._cursorInfo.relativeEndIndex : line.text.length;\r\n\r\n                    const leftOffsetWidth = context.measureText(line.text.substr(0, begin)).width;\r\n                    const selectedText = line.text.substring(begin, end);\r\n                    const hightlightWidth = context.measureText(selectedText).width;\r\n\r\n                    context.fillRect(highlightRootX + leftOffsetWidth, highlightRootY, hightlightWidth, this._fontOffset.height);\r\n\r\n                    highlightRootY += this._fontOffset.height;\r\n                }\r\n\r\n                if (this._cursorInfo.globalEndIndex === this._cursorInfo.globalStartIndex) {\r\n                    this._resetBlinking();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n    }\r\n\r\n    private _resetBlinking() {\r\n        clearTimeout(this._blinkTimeout);\r\n        this._blinkTimeout = <any>setTimeout(() => {\r\n            this._blinkIsEven = !this._blinkIsEven;\r\n            this._markAsDirty();\r\n        }, 500);\r\n    }\r\n\r\n    protected _applyStates(context: ICanvasRenderingContext): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinateX = coordinates.x;\r\n        this._clickedCoordinateY = coordinates.y;\r\n\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    // for textselection\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Avoid Chromium-like beahavior when this event is fired right after onPointerDown\r\n        if (pi.event.movementX === 0 && pi.event.movementY === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._host.focusedControl === this && this._isPointerDown) {\r\n            this._clickedCoordinateX = coordinates.x;\r\n            this._clickedCoordinateY = coordinates.y;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n                this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n                this._highlightCursorInfo.initialRelativeStartIndex = this._cursorInfo.relativeStartIndex;\r\n\r\n                this._isTextHighlightOn = true;\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    /**\r\n     * Apply the correct position of cursor according to current modification\r\n     */\r\n    private _updateCursorPosition() {\r\n        if (!this._isFocused) {\r\n            return;\r\n        }\r\n\r\n        if (this._clickedCoordinateX && this._clickedCoordinateY) {\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo = {\r\n                    globalStartIndex: 0,\r\n                    globalEndIndex: 0,\r\n                    relativeStartIndex: 0,\r\n                    relativeEndIndex: 0,\r\n                    currentLineIndex: 0,\r\n                };\r\n            }\r\n\r\n            let globalIndex = 0;\r\n            let relativeIndex = 0;\r\n\r\n            const lastClickedCoordinateY = this._clickedCoordinateY - (this._scrollTop as number);\r\n\r\n            const relativeCoordinateY = Math.floor(lastClickedCoordinateY / this._fontOffset.height);\r\n            this._cursorInfo.currentLineIndex = Math.min(Math.max(relativeCoordinateY, 0), this._lines.length - 1);\r\n\r\n            let currentSize = 0;\r\n\r\n            const relativeXPosition = this._clickedCoordinateX - (this._scrollLeft ?? 0);\r\n\r\n            let previousDist = 0;\r\n\r\n            for (let index = 0; index < this._cursorInfo.currentLineIndex; index++) {\r\n                const line = this._lines[index];\r\n                globalIndex += line.text.length + line.lineEnding.length;\r\n            }\r\n\r\n            while (currentSize < relativeXPosition && this._lines[this._cursorInfo.currentLineIndex].text.length > relativeIndex) {\r\n                relativeIndex++;\r\n                previousDist = Math.abs(relativeXPosition - currentSize);\r\n                currentSize = this._contextForBreakLines.measureText(this._lines[this._cursorInfo.currentLineIndex].text.substr(0, relativeIndex)).width;\r\n            }\r\n\r\n            // Find closest move\r\n            if (Math.abs(relativeXPosition - currentSize) > previousDist && relativeIndex > 0) {\r\n                relativeIndex--;\r\n            }\r\n\r\n            globalIndex += relativeIndex;\r\n\r\n            if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.globalStartIndex = globalIndex;\r\n                this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n            } else {\r\n                if (globalIndex < this._highlightCursorInfo.initialStartIndex) {\r\n                    this._cursorInfo.globalStartIndex = globalIndex;\r\n                    this._cursorInfo.relativeStartIndex = relativeIndex;\r\n                    this._cursorInfo.globalEndIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeEndIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                } else {\r\n                    this._cursorInfo.globalStartIndex = this._highlightCursorInfo.initialStartIndex;\r\n                    this._cursorInfo.relativeStartIndex = this._highlightCursorInfo.initialRelativeStartIndex;\r\n                    this._cursorInfo.globalEndIndex = globalIndex;\r\n                    this._cursorInfo.relativeEndIndex = relativeIndex;\r\n                }\r\n            }\r\n\r\n            // Avoid the caret during highlighting\r\n            this._blinkIsEven = this._isTextHighlightOn;\r\n            this._clickedCoordinateX = null;\r\n            this._clickedCoordinateY = null;\r\n        } else {\r\n            // Standard behavior same as Current line is at least above the initial highlight index\r\n            this._cursorInfo.relativeStartIndex = 0;\r\n            this._cursorInfo.currentLineIndex = 0;\r\n\r\n            let lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n            let tmpLength = 0;\r\n\r\n            while (tmpLength + lineLength <= this._cursorInfo.globalStartIndex) {\r\n                tmpLength += lineLength;\r\n\r\n                if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                    this._cursorInfo.currentLineIndex++;\r\n                    lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                }\r\n            }\r\n\r\n            this._cursorInfo.relativeStartIndex = this._cursorInfo.globalStartIndex - tmpLength;\r\n\r\n            if (this._highlightCursorInfo.initialStartIndex !== -1 && this._cursorInfo.globalStartIndex >= this._highlightCursorInfo.initialStartIndex) {\r\n                // Current line is at least below the initial highlight index\r\n                while (tmpLength + lineLength <= this._cursorInfo.globalEndIndex) {\r\n                    tmpLength += lineLength;\r\n\r\n                    if (this._cursorInfo.currentLineIndex < this._lines.length - 1) {\r\n                        this._cursorInfo.currentLineIndex++;\r\n                        lineLength = this._lines[this._cursorInfo.currentLineIndex].text.length + this._lines[this._cursorInfo.currentLineIndex].lineEnding.length;\r\n                    }\r\n                }\r\n\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.globalEndIndex - tmpLength;\r\n            } else if (!this._isTextHighlightOn) {\r\n                this._cursorInfo.relativeEndIndex = this._cursorInfo.relativeStartIndex;\r\n                this._cursorInfo.globalEndIndex = this._cursorInfo.globalStartIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update all values of cursor information based on cursorIndex value\r\n     *\r\n     * @param offset The index to take care of\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _updateValueFromCursorIndex(offset: number) {\r\n        // Override to avoid parent behavior during _onPointerMove\r\n    }\r\n\r\n    /**\r\n     * Select the word immediatly under the cursor on double click\r\n     *\r\n     * @param _evt Pointer informations of double click\r\n     * @internal\r\n     */\r\n    protected _processDblClick(_evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveLeft = this._cursorInfo.globalStartIndex > 0 && this._textWrapper.isWord(this._cursorInfo.globalStartIndex - 1) ? --this._cursorInfo.globalStartIndex : 0;\r\n            moveRight =\r\n                this._cursorInfo.globalEndIndex < this._textWrapper.length && this._textWrapper.isWord(this._cursorInfo.globalEndIndex) ? ++this._cursorInfo.globalEndIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._highlightCursorInfo.initialLineIndex = this._cursorInfo.currentLineIndex;\r\n        this._highlightCursorInfo.initialStartIndex = this._cursorInfo.globalStartIndex;\r\n\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    protected _selectAllText() {\r\n        this._isTextHighlightOn = true;\r\n        this._blinkIsEven = true;\r\n\r\n        this._highlightCursorInfo = {\r\n            initialStartIndex: 0,\r\n            initialRelativeStartIndex: 0,\r\n            initialLineIndex: 0,\r\n        };\r\n\r\n        this._cursorInfo = {\r\n            globalStartIndex: 0,\r\n            globalEndIndex: this._textWrapper.length,\r\n            relativeEndIndex: this._lines[this._lines.length - 1].text.length,\r\n            relativeStartIndex: 0,\r\n            currentLineIndex: this._lines.length - 1,\r\n        };\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public dipose() {\r\n        super.dispose();\r\n\r\n        this.onLinesReadyObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputTextArea\", InputTextArea);\r\n", "import { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _getTypeName(): string {\r\n        return \"InputPassword\";\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        const pwdTextWrapper = new TextWrapper();\r\n        let txt = \"\";\r\n        for (let i = 0; i < textWrapper.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        pwdTextWrapper.text = txt;\r\n        return pwdTextWrapper;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputPassword\", InputPassword);\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { Measure } from \"../measure\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    /** @internal */\r\n    public _x1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y1 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _x2 = new ValueAndUnit(0);\r\n    /** @internal */\r\n    public _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    @serialize()\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    @serialize()\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    @serialize()\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    @serialize()\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    @serialize()\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this._getColor(context);\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._cachedParentMeasure.left + this._x1.getValue(this._host), this._cachedParentMeasure.top + this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._cachedParentMeasure.left + this._effectiveX2, this._cachedParentMeasure.top + this._effectiveY2);\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure): void {\r\n        this._currentMeasure.left = parentMeasure.left + Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = parentMeasure.top + Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        const globalViewport = this._host._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, Matrix.IdentityReadOnly, scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        const x: string = projectedPosition.x + this._linkOffsetX.getValue(this._host) + \"px\";\r\n        const y: string = projectedPosition.y + this._linkOffsetY.getValue(this._host) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Line\", Line);\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport type { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport type { Control } from \"./controls/control\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @internal */\r\n    public _point: Vector3;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector with Z component\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector3 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector3 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPositionWithZ(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        } else if (this._control != null) {\r\n            return new Vector3(this._control.centerX, this._control.centerY, 1 - Epsilon);\r\n        } else {\r\n            const host: any = this._multiLine._host as any;\r\n\r\n            const xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            const yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector3(xValue, yValue, 1 - Epsilon);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this._automaticSize = true;\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    @serialize()\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    };\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordinates) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number; y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordinates) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: AbstractMesh | Control | { x: string | number; y: string | number }): MultiLinePoint {\r\n        const point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) {\r\n            return point;\r\n        }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        } else if (item instanceof Control) {\r\n            point.control = item;\r\n        } else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        let index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        const point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) {\r\n                point.resetLinks();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        let first: boolean = true; //first index is not necessarily 0\r\n        let previousPoint: Vector3;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            } else {\r\n                if (point._point.z < 1 && previousPoint.z < 1) {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                } else {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n                }\r\n            }\r\n            previousPoint = point._point;\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) {\r\n                this._minX = point._point.x;\r\n            }\r\n            if (this._minY == null || point._point.y < this._minY) {\r\n                this._minY = point._point.y;\r\n            }\r\n            if (this._maxX == null || point._point.x > this._maxX) {\r\n                this._maxX = point._point.x;\r\n            }\r\n            if (this._maxY == null || point._point.y > this._maxY) {\r\n                this._maxY = point._point.y;\r\n            }\r\n        });\r\n\r\n        if (this._minX == null) {\r\n            this._minX = 0;\r\n        }\r\n        if (this._minY == null) {\r\n            this._minY = 0;\r\n        }\r\n        if (this._maxX == null) {\r\n            this._maxX = 0;\r\n        }\r\n        if (this._maxY == null) {\r\n            this._maxY = 0;\r\n        }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.MultiLine\", MultiLine);\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    @serialize()\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    @serialize()\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    @serialize()\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                const childRadio = <RadioButton>control;\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        const actualWidth = this._currentMeasure.width - this._thickness;\r\n        const actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(\r\n            this._currentMeasure.left + this._currentMeasure.width / 2,\r\n            this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2,\r\n            this._currentMeasure.height / 2 - this._thickness / 2,\r\n            context\r\n        );\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            const offsetWidth = actualWidth * this._checkSizeRatio;\r\n            const offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(\r\n                this._currentMeasure.left + this._currentMeasure.width / 2,\r\n                this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2,\r\n                offseHeight / 2 - this._thickness / 2,\r\n                context\r\n            );\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        const radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        const header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadioButton\", RadioButton);\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n    private _step = 0;\r\n\r\n    private _lastPointerDownId = -1;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the slider value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a step to apply to values (0 by default) */\r\n    @serialize()\r\n    public get step(): number {\r\n        return this._step;\r\n    }\r\n\r\n    public set step(value: number) {\r\n        if (this._step === value) {\r\n            return;\r\n        }\r\n\r\n        this._step = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    @serialize()\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    @serialize()\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    @serialize()\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    @serialize()\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    @serialize()\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    @serialize()\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    @serialize()\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        let thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                } else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if (this.isVertical && this._currentMeasure.height < this._currentMeasure.width) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        } else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= this._effectiveBarOffset * 2;\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n        } else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += this._effectiveThumbThickness / 2;\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        let value: number;\r\n        if (this._isVertical) {\r\n            value = this._minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this._maximum - this._minimum);\r\n        } else {\r\n            value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n        this.value = this._step ? Math.round(value / this._step) * this._step : value;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._lastPointerDownId = pointerId;\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        // Only listen to pointer move events coming from the last pointer to click on the element (To support dual vr controller interaction)\r\n        if (pointerId != this._lastPointerDownId) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerIsDown && !this.isReadOnly) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    public _onCanvasBlur(): void {\r\n        this._forcePointerUp();\r\n        super._onCanvasBlur();\r\n    }\r\n}\r\n", "import { BaseSlider } from \"./baseSlider\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbColor = \"\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    @serialize()\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets thumb's color */\r\n    @serialize()\r\n    public get thumbColor(): string {\r\n        return this._thumbColor;\r\n    }\r\n\r\n    public set thumbColor(value: string) {\r\n        if (this._thumbColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    @serialize()\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        let left = this._renderLeft;\r\n        let top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        let radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += this._effectiveThumbThickness / 2;\r\n            } else {\r\n                left += this._effectiveThumbThickness / 2;\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        } else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        } else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                } else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            } else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    } else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    } else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                } else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        context.fillStyle = this._thumbColor || this._getColor(context);\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                } else {\r\n                    context.arc(left + thumbPosition, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            } else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n\r\n        if (serializedObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializedObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializedObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Slider\", Slider);\r\n", "import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string\r\n    ) {\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        const groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n     * @param selectorNb the position of the selector within the group\r\n     */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n */\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addCheckbox(text: string, func = (s: boolean) => {}, checked: boolean = false): void {\r\n        checked = checked || false;\r\n        const button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            func(state);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n */\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addRadio(label: string, func = (n: number) => {}, checked = false): void {\r\n        const nb = this._selectNb++;\r\n        const button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function (state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n */\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(\r\n        label: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        func = (v: number) => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onValueChange = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        const button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function (value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        const _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text =\r\n            label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/selector\r\n */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n     * Creates a new SelectionPanel\r\n     * @param name of SelectionPanel\r\n     * @param groups is an array of SelectionGroups\r\n     */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []\r\n    ) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (let i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets the (stack) panel of the SelectionPanel  */\r\n    public get panel(): StackPanel {\r\n        return this._panel;\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (let i = 0; i < this._groups.length; i++) {\r\n            for (let j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (let i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        const separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        const bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (let j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {}, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(\r\n        groupNb: number,\r\n        label: string,\r\n        func = () => {},\r\n        unit: string = \"Units\",\r\n        min: number = 0,\r\n        max: number = 0,\r\n        value: number = 0,\r\n        onVal = (v: number) => {\r\n            return v | 0;\r\n        }\r\n    ): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        const group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n}\r\n", "import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @internal\r\n */\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    private _freezeControls = false;\r\n    private _parentMeasure: Measure;\r\n    private _oldLeft: number | null;\r\n    private _oldTop: number | null;\r\n\r\n    public get freezeControls(): boolean {\r\n        return this._freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        if (this._freezeControls === value) {\r\n            return;\r\n        }\r\n\r\n        if (!value) {\r\n            this._restoreMeasures();\r\n        }\r\n\r\n        // trigger a full normal layout calculation to be sure all children have their measures up to date\r\n        this._freezeControls = false;\r\n\r\n        const textureSize = this.host.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.host.getContext();\r\n\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n\r\n        this.host._numLayoutCalls = 0;\r\n\r\n        this.host._rootContainer._layout(measure, context);\r\n\r\n        // in freeze mode, prepare children measures accordingly\r\n        if (value) {\r\n            this._updateMeasures();\r\n            if (this._useBuckets()) {\r\n                this._makeBuckets();\r\n            }\r\n        }\r\n\r\n        this._freezeControls = value;\r\n\r\n        this.host.markAsDirty(); // redraw with the (new) current settings\r\n    }\r\n\r\n    private _bucketWidth: number = 0;\r\n    private _bucketHeight: number = 0;\r\n    private _buckets: { [key: number]: Array<Control> } = {};\r\n    private _bucketLen: number;\r\n\r\n    public get bucketWidth(): number {\r\n        return this._bucketWidth;\r\n    }\r\n\r\n    public get bucketHeight(): number {\r\n        return this._bucketHeight;\r\n    }\r\n\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._bucketWidth = width;\r\n        this._bucketHeight = height;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._freezeControls) {\r\n                this._makeBuckets();\r\n            }\r\n        } else {\r\n            this._buckets = {};\r\n        }\r\n    }\r\n\r\n    private _useBuckets(): boolean {\r\n        return this._bucketWidth > 0 && this._bucketHeight > 0;\r\n    }\r\n\r\n    private _makeBuckets(): void {\r\n        this._buckets = {};\r\n        this._bucketLen = Math.ceil(this.widthInPixels / this._bucketWidth);\r\n        this._dispatchInBuckets(this._children);\r\n        this._oldLeft = null;\r\n        this._oldTop = null;\r\n    }\r\n\r\n    private _dispatchInBuckets(children: Control[]): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            const bStartX = Math.max(0, Math.floor((child._customData._origLeft - this._customData.origLeft) / this._bucketWidth)),\r\n                bEndX = Math.floor((child._customData._origLeft - this._customData.origLeft + child._currentMeasure.width - 1) / this._bucketWidth),\r\n                bEndY = Math.floor((child._customData._origTop - this._customData.origTop + child._currentMeasure.height - 1) / this._bucketHeight);\r\n            let bStartY = Math.max(0, Math.floor((child._customData._origTop - this._customData.origTop) / this._bucketHeight));\r\n\r\n            while (bStartY <= bEndY) {\r\n                for (let x = bStartX; x <= bEndX; ++x) {\r\n                    const bucket = bStartY * this._bucketLen + x;\r\n                    let lstc = this._buckets[bucket];\r\n\r\n                    if (!lstc) {\r\n                        lstc = [];\r\n                        this._buckets[bucket] = lstc;\r\n                    }\r\n\r\n                    lstc.push(child);\r\n                }\r\n                bStartY++;\r\n            }\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._dispatchInBuckets(child._children);\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset left and top measures for the window and all its children\r\n    private _updateMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left -= left;\r\n        this._measureForChildren.top -= top;\r\n        this._currentMeasure.left -= left;\r\n        this._currentMeasure.top -= top;\r\n\r\n        this._customData.origLeftForChildren = this._measureForChildren.left;\r\n        this._customData.origTopForChildren = this._measureForChildren.top;\r\n        this._customData.origLeft = this._currentMeasure.left;\r\n        this._customData.origTop = this._currentMeasure.top;\r\n\r\n        this._updateChildrenMeasures(this._children, left, top);\r\n    }\r\n\r\n    private _updateChildrenMeasures(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left -= left;\r\n            child._currentMeasure.top -= top;\r\n\r\n            child._customData._origLeft = child._currentMeasure.left; // save the original left and top values for each child\r\n            child._customData._origTop = child._currentMeasure.top;\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._updateChildrenMeasures(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _restoreMeasures(): void {\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        this._measureForChildren.left = this._customData.origLeftForChildren + left;\r\n        this._measureForChildren.top = this._customData.origTopForChildren + top;\r\n        this._currentMeasure.left = this._customData.origLeft + left;\r\n        this._currentMeasure.top = this._customData.origTop + top;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewerWindow\r\n     * @param name of ScrollViewerWindow\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._parentMeasure = parentMeasure;\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _layout(parentMeasure: Measure, context: ICanvasRenderingContext): boolean {\r\n        if (this._freezeControls) {\r\n            this.invalidateRect(); // will trigger a redraw of the window\r\n            return false;\r\n        }\r\n\r\n        return super._layout(parentMeasure, context);\r\n    }\r\n\r\n    private _scrollChildren(children: Control[], left: number, top: number): void {\r\n        for (let i = 0; i < children.length; ++i) {\r\n            const child = children[i];\r\n\r\n            child._currentMeasure.left = child._customData._origLeft + left;\r\n            child._currentMeasure.top = child._customData._origTop + top;\r\n            child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n\r\n            if (child instanceof Container && child._children.length > 0) {\r\n                this._scrollChildren(child._children, left, top);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _scrollChildrenWithBuckets(left: number, top: number, scrollLeft: number, scrollTop: number): void {\r\n        const bStartX = Math.max(0, Math.floor(-left / this._bucketWidth)),\r\n            bEndX = Math.floor((-left + this._parentMeasure.width - 1) / this._bucketWidth),\r\n            bEndY = Math.floor((-top + this._parentMeasure.height - 1) / this._bucketHeight);\r\n        let bStartY = Math.max(0, Math.floor(-top / this._bucketHeight));\r\n\r\n        while (bStartY <= bEndY) {\r\n            for (let x = bStartX; x <= bEndX; ++x) {\r\n                const bucket = bStartY * this._bucketLen + x,\r\n                    lstc = this._buckets[bucket];\r\n\r\n                if (lstc) {\r\n                    for (let i = 0; i < lstc.length; ++i) {\r\n                        const child = lstc[i];\r\n                        child._currentMeasure.left = child._customData._origLeft + scrollLeft;\r\n                        child._currentMeasure.top = child._customData._origTop + scrollTop;\r\n                        child._isClipped = false; // clipping will be handled by _draw and the call to _intersectsRect()\r\n                    }\r\n                }\r\n            }\r\n            bStartY++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(context: ICanvasRenderingContext, invalidatedRectangle?: Measure): void {\r\n        if (!this._freezeControls) {\r\n            super._draw(context, invalidatedRectangle);\r\n            return;\r\n        }\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        const left = this.leftInPixels | 0,\r\n            top = this.topInPixels | 0;\r\n\r\n        if (this._useBuckets()) {\r\n            if (this._oldLeft !== null && this._oldTop !== null) {\r\n                this._scrollChildrenWithBuckets(this._oldLeft, this._oldTop, left, top);\r\n                this._scrollChildrenWithBuckets(left, top, left, top);\r\n            } else {\r\n                this._scrollChildren(this._children, left, top);\r\n            }\r\n        } else {\r\n            this._scrollChildren(this._children, left, top);\r\n        }\r\n\r\n        this._oldLeft = left;\r\n        this._oldTop = top;\r\n\r\n        for (const child of this._children) {\r\n            if (!child._intersectsRect(this._parentMeasure)) {\r\n                continue;\r\n            }\r\n            child._render(context, this._parentMeasure);\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        if (this._freezeControls) {\r\n            super._postMeasure();\r\n            return;\r\n        }\r\n\r\n        let maxWidth = this.parentClientWidth;\r\n        let maxHeight = this.parentClientHeight;\r\n        for (const child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width + child.paddingRightInPixels);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height + child.paddingBottomInPixels);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}\r\n", "import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseGradient } from \"../gradient/BaseGradient\";\r\nimport type { AdvancedDynamicTexture } from \"gui/2D/advancedDynamicTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n    private _backgroundGradient: Nullable<BaseGradient> = null;\r\n\r\n    /** Gets or sets border color */\r\n    @serialize()\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background gradient. Takes precedence over gradient. */\r\n    public get backgroundGradient(): Nullable<BaseGradient> {\r\n        return this._backgroundGradient;\r\n    }\r\n\r\n    public set backgroundGradient(value: Nullable<BaseGradient>) {\r\n        if (this._backgroundGradient === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundGradient = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    private _getBackgroundColor(context: ICanvasRenderingContext) {\r\n        return this._backgroundGradient ? this._backgroundGradient.getCanvasGradient(context) : this._background;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._getBackgroundColor(context);\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this._getColor(context);\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.left = left - this._effectiveBarOffset;\r\n            this._tempMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._tempMeasure.width = this._currentMeasure.width;\r\n            this._tempMeasure.height = this._effectiveThumbThickness;\r\n        } else {\r\n            this._tempMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._tempMeasure.top = this._currentMeasure.top;\r\n            this._tempMeasure.width = this._effectiveThumbThickness;\r\n            this._tempMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._tempMeasure.left, this._tempMeasure.top, this._tempMeasure.width, this._tempMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n\r\n        if (this.backgroundGradient) {\r\n            serializationObject.backgroundGradient = {};\r\n            this.backgroundGradient.serialize(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n\r\n    public _parseFromContent(serializationObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializationObject, host);\r\n\r\n        if (serializationObject.backgroundGradient) {\r\n            const className = Tools.Instantiate(\"BABYLON.GUI.\" + serializationObject.backgroundGradient.className);\r\n            this.backgroundGradient = new className();\r\n            this.backgroundGradient!.parse(serializationObject.backgroundGradient);\r\n        }\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.Scrollbar\", ScrollBar);\r\n", "import type { Vector2 } from \"core/Maths/math.vector\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\nimport type { Control } from \"../control\";\r\nimport type { Image } from \"../image\";\r\nimport { Measure } from \"../../measure\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ImageScrollBar extends BaseSlider {\r\n    private _backgroundBaseImage: Image;\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _thumbBaseImage: Image;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n    private _invertScrollDirection = false;\r\n\r\n    /** Number of 90° rotation to apply on the images when in vertical mode */\r\n    @serialize()\r\n    public num90RotationInVerticalMode = 1;\r\n\r\n    /** Inverts the scrolling direction (default: false) */\r\n    @serialize()\r\n    public get invertScrollDirection() {\r\n        return this._invertScrollDirection;\r\n    }\r\n\r\n    public set invertScrollDirection(invert: boolean) {\r\n        this._invertScrollDirection = invert;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background for horizontal bar\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundBaseImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                    this._backgroundImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._backgroundImage = value._rotate90(this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._backgroundImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbBaseImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbBaseImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbBaseImage = value;\r\n\r\n        if (this.isVertical && this.num90RotationInVerticalMode !== 0) {\r\n            if (!value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    const rotatedValue = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                    this._thumbImage = rotatedValue;\r\n                    if (!rotatedValue.isLoaded) {\r\n                        rotatedValue.onImageLoadedObservable.addOnce(() => {\r\n                            this._markAsDirty();\r\n                        });\r\n                    }\r\n                    this._markAsDirty();\r\n                });\r\n            } else {\r\n                this._thumbImage = value._rotate90(-this.num90RotationInVerticalMode, true);\r\n                this._markAsDirty();\r\n            }\r\n        } else {\r\n            this._thumbImage = value;\r\n            if (value && !value.isLoaded) {\r\n                value.onImageLoadedObservable.addOnce(() => {\r\n                    this._markAsDirty();\r\n                });\r\n            }\r\n\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the length of the thumb\r\n     */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbLength = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the thumb\r\n     */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height of the bar image\r\n     */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImageHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageScrollBar\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageScrollBar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        let thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        } else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left + width * (1 - this._barImageHeight) * 0.5, this._currentMeasure.top, width * this._barImageHeight, height);\r\n                this._tempMeasure.height += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left, top + height * (1 - this._barImageHeight) * 0.5, width, height * this._barImageHeight);\r\n                this._tempMeasure.width += this._effectiveThumbThickness;\r\n                this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            }\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._tempMeasure.copyFromFloats(\r\n                left - this._effectiveBarOffset + this._currentMeasure.width * (1 - this._thumbHeight) * 0.5,\r\n                this._currentMeasure.top + thumbPosition,\r\n                this._currentMeasure.width * this._thumbHeight,\r\n                this._effectiveThumbThickness\r\n            );\r\n        } else {\r\n            this._tempMeasure.copyFromFloats(\r\n                this._currentMeasure.left + thumbPosition,\r\n                this._currentMeasure.top + this._currentMeasure.height * (1 - this._thumbHeight) * 0.5,\r\n                this._effectiveThumbThickness,\r\n                this._currentMeasure.height * this._thumbHeight\r\n            );\r\n        }\r\n\r\n        if (this._thumbImage) {\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        const sign = this._invertScrollDirection ? -1 : 1;\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (\r\n                x < this._tempMeasure.left ||\r\n                x > this._tempMeasure.left + this._tempMeasure.width ||\r\n                y < this._tempMeasure.top ||\r\n                y > this._tempMeasure.top + this._tempMeasure.height\r\n            ) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - (y - this._currentMeasure.top) / this._currentMeasure.height) * (this.maximum - this.minimum);\r\n                } else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        } else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += sign * delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi);\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math\";\r\nimport { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport type { Image } from \"../image\";\r\nimport { Control } from \"../control\";\r\nimport type { Container } from \"../container\";\r\nimport type { Measure } from \"../../measure\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\nimport { ImageScrollBar } from \"../sliders/imageScrollBar\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n */\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar | ImageScrollBar;\r\n    private _verticalBar: ScrollBar | ImageScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barImage: Image;\r\n    private _horizontalBarImage: Image;\r\n    private _verticalBarImage: Image;\r\n    private _barBackgroundImage: Image;\r\n    private _horizontalBarBackgroundImage: Image;\r\n    private _verticalBarBackgroundImage: Image;\r\n    private _barSize: number = 20;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onWheelObserver: Nullable<Observer<Vector2>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n    private _useImageBar: Boolean;\r\n    private _thumbLength: number = 0.5;\r\n    private _thumbHeight: number = 1;\r\n    private _barImageHeight: number = 1;\r\n    private _horizontalBarImageHeight: number = 1;\r\n    private _verticalBarImageHeight: number = 1;\r\n    private _oldWindowContentsWidth: number = 0;\r\n    private _oldWindowContentsHeight: number = 0;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar | ImageScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar | ImageScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (const child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Freezes or unfreezes the controls in the window.\r\n     * When controls are frozen, the scroll viewer can render a lot more quickly but updates to positions/sizes of controls\r\n     * are not taken into account. If you want to change positions/sizes, unfreeze, perform the changes then freeze again\r\n     */\r\n    public get freezeControls(): boolean {\r\n        return this._window.freezeControls;\r\n    }\r\n\r\n    public set freezeControls(value: boolean) {\r\n        this._window.freezeControls = value;\r\n    }\r\n\r\n    /** Gets the bucket width */\r\n    public get bucketWidth(): number {\r\n        return this._window.bucketWidth;\r\n    }\r\n\r\n    /** Gets the bucket height */\r\n    public get bucketHeight(): number {\r\n        return this._window.bucketHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets the bucket sizes.\r\n     * When freezeControls is true, setting a non-zero bucket size will improve performances by updating only\r\n     * controls that are visible. The bucket sizes is used to subdivide (internally) the window area to smaller areas into which\r\n     * controls are dispatched. So, the size should be roughly equals to the mean size of all the controls of\r\n     * the window. To disable the usage of buckets, sets either width or height (or both) to 0.\r\n     * Please note that using this option will raise the memory usage (the higher the bucket sizes, the less memory\r\n     * used), that's why it is not enabled by default.\r\n     * @param width width of the bucket\r\n     * @param height height of the bucket\r\n     */\r\n    public setBucketSizes(width: number, height: number): void {\r\n        this._window.setBucketSizes(width, height);\r\n    }\r\n\r\n    private _forceHorizontalBar: boolean = false;\r\n    private _forceVerticalBar: boolean = false;\r\n\r\n    /**\r\n     * Forces the horizontal scroll bar to be displayed\r\n     */\r\n    public get forceHorizontalBar(): boolean {\r\n        return this._forceHorizontalBar;\r\n    }\r\n\r\n    public set forceHorizontalBar(value: boolean) {\r\n        this._grid.setRowDefinition(1, value ? this._barSize : 0, true);\r\n        this._horizontalBar.isVisible = value;\r\n        this._forceHorizontalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Forces the vertical scroll bar to be displayed\r\n     */\r\n    public get forceVerticalBar(): boolean {\r\n        return this._forceVerticalBar;\r\n    }\r\n\r\n    public set forceVerticalBar(value: boolean) {\r\n        this._grid.setColumnDefinition(1, value ? this._barSize : 0, true);\r\n        this._verticalBar.isVisible = value;\r\n        this._forceVerticalBar = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ScrollViewer\r\n     * @param name of ScrollViewer\r\n     * @param isImageBased\r\n     */\r\n    constructor(name?: string, isImageBased?: boolean) {\r\n        super(name);\r\n\r\n        this._useImageBar = isImageBased ? isImageBased : false;\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        if (this._useImageBar) {\r\n            this._horizontalBar = new ImageScrollBar();\r\n            this._verticalBar = new ImageScrollBar();\r\n        } else {\r\n            this._horizontalBar = new ScrollBar();\r\n            this._verticalBar = new ScrollBar();\r\n        }\r\n\r\n        this._window = new _ScrollViewerWindow(\"scrollViewer_window\");\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._addBar(this._verticalBar, this._verticalBarSpace, true, Math.PI);\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._addBar(this._horizontalBar, this._horizontalBarSpace, false, 0);\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        if (!this._useImageBar) {\r\n            this.barColor = \"grey\";\r\n            this.barBackground = \"transparent\";\r\n        }\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible || this.forceVerticalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible || this.forceHorizontalBar ? this._barSize * ratio : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: ICanvasRenderingContext): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n\r\n        this._setWindowPosition(false);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    @serialize()\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the scroll bar container background color */\r\n    @serialize()\r\n    public get scrollBackground(): string {\r\n        return this._horizontalBarSpace.background;\r\n    }\r\n\r\n    public set scrollBackground(color: string) {\r\n        if (this._horizontalBarSpace.background === color) {\r\n            return;\r\n        }\r\n        this._horizontalBarSpace.background = color;\r\n        this._verticalBarSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    @serialize()\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the bar image */\r\n    public get thumbImage(): Image {\r\n        return this._barImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._barImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._barImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbImage = value;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar image */\r\n    public get horizontalThumbImage(): Image {\r\n        return this._horizontalBarImage;\r\n    }\r\n\r\n    public set horizontalThumbImage(value: Image) {\r\n        if (this._horizontalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalBarImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar image */\r\n    public get verticalThumbImage(): Image {\r\n        return this._verticalBarImage;\r\n    }\r\n\r\n    public set verticalThumbImage(value: Image) {\r\n        if (this._verticalBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalBarImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.thumbImage = value;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    @serialize()\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the length of the thumb */\r\n    public get thumbLength(): number {\r\n        return this._thumbLength;\r\n    }\r\n\r\n    public set thumbLength(value: number) {\r\n        if (this._thumbLength === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbLength = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbLength = value;\r\n        vb.thumbLength = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the thumb */\r\n    public get thumbHeight(): number {\r\n        return this._thumbHeight;\r\n    }\r\n\r\n    public set thumbHeight(value: number) {\r\n        if (this._thumbHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._thumbHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.thumbHeight = value;\r\n        vb.thumbHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the bar image */\r\n    public get barImageHeight(): number {\r\n        return this._barImageHeight;\r\n    }\r\n\r\n    public set barImageHeight(value: number) {\r\n        if (this._barImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._barImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.barImageHeight = value;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the horizontal bar image */\r\n    public get horizontalBarImageHeight(): number {\r\n        return this._horizontalBarImageHeight;\r\n    }\r\n\r\n    public set horizontalBarImageHeight(value: number) {\r\n        if (this._horizontalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._horizontalBarImageHeight = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of the vertical bar image */\r\n    public get verticalBarImageHeight(): number {\r\n        return this._verticalBarImageHeight;\r\n    }\r\n\r\n    public set verticalBarImageHeight(value: number) {\r\n        if (this._verticalBarImageHeight === value) {\r\n            return;\r\n        }\r\n        if (value <= 0) {\r\n            value = 0.1;\r\n        }\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n        this._verticalBarImageHeight = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.barImageHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    @serialize()\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        const hb = <ScrollBar>this._horizontalBar;\r\n        const vb = <ScrollBar>this._verticalBar;\r\n        hb.background = color;\r\n        vb.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background image */\r\n    public get barImage(): Image {\r\n        return this._barBackgroundImage;\r\n    }\r\n\r\n    public set barImage(value: Image) {\r\n        this._barBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        hb.backgroundImage = value;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the horizontal bar background image */\r\n    public get horizontalBarImage(): Image {\r\n        return this._horizontalBarBackgroundImage;\r\n    }\r\n\r\n    public set horizontalBarImage(value: Image) {\r\n        this._horizontalBarBackgroundImage = value;\r\n        const hb = <ImageScrollBar>this._horizontalBar;\r\n        hb.backgroundImage = value;\r\n    }\r\n\r\n    /** Gets or sets the vertical bar background image */\r\n    public get verticalBarImage(): Image {\r\n        return this._verticalBarBackgroundImage;\r\n    }\r\n\r\n    public set verticalBarImage(value: Image) {\r\n        this._verticalBarBackgroundImage = value;\r\n        const vb = <ImageScrollBar>this._verticalBar;\r\n        vb.backgroundImage = value;\r\n    }\r\n\r\n    private _setWindowPosition(force = true): void {\r\n        const ratio = this.host.idealRatio;\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (!force && this._oldWindowContentsWidth === windowContentsWidth && this._oldWindowContentsHeight === windowContentsHeight) {\r\n            return;\r\n        }\r\n\r\n        this._oldWindowContentsWidth = windowContentsWidth;\r\n        this._oldWindowContentsHeight = windowContentsHeight;\r\n\r\n        const _endLeft = this._clientWidth - windowContentsWidth;\r\n        const _endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = (this._horizontalBar.value / ratio) * _endLeft + \"px\";\r\n        const newTop = (this._verticalBar.value / ratio) * _endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            if (!this.freezeControls) {\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private _updateScroller(): void {\r\n        const windowContentsWidth = this._window._currentMeasure.width;\r\n        const windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth && !this.forceHorizontalBar) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._horizontalBar.isVisible && (windowContentsWidth > this._clientWidth || this.forceHorizontalBar)) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight && !this.forceVerticalBar) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        } else if (!this._verticalBar.isVisible && (windowContentsHeight > this._clientHeight || this.forceVerticalBar)) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n\r\n        const ratio = this.host.idealRatio;\r\n\r\n        this._horizontalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientWidth / ratio) + \"px\";\r\n        this._verticalBar.thumbWidth = this._thumbLength * 0.9 * (this._clientHeight / ratio) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _addBar(barControl: ScrollBar | ImageScrollBar, barContainer: Rectangle, isVertical: boolean, rotation: number) {\r\n        barControl.paddingLeft = 0;\r\n        barControl.width = \"100%\";\r\n        barControl.height = \"100%\";\r\n        barControl.barOffset = 0;\r\n        barControl.value = 0;\r\n        barControl.maximum = 1;\r\n        barControl.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        barControl.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        barControl.isVertical = isVertical;\r\n        barControl.rotation = rotation;\r\n        barControl.isVisible = false;\r\n\r\n        barContainer.addControl(barControl);\r\n\r\n        barControl.onValueChangedObservable.add(() => {\r\n            this._setWindowPosition();\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    private _attachWheel() {\r\n        if (!this._host || this._onWheelObserver) {\r\n            return;\r\n        }\r\n\r\n        this._onWheelObserver = this.onWheelObservable.add((pi) => {\r\n            if (!this._pointerIsOver || this.isReadOnly) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if (pi.y < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if (pi.y > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if (pi.x < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if (pi.x > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: ICanvasRenderingContext): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onWheelObservable.remove(this._onWheelObserver);\r\n        this._onWheelObserver = null;\r\n        super.dispose();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ScrollViewer\", ScrollViewer);\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\n\r\nimport { Rectangle } from \"./rectangle\";\r\nimport type { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { PointerInfoBase } from \"core/Events/pointerEvents\";\r\n\r\n/**\r\n * Class used to create toggle buttons\r\n * @since 5.0.0\r\n */\r\nexport class ToggleButton extends Rectangle {\r\n    /**\r\n     * Function called to generate the toActive animation\r\n     */\r\n    public toActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate the toInactive animation\r\n     */\r\n    public toInactiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is active.\r\n     */\r\n    public pointerEnterActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is active.\r\n     */\r\n    public pointerOutActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is active.\r\n     */\r\n    public pointerDownActiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is active.\r\n     */\r\n    public pointerUpActiveAnimation: () => void;\r\n\r\n    /**\r\n     * Function called to generate a pointer enter animation when the toggle button is inactive.\r\n     */\r\n    public pointerEnterInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation when the toggle button is inactive.\r\n     */\r\n    public pointerOutInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation when the toggle button is inactive.\r\n     */\r\n    public pointerDownInactiveAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation when the toggle button is inactive.\r\n     */\r\n    public pointerUpInactiveAnimation: () => void;\r\n\r\n    /** Observable raised when isActive is changed */\r\n    public onIsActiveChangedObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the toggle button will let internal controls handle picking instead of doing it directly using its bounding info\r\n     */\r\n    public delegatePickingToChildren = false;\r\n\r\n    private _group: string;\r\n    /** Gets or sets group name this toggle button belongs to */\r\n    public get group(): string {\r\n        return this._group;\r\n    }\r\n    public set group(value: string) {\r\n        if (this._group === value) {\r\n            return;\r\n        }\r\n\r\n        this._group = value;\r\n    }\r\n\r\n    private _isActive = false;\r\n    /** Gets or sets a boolean indicating if the toggle button is active or not */\r\n    public get isActive(): boolean {\r\n        return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n        // Function modeled after radioButton.ts\r\n        if (this._isActive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isActive = value;\r\n\r\n        // Update the visual state based on the new value\r\n        if (this._isActive) {\r\n            this.toActiveAnimation?.();\r\n        } else {\r\n            this.toInactiveAnimation?.();\r\n        }\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onIsActiveChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isActive && this._host && this._group) {\r\n            // A toggle button in a group can only have 1 active element at a given time.\r\n            // If this toggle button has a group, set other toggle buttons in the group to inactive.\r\n            this._host.executeOnAllControls((control) => {\r\n                // Check for control type ToggleButton\r\n                if (control.typeName === \"ToggleButton\") {\r\n                    // Don't do anything to this toggle button\r\n                    if (control === this) {\r\n                        return;\r\n                    }\r\n\r\n                    const childToggle = <ToggleButton>control;\r\n                    // If toggle button is in same group, set isActive to false\r\n                    if (childToggle.group === this.group) {\r\n                        childToggle.isActive = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new ToggleButton\r\n     * @param name defines the control name\r\n     * @param group defines the toggle group this toggle belongs to\r\n     */\r\n    constructor(public name?: string, group?: string) {\r\n        super(name);\r\n        this.group = group ?? \"\";\r\n\r\n        this.thickness = 0;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.toActiveAnimation = () => {\r\n            this.thickness = 1;\r\n        };\r\n        this.toInactiveAnimation = () => {\r\n            this.thickness = 0;\r\n        };\r\n\r\n        this.pointerEnterActiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutActiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownActiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpActiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n\r\n        this.pointerEnterInactiveAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutInactiveAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownInactiveAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpInactiveAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ToggleButton\";\r\n    }\r\n\r\n    // While being a container, the toggle button behaves like a control.\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processPicking(x: number, y: number, pi: PointerInfoBase, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): boolean {\r\n        if (!this._isEnabled || !this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.delegatePickingToChildren) {\r\n            let contains = false;\r\n            for (let index = this._children.length - 1; index >= 0; index--) {\r\n                const child = this._children[index];\r\n                if (child.isEnabled && child.isHitTestVisible && child.isVisible && !child.notRenderable && child.contains(x, y)) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this._processObservables(type, x, y, pi, pointerId, buttonIndex, deltaX, deltaY);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerEnter(target: Control, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerEnter(target, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerEnterActiveAnimation) {\r\n                this.pointerEnterActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerEnterInactiveAnimation) {\r\n                this.pointerEnterInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerOut(target: Control, pi: PointerInfoBase, force = false): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerOutActiveAnimation) {\r\n                    this.pointerOutActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerOutInactiveAnimation) {\r\n                    this.pointerOutInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerOut(target, pi, force);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        if (this._isActive) {\r\n            if (this.pointerDownActiveAnimation) {\r\n                this.pointerDownActiveAnimation();\r\n            }\r\n        } else {\r\n            if (this.pointerDownInactiveAnimation) {\r\n                this.pointerDownInactiveAnimation();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean, pi: PointerInfoBase): void {\r\n        if (!this.isReadOnly) {\r\n            if (this._isActive) {\r\n                if (this.pointerUpActiveAnimation) {\r\n                    this.pointerUpActiveAnimation();\r\n                }\r\n            } else {\r\n                if (this.pointerUpInactiveAnimation) {\r\n                    this.pointerUpInactiveAnimation();\r\n                }\r\n            }\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick, pi);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.ToggleButton\", ToggleButton);\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Button } from \"./button\";\r\nimport type { Container } from \"./container\";\r\nimport type { TextBlock } from \"./textBlock\";\r\nimport type { InputText } from \"./inputText\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport type { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { InputTextArea } from \"./inputTextArea\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText;\r\n    onFocusObserver: Nullable<Observer<InputText>>;\r\n    onBlurObserver: Nullable<Observer<InputText>>;\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        const button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        const panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        let maxKey: Nullable<Button> = null;\r\n        for (let i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            const key = this._createKey(keys[i], properties);\r\n            if (!maxKey || key.heightInPixels > maxKey.heightInPixels) {\r\n                maxKey = key;\r\n            }\r\n\r\n            panel.addControl(key);\r\n        }\r\n\r\n        panel.height = maxKey ? maxKey.height : this.defaultButtonHeight;\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            const rowContainer = <Container>row;\r\n            for (let j = 0; j < rowContainer.children.length; j++) {\r\n                const button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                const button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = shiftState ? this.shiftButtonColor : this.defaultButtonColor;\r\n                    button.thickness = shiftState > 1 ? this.selectedShiftThickness : 0;\r\n                }\r\n\r\n                button_tblock.text = shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText | InputTextArea> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText | InputTextArea> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Backspace\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(8);\r\n                        }\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                            this._currentlyConnectedInputText.alternativeProcessKey(\"Enter\");\r\n                        } else {\r\n                            this._currentlyConnectedInputText.processKey(13);\r\n                        }\r\n                        return;\r\n                }\r\n                if (this._currentlyConnectedInputText instanceof InputTextArea) {\r\n                    this._currentlyConnectedInputText.alternativeProcessKey(\"\", this.shiftState ? key.toUpperCase() : key);\r\n                } else {\r\n                    this._currentlyConnectedInputText.processKey(-1, this.shiftState ? key.toUpperCase() : key);\r\n                }\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            const filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts.length = 0;\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText): void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        const returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        for (const row of this.children) {\r\n            if (row.getClassName() === \"StackPanel\") {\r\n                const stackPanel = row as StackPanel;\r\n                for (const key of stackPanel.children) {\r\n                    if (key.getClassName() === \"Button\" && key.name) {\r\n                        key.onPointerUpObservable.add(() => {\r\n                            this.onKeyPressObservable.notifyObservers(key.name as string);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GUI.VirtualKeyboard\", VirtualKeyboard);\r\n", "import { Control } from \"./control\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    @serialize()\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    @serialize()\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    @serialize()\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    @serialize()\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    @serialize()\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    @serialize()\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    @serialize()\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            const cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            const cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + 1; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + 1; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (let x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (let y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    const cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.DisplayGrid\", DisplayGrid);\r\n", "import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport type { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        const left = this._renderLeft;\r\n        const top = this._renderTop;\r\n        const width = this._renderWidth;\r\n        const height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(\r\n                    left - this._effectiveBarOffset,\r\n                    this._currentMeasure.top + thumbPosition,\r\n                    this._currentMeasure.width,\r\n                    this._effectiveThumbThickness\r\n                );\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * Serializes the current control\r\n     * @param serializationObject defined the JSON serialized object\r\n     */\r\n    public serialize(serializationObject: any) {\r\n        super.serialize(serializationObject);\r\n        const backgroundImage = {};\r\n        const thumbImage = {};\r\n        const valueBarImage = {};\r\n        this.backgroundImage.serialize(backgroundImage);\r\n        this.thumbImage.serialize(thumbImage);\r\n        this.valueBarImage.serialize(valueBarImage);\r\n        serializationObject.backgroundImage = backgroundImage;\r\n        serializationObject.thumbImage = thumbImage;\r\n        serializationObject.valueBarImage = valueBarImage;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _parseFromContent(serializedObject: any, host: AdvancedDynamicTexture) {\r\n        super._parseFromContent(serializedObject, host);\r\n        this.backgroundImage = Image.Parse(serializedObject.backgroundImage, host) as Image;\r\n        this.thumbImage = Image.Parse(serializedObject.thumbImage, host) as Image;\r\n        this.valueBarImage = Image.Parse(serializedObject.valueBarImage, host) as Image;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.ImageBasedSlider\", ImageBasedSlider);\r\n", "import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @internal\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @param options.isHorizontal\r\n * @param options.controlFirst\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean; controlFirst: boolean }): StackPanel {\r\n    const panel = new StackPanel(\"panel\");\r\n    const isHorizontal = options ? options.isHorizontal : true;\r\n    const controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    const header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};\r\n", "/*\r\n * Base Gradient class. Should not be used directly.\r\n */\r\n\r\nimport type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Type that represents a single stop on the gradient.\r\n */\r\nexport type GradientColorStop = {\r\n    /**\r\n     * Offset from the start where the color will be applied.\r\n     */\r\n    offset: number;\r\n    /**\r\n     * Color to be applied.\r\n     */\r\n    color: string;\r\n};\r\n\r\n/**\r\n * Class that serves as a base for all the gradients created from context.\r\n */\r\nexport abstract class BaseGradient {\r\n    private _colorStops: GradientColorStop[] = [];\r\n\r\n    private _canvasGradient: CanvasGradient;\r\n    private _context: ICanvasRenderingContext;\r\n    private _gradientDirty: boolean = true;\r\n\r\n    /**\r\n     * Overwritten by child classes to create the canvas gradient.\r\n     * @param context\r\n     */\r\n    protected abstract _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient;\r\n\r\n    private _addColorStopsToCanvasGradient() {\r\n        for (const stop of this._colorStops) {\r\n            this._canvasGradient.addColorStop(stop.offset, stop.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If there are any changes or the context changed, regenerate the canvas gradient object. Else,\r\n     * reuse the existing gradient.\r\n     **/\r\n    public getCanvasGradient(context: ICanvasRenderingContext) {\r\n        if (this._gradientDirty || this._context !== context) {\r\n            this._context = context;\r\n            this._canvasGradient = this._createCanvasGradient(context);\r\n            this._addColorStopsToCanvasGradient();\r\n            this._gradientDirty = false;\r\n        }\r\n        return this._canvasGradient;\r\n    }\r\n\r\n    /**\r\n     * Adds a new color stop to the gradient.\r\n     * @param offset the offset of the stop on the gradient. Should be between 0 and 1\r\n     * @param color the color of the stop\r\n     */\r\n    public addColorStop(offset: number, color: string) {\r\n        this._colorStops.push({ offset, color });\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing color stop with the specified offset from the gradient\r\n     * @param offset the offset of the stop to be removed\r\n     */\r\n    public removeColorStop(offset: number) {\r\n        this._colorStops = this._colorStops.filter((colorStop) => colorStop.offset !== offset);\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Removes all color stops from the gradient\r\n     */\r\n    public clearColorStops() {\r\n        this._colorStops = [];\r\n        this._gradientDirty = true;\r\n    }\r\n\r\n    /** Color stops of the gradient */\r\n    public get colorStops() {\r\n        return this._colorStops;\r\n    }\r\n\r\n    /** Type of the gradient */\r\n    public getClassName() {\r\n        return \"BaseGradient\";\r\n    }\r\n\r\n    /** Serialize into a json object */\r\n    public serialize(serializationObject: any) {\r\n        serializationObject.colorStops = this._colorStops;\r\n        serializationObject.className = this.getClassName();\r\n    }\r\n\r\n    /** Parse from json object */\r\n    public parse(serializationObject: any) {\r\n        this._colorStops = serializationObject.colorStops;\r\n    }\r\n}\r\n", "import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient along a line that connects two coordinates.\r\n * These coordinates are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient\r\n */\r\nexport class LinearGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n\r\n    /**\r\n     * Creates a new linear gradient\r\n     * @param x0\r\n     * @param y0\r\n     * @param x1\r\n     * @param y1\r\n     */\r\n    constructor(x0?: number, y0?: number, x1?: number, y1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createLinearGradient(this._x0, this._y0, this._x1, this._y1);\r\n    }\r\n\r\n    /** X axis coordinate of the starting point in the line */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** X axis coordinate of the ending point in the line */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** Y axis coordinate of the starting point in the line */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** Y axis coordinate of the ending point in the line */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName(): string {\r\n        return \"LinearGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.LinearGradient\", LinearGradient);\r\n", "import type { ICanvasGradient, ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\nimport { BaseGradient } from \"./BaseGradient\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\n\r\n/**\r\n * Gradient formed from two circles with their own centers and radius.\r\n * The coordinates of the circles centers are relative to the canvas' space, not to any control's space.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n */\r\nexport class RadialGradient extends BaseGradient {\r\n    private _x0: number;\r\n    private _y0: number;\r\n    private _r0: number;\r\n    private _x1: number;\r\n    private _y1: number;\r\n    private _r1: number;\r\n\r\n    /**\r\n     * Creates a new radial gradient\r\n     * @param x0 x coordinate of the first circle's center\r\n     * @param y0 y coordinate of the first circle's center\r\n     * @param r0 radius of the first circle\r\n     * @param x1 x coordinate of the second circle's center\r\n     * @param y1 y coordinate of the second circle's center\r\n     * @param r1 radius of the second circle\r\n     */\r\n    constructor(x0?: number, y0?: number, r0?: number, x1?: number, y1?: number, r1?: number) {\r\n        super();\r\n        this._x0 = x0 ?? 0;\r\n        this._y0 = y0 ?? 0;\r\n        this._r0 = r0 ?? 0;\r\n        this._x1 = x1 ?? 0;\r\n        this._y1 = y1 ?? 0;\r\n        this._r1 = r1 ?? 0;\r\n    }\r\n\r\n    protected _createCanvasGradient(context: ICanvasRenderingContext): ICanvasGradient {\r\n        return context.createRadialGradient(this._x0, this._y0, this._r0, this._x1, this._y1, this._r1);\r\n    }\r\n\r\n    /** x coordinate of the first circle's center */\r\n    public get x0() {\r\n        return this._x0;\r\n    }\r\n\r\n    /** x coordinate of the second circle's center */\r\n    public get x1() {\r\n        return this._x1;\r\n    }\r\n\r\n    /** y coordinate of the first circle's center */\r\n    public get y0() {\r\n        return this._y0;\r\n    }\r\n\r\n    /** y coordinate of the second circle's center */\r\n    public get y1() {\r\n        return this._y1;\r\n    }\r\n\r\n    /** radius of the first circle */\r\n    public get r0() {\r\n        return this._r0;\r\n    }\r\n\r\n    /** radius of the second circle */\r\n    public get r1() {\r\n        return this._r1;\r\n    }\r\n\r\n    /**\r\n     * Class name of the gradient\r\n     * @returns the class name of the gradient\r\n     */\r\n    public getClassName() {\r\n        return \"RadialGradient\";\r\n    }\r\n\r\n    /**\r\n     * Serializes this gradient\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.x0 = this._x0;\r\n        serializationObject.y0 = this._y0;\r\n        serializationObject.r0 = this._r0;\r\n        serializationObject.x1 = this._x1;\r\n        serializationObject.y1 = this._y1;\r\n        serializationObject.r1 = this._r1;\r\n    }\r\n\r\n    /**\r\n     * Parses a gradient from a serialization object\r\n     * @param serializationObject the object to parse from\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this._x0 = serializationObject.x0;\r\n        this._y0 = serializationObject.y0;\r\n        this._r0 = serializationObject.r0;\r\n        this._x1 = serializationObject.x1;\r\n        this._y1 = serializationObject.y1;\r\n        this._r1 = serializationObject.r1;\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.RadialGradient\", RadialGradient);\r\n", "export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./focusableButton\";\r\nexport * from \"./focusableControl\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputTextArea\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./scrollViewers/scrollViewer\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./textWrapper\";\r\nexport * from \"./toggleButton\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\nexport * from \"./sliders/baseSlider\";\r\nexport * from \"./sliders/slider\";\r\nexport * from \"./sliders/imageBasedSlider\";\r\nexport * from \"./sliders/scrollBar\";\r\nexport * from \"./sliders/imageScrollBar\";\r\nexport * from \"./statics\";\r\nexport * from \"./gradient/BaseGradient\";\r\nexport * from \"./gradient/LinearGradient\";\r\nexport * from \"./gradient/RadialGradient\";\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { IDisposable } from \"core/scene\";\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @internal */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @internal */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Vector2, Vector3, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { PointerInfoPre, PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\nimport { ClipboardEventTypes, ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport type { KeyboardInfoPre } from \"core/Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"core/Events/keyboardEvents\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"core/Materials/Textures/dynamicTexture\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Layer } from \"core/Layers/layer\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport type { IFocusableControl } from \"./controls/focusableControl\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Viewport } from \"core/Maths/math.viewport\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IPointerEvent, IWheelEvent } from \"core/Events/deviceInputEvents\";\r\nimport { RandomGUID } from \"core/Misc/guid\";\r\nimport { GetClass } from \"core/Misc/typeStore\";\r\nimport { DecodeBase64ToBinary } from \"core/Misc/stringTools\";\r\n\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    /** Define the Uurl to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Indicates if some optimizations can be performed in GUI GPU management (the downside is additional memory/GPU texture memory used) */\r\n    public static AllowGPUOptimizations = true;\r\n\r\n    /** Snippet ID if the content was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /** Observable that fires when the GUI is ready */\r\n    public onGuiReadyObservable = new Observable<AdvancedDynamicTexture>();\r\n\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _prePointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _canvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _controlAddedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _controlRemovedObserver: Nullable<Observer<Nullable<Control>>>;\r\n    private _background: string;\r\n    /** @internal */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @internal */\r\n    public _lastPickedControl: Control;\r\n    /** @internal */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @internal */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @internal */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @internal */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootElement: Nullable<HTMLElement>;\r\n    private _cursorChanged = false;\r\n    private _defaultMousePointerId = 0;\r\n    private _rootChildrenHaveChanged: boolean = false;\r\n\r\n    /** @internal */\r\n    public _capturedPointerIds = new Set<number>();\r\n\r\n    /** @internal */\r\n    public _numLayoutCalls = 0;\r\n    /** Gets the number of layout calls made the last time the ADT has been rendered */\r\n    public get numLayoutCalls(): number {\r\n        return this._numLayoutCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    public _numRenderCalls = 0;\r\n    /** Gets the number of render calls made the last time the ADT has been rendered */\r\n    public get numRenderCalls(): number {\r\n        return this._numRenderCalls;\r\n    }\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n    /**\r\n     * Observable event triggered before layout is evaluated\r\n     */\r\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the layout was evaluated\r\n     */\r\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered before the texture is rendered\r\n     */\r\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Observable event triggered after the texture was rendered\r\n     */\r\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the canvas must be reverted on Y when updating the texture\r\n     */\r\n    public applyYInversionOnUpdate = true;\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n        this._renderScale = value;\r\n        this._onResize();\r\n    }\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used when in \"ideal mode\"\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#adaptive-scaling\r\n     * */\r\n    public get idealRatio(): number {\r\n        let rwidth: number = 0;\r\n        let rheight: number = 0;\r\n\r\n        if (this._idealWidth) {\r\n            rwidth = this.getSize().width / this._idealWidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            rheight = this.getSize().height / this._idealHeight;\r\n        }\r\n\r\n        if (this._useSmallestIdeal && this._idealWidth && this._idealHeight) {\r\n            return window.innerWidth < window.innerHeight ? rwidth : rheight;\r\n        }\r\n\r\n        if (this._idealWidth) {\r\n            // horizontal\r\n            return rwidth;\r\n        }\r\n\r\n        if (this._idealHeight) {\r\n            // vertical\r\n            return rheight;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Will return all controls with the given type name\r\n     * @param typeName defines the type name to search for\r\n     * @returns an array of all controls found\r\n     */\r\n    public getControlsByType(typeName: string): Control[] {\r\n        return this._rootContainer.getDescendants(false, (control) => control.typeName === typeName);\r\n    }\r\n\r\n    /**\r\n     * Will return the first control with the given name\r\n     * @param name defines the name to search for\r\n     * @returns the first control found or null\r\n     */\r\n    public getControlByName(name: string): Nullable<Control> {\r\n        return this._getControlByKey(\"name\", name);\r\n    }\r\n\r\n    private _getControlByKey(key: string, value: any): Nullable<Control> {\r\n        return this._rootContainer.getDescendants().find((control) => control[key as keyof Control] === value) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n        this._focusedControl = control;\r\n    }\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return !this.layer.isBackground;\r\n    }\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n     * If set to true, every scene render will trigger a pointer event for the GUI\r\n     * if it is linked to a mesh or has controls linked to a mesh. This will allow\r\n     * you to catch the pointer moving around the GUI due to camera or mesh movements,\r\n     * but it has a performance cost.\r\n     */\r\n    public checkPointerEveryFrame = false;\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene?: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE, invertY = true) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Constants.TEXTUREFORMAT_RGBA, invertY);\r\n        scene = this.getScene();\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n        this.applyYInversionOnUpdate = invertY;\r\n        this._rootElement = scene.getEngine().getInputElement();\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n\r\n        /** Whenever a control is added or removed to the root, we have to recheck the camera projection as it can have changed  */\r\n        this._controlAddedObserver = this._rootContainer.onControlAddedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._controlRemovedObserver = this._rootContainer.onControlRemovedObservable.add((control) => {\r\n            if (control) {\r\n                this._rootChildrenHaveChanged = true;\r\n            }\r\n        });\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n        this._rootContainer._link(this);\r\n        this.hasAlpha = true;\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n        this._texture.isReady = true;\r\n    }\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n        func(container);\r\n        for (const child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, <Container>child);\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    private _useInvalidateRectOptimization = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\r\n     */\r\n    public get useInvalidateRectOptimization(): boolean {\r\n        return this._useInvalidateRectOptimization;\r\n    }\r\n\r\n    public set useInvalidateRectOptimization(value: boolean) {\r\n        this._useInvalidateRectOptimization = value;\r\n    }\r\n\r\n    // Invalidated rectangle which is the combination of all invalidated controls after they have been rotated into absolute position\r\n    private _invalidatedRectangle: Nullable<Measure> = null;\r\n    /**\r\n     * Invalidates a rectangle area on the gui texture\r\n     * @param invalidMinX left most position of the rectangle to invalidate in the texture\r\n     * @param invalidMinY top most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxX right most position of the rectangle to invalidate in the texture\r\n     * @param invalidMaxY bottom most position of the rectangle to invalidate in the texture\r\n     */\r\n    public invalidateRect(invalidMinX: number, invalidMinY: number, invalidMaxX: number, invalidMaxY: number) {\r\n        if (!this._useInvalidateRectOptimization) {\r\n            return;\r\n        }\r\n        if (!this._invalidatedRectangle) {\r\n            this._invalidatedRectangle = new Measure(invalidMinX, invalidMinY, invalidMaxX - invalidMinX + 1, invalidMaxY - invalidMinY + 1);\r\n        } else {\r\n            // Compute intersection\r\n            const maxX = Math.ceil(Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, invalidMaxX));\r\n            const maxY = Math.ceil(Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, invalidMaxY));\r\n            this._invalidatedRectangle.left = Math.floor(Math.min(this._invalidatedRectangle.left, invalidMinX));\r\n            this._invalidatedRectangle.top = Math.floor(Math.min(this._invalidatedRectangle.top, invalidMinY));\r\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\r\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\r\n        }\r\n    }\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/gui/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n    /**\r\n     * Moves overlapped controls towards a position where it is not overlapping anymore.\r\n     * Please note that this method alters linkOffsetXInPixels and linkOffsetYInPixels.\r\n     * @param overlapGroup the overlap group which will be processed or undefined to process all overlap groups\r\n     * @param deltaStep the step size (speed) to reach the target non overlapping position (default 0.1)\r\n     * @param repelFactor how much is the control repelled by other controls\r\n     */\r\n    public moveToNonOverlappedPosition(overlapGroup?: number | Control[], deltaStep = 1, repelFactor = 1) {\r\n        let controlsForGroup: Control[];\r\n        if (Array.isArray(overlapGroup)) {\r\n            controlsForGroup = overlapGroup;\r\n        } else {\r\n            const descendants = this.getDescendants(true);\r\n            // get only the controls with an overlapGroup property set\r\n            // if the overlapGroup parameter is set, filter the controls and get only the controls belonging to that overlapGroup\r\n            controlsForGroup = overlapGroup === undefined ? descendants.filter((c) => c.overlapGroup !== undefined) : descendants.filter((c) => c.overlapGroup === overlapGroup);\r\n        }\r\n\r\n        controlsForGroup.forEach((control1) => {\r\n            let velocity = Vector2.Zero();\r\n            const center = new Vector2(control1.centerX, control1.centerY);\r\n\r\n            controlsForGroup.forEach((control2) => {\r\n                if (control1 !== control2 && AdvancedDynamicTexture._Overlaps(control1, control2)) {\r\n                    // if the two controls overlaps get a direction vector from one control's center to another control's center\r\n                    const diff = center.subtract(new Vector2(control2.centerX, control2.centerY));\r\n                    const diffLength = diff.length();\r\n\r\n                    if (diffLength > 0) {\r\n                        // calculate the velocity\r\n                        velocity = velocity.add(diff.normalize().scale(repelFactor / diffLength));\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (velocity.length() > 0) {\r\n                // move the control along the direction vector away from the overlapping control\r\n                velocity = velocity.normalize().scale(deltaStep * (control1.overlapDeltaMultiplier ?? 1));\r\n                control1.linkOffsetXInPixels += velocity.x;\r\n                control1.linkOffsetYInPixels += velocity.y;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._rootElement = null;\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n        if (this._prePointerObserver) {\r\n            scene.onPrePointerObservable.remove(this._prePointerObserver);\r\n        }\r\n        if (this._sceneRenderObserver) {\r\n            scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n        if (this._canvasBlurObserver) {\r\n            scene.getEngine().onCanvasBlurObservable.remove(this._canvasBlurObserver);\r\n        }\r\n        if (this._controlAddedObserver) {\r\n            this._rootContainer.onControlAddedObservable.remove(this._controlAddedObserver);\r\n        }\r\n        if (this._controlRemovedObserver) {\r\n            this._rootContainer.onControlRemovedObservable.remove(this._controlRemovedObserver);\r\n        }\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n        this.onBeginRenderObservable.clear();\r\n        this.onEndRenderObservable.clear();\r\n        this.onBeginLayoutObservable.clear();\r\n        this.onEndLayoutObservable.clear();\r\n        this.onGuiReadyObservable.clear();\r\n        super.dispose();\r\n    }\r\n    private _onResize(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        // Check size\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        let renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        let renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n            this.markAsDirty();\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1);\r\n    }\r\n    /** @internal */\r\n    public _getGlobalViewport(): Viewport {\r\n        const size = this.getSize();\r\n        const globalViewPort = this._fullscreenViewport.toGlobal(size.width, size.height);\r\n\r\n        const targetX = Math.round(globalViewPort.width * (1 / this.rootContainer.scaleX));\r\n        const targetY = Math.round(globalViewPort.height * (1 / this.rootContainer.scaleY));\r\n\r\n        globalViewPort.x += (globalViewPort.width - targetX) / 2;\r\n        globalViewPort.y += (globalViewPort.height - targetY) / 2;\r\n\r\n        globalViewPort.width = targetX;\r\n        globalViewPort.height = targetY;\r\n\r\n        return globalViewPort;\r\n    }\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        const result = this.getProjectedPositionWithZ(position, worldMatrix);\r\n        return new Vector2(result.x, result.y);\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position with Z\r\n     */\r\n    public getProjectedPositionWithZ(position: Vector3, worldMatrix: Matrix): Vector3 {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return Vector3.Zero();\r\n        }\r\n        const globalViewport = this._getGlobalViewport();\r\n        const projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n        return new Vector3(projectedPosition.x, projectedPosition.y, projectedPosition.z);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera, skipUpdate?: boolean): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            const scene = this.getScene();\r\n            if (!scene) {\r\n                return;\r\n            }\r\n            const globalViewport = this._getGlobalViewport();\r\n            for (const control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n                const mesh = control._linkedMesh as AbstractMesh;\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n                    continue;\r\n                }\r\n                const position = mesh.getBoundingInfo ? mesh.getBoundingInfo().boundingSphere.center : (Vector3.ZeroReadOnly as Vector3);\r\n                const projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                if (this.useInvalidateRectOptimization) {\r\n                    control.invalidateRect();\r\n                }\r\n\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n        this._render(skipUpdate);\r\n        if (!skipUpdate) {\r\n            this.update(this.applyYInversionOnUpdate, this.premulAlpha, AdvancedDynamicTexture.AllowGPUOptimizations);\r\n        }\r\n    }\r\n\r\n    private _clearMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    private _render(skipRender?: boolean): void {\r\n        const textureSize = this.getSize();\r\n        const renderWidth = textureSize.width;\r\n        const renderHeight = textureSize.height;\r\n\r\n        const context = this.getContext();\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n\r\n        if (this.onGuiReadyObservable.hasObservers()) {\r\n            this._checkGuiIsReady();\r\n        }\r\n\r\n        /** We have to recheck the camera projection in the case the root control's children have changed  */\r\n        if (this._rootChildrenHaveChanged) {\r\n            const camera = this.getScene()?.activeCamera;\r\n            if (camera) {\r\n                this._rootChildrenHaveChanged = false;\r\n                this._checkUpdate(camera, true);\r\n            }\r\n        }\r\n\r\n        // Layout\r\n        this.onBeginLayoutObservable.notifyObservers(this);\r\n        const measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._numLayoutCalls = 0;\r\n        this._rootContainer._layout(measure, context);\r\n        this.onEndLayoutObservable.notifyObservers(this);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        if (skipRender) {\r\n            return;\r\n        }\r\n\r\n        // Clear\r\n        if (this._invalidatedRectangle) {\r\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\r\n        } else {\r\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\r\n        }\r\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        this.onBeginRenderObservable.notifyObservers(this);\r\n        this._numRenderCalls = 0;\r\n        this._rootContainer._render(context, this._invalidatedRectangle);\r\n        this.onEndRenderObservable.notifyObservers(this);\r\n        this._invalidatedRectangle = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootElement) {\r\n            this._rootElement.style.cursor = cursor;\r\n            this._cursorChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n    private _doPicking(x: number, y: number, pi: Nullable<PointerInfoBase>, type: number, pointerId: number, buttonIndex: number, deltaX?: number, deltaY?: number): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        const engine = scene.getEngine();\r\n        const textureSize = this.getSize();\r\n        if (this._isFullscreen) {\r\n            const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            const viewport = camera.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n        if (this._capturingControl[pointerId]) {\r\n            if (this._capturingControl[pointerId].isPointerBlocker) {\r\n                this._shouldBlockPointer = true;\r\n            }\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pi, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        this._cursorChanged = false;\r\n        if (!this._rootContainer._processPicking(x, y, pi, type, pointerId, buttonIndex, deltaX, deltaY)) {\r\n            if (!scene.doNotHandleCursors) {\r\n                this._changeCursor(\"\");\r\n            }\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this._cursorChanged && !scene.doNotHandleCursors) {\r\n            this._changeCursor(\"\");\r\n        }\r\n        this._manageFocus();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (const pointerId in list) {\r\n            if (!Object.prototype.hasOwnProperty.call(list, pointerId)) {\r\n                continue;\r\n            }\r\n            const lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /**\r\n     * This function will run a pointer event on this ADT and will trigger any pointer events on any controls\r\n     * This will work on a fullscreen ADT only. For mesh based ADT, simulate pointer events using the scene directly.\r\n     * @param x pointer X on the canvas for the picking\r\n     * @param y pointer Y on the canvas for the picking\r\n     * @param pi optional pointer information\r\n     */\r\n    public pick(x: number, y: number, pi: Nullable<PointerInfoPre> = null) {\r\n        if (this._isFullscreen && this._scene) {\r\n            this._translateToPicking(this._scene, new Viewport(0, 0, 0, 0), pi, x, y);\r\n        }\r\n    }\r\n\r\n    private _translateToPicking(scene: Scene, tempViewport: Viewport, pi: Nullable<PointerInfoPre>, x: number = scene.pointerX, y: number = scene.pointerY) {\r\n        const camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n        const engine = scene.getEngine();\r\n        const originalCameraToUseForPointers = scene.cameraToUseForPointers;\r\n\r\n        if (!camera) {\r\n            tempViewport.x = 0;\r\n            tempViewport.y = 0;\r\n            tempViewport.width = engine.getRenderWidth();\r\n            tempViewport.height = engine.getRenderHeight();\r\n        } else {\r\n            if (camera.rigCameras.length) {\r\n                // rig camera - we need to find the camera to use for this event\r\n                const rigViewport = new Viewport(0, 0, 1, 1);\r\n                camera.rigCameras.forEach((rigCamera) => {\r\n                    // generate the viewport of this camera\r\n                    rigCamera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), rigViewport);\r\n                    const transformedX = x / engine.getHardwareScalingLevel() - rigViewport.x;\r\n                    const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - rigViewport.y - rigViewport.height);\r\n                    // check if the pointer is in the camera's viewport\r\n                    if (transformedX < 0 || transformedY < 0 || x > rigViewport.width || y > rigViewport.height) {\r\n                        // out of viewport - don't use this camera\r\n                        return;\r\n                    }\r\n                    // set the camera to use for pointers until this pointer loop is over\r\n                    scene.cameraToUseForPointers = rigCamera;\r\n                    // set the viewport\r\n                    tempViewport.x = rigViewport.x;\r\n                    tempViewport.y = rigViewport.y;\r\n                    tempViewport.width = rigViewport.width;\r\n                    tempViewport.height = rigViewport.height;\r\n                });\r\n            } else {\r\n                camera.viewport.toGlobalToRef(engine.getRenderWidth(), engine.getRenderHeight(), tempViewport);\r\n            }\r\n        }\r\n\r\n        const transformedX = x / engine.getHardwareScalingLevel() - tempViewport.x;\r\n        const transformedY = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - tempViewport.y - tempViewport.height);\r\n        this._shouldBlockPointer = false;\r\n        // Do picking modifies _shouldBlockPointer\r\n        if (pi) {\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            this._doPicking(transformedX, transformedY, pi, pi.type, pointerId, pi.event.button, (<IWheelEvent>pi.event).deltaX, (<IWheelEvent>pi.event).deltaY);\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer || this._capturingControl[pointerId]) {\r\n                pi.skipOnPointerObservable = true;\r\n            }\r\n        } else {\r\n            this._doPicking(transformedX, transformedY, null, PointerEventTypes.POINTERMOVE, this._defaultMousePointerId, 0);\r\n        }\r\n        // if overridden by a rig camera - reset back to the original value\r\n        scene.cameraToUseForPointers = originalCameraToUseForPointers;\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        const tempViewport = new Viewport(0, 0, 0, 0);\r\n\r\n        this._prePointerObserver = scene.onPrePointerObservable.add((pi) => {\r\n            if (\r\n                scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId) &&\r\n                pi.type === PointerEventTypes.POINTERUP &&\r\n                !this._capturedPointerIds.has((pi.event as IPointerEvent).pointerId)\r\n            ) {\r\n                return;\r\n            }\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                // Avoid pointerMove events firing while the pointer is captured by the scene\r\n                if (scene.isPointerCaptured((<IPointerEvent>pi.event).pointerId)) {\r\n                    return;\r\n                }\r\n                if ((pi.event as IPointerEvent).pointerId) {\r\n                    this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n                }\r\n            }\r\n            this._translateToPicking(scene, tempViewport, pi);\r\n        });\r\n        this._attachPickingToSceneRender(scene, () => this._translateToPicking(scene, tempViewport, null), false);\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCopy = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardCut = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    private _onClipboardPaste = (rawEvt: Event) => {\r\n        const evt = rawEvt as ClipboardEvent;\r\n        const ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    };\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this._onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this._onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this._onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this._onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this._onClipboardCut);\r\n        self.removeEventListener(\"paste\", this._onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Transform uvs from mesh space to texture space, taking the texture into account\r\n     * @param uv the uvs in mesh space\r\n     * @returns the uvs in texture space\r\n     */\r\n    private _transformUvs(uv: Vector2): Vector2 {\r\n        const textureMatrix = this.getTextureMatrix();\r\n        let result;\r\n        if (textureMatrix.isIdentityAs3x2()) {\r\n            result = uv;\r\n        } else {\r\n            const homogeneousTextureMatrix = TmpVectors.Matrix[0];\r\n\r\n            textureMatrix.getRowToRef(0, TmpVectors.Vector4[0]);\r\n            textureMatrix.getRowToRef(1, TmpVectors.Vector4[1]);\r\n            textureMatrix.getRowToRef(2, TmpVectors.Vector4[2]);\r\n\r\n            const r0 = TmpVectors.Vector4[0];\r\n            const r1 = TmpVectors.Vector4[1];\r\n            const r2 = TmpVectors.Vector4[2];\r\n\r\n            homogeneousTextureMatrix.setRowFromFloats(0, r0.x, r0.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(1, r1.x, r1.y, 0, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(2, 0, 0, 1, 0);\r\n            homogeneousTextureMatrix.setRowFromFloats(3, r2.x, r2.y, 0, 1);\r\n\r\n            result = TmpVectors.Vector2[0];\r\n            Vector2.TransformToRef(uv, homogeneousTextureMatrix, result);\r\n        }\r\n\r\n        // In wrap and mirror mode, the texture coordinate for coordinates more than 1 is the fractional part of the coordinate\r\n        if (this.wrapU === Texture.WRAP_ADDRESSMODE || this.wrapU === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.x > 1) {\r\n                let fX = result.x - Math.trunc(result.x);\r\n                // In mirror mode, the sign of the texture coordinate depends on the integer part -\r\n                // odd integers means it is mirrored from the original coordinate\r\n                if (this.wrapU === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fX = 1 - fX;\r\n                }\r\n                result.x = fX;\r\n            }\r\n        }\r\n        if (this.wrapV === Texture.WRAP_ADDRESSMODE || this.wrapV === Texture.MIRROR_ADDRESSMODE) {\r\n            if (result.y > 1) {\r\n                let fY = result.y - Math.trunc(result.y);\r\n                if (this.wrapV === Texture.MIRROR_ADDRESSMODE && Math.trunc(result.x) % 2 === 1) {\r\n                    fY = 1 - fY;\r\n                }\r\n                result.y = fY;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        this._pointerObserver = scene.onPointerObservable.add((pi) => {\r\n            if (\r\n                pi.type !== PointerEventTypes.POINTERMOVE &&\r\n                pi.type !== PointerEventTypes.POINTERUP &&\r\n                pi.type !== PointerEventTypes.POINTERDOWN &&\r\n                pi.type !== PointerEventTypes.POINTERWHEEL\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE && (pi.event as IPointerEvent).pointerId) {\r\n                this._defaultMousePointerId = (pi.event as IPointerEvent).pointerId; // This is required to make sure we have the correct pointer ID for wheel\r\n            }\r\n\r\n            const pointerId = (pi.event as IPointerEvent).pointerId || this._defaultMousePointerId;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                let uv = pi.pickInfo.getTextureCoordinates();\r\n                if (uv) {\r\n                    uv = this._transformUvs(uv);\r\n                    const size = this.getSize();\r\n                    this._doPicking(\r\n                        uv.x * size.width,\r\n                        (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height,\r\n                        pi,\r\n                        pi.type,\r\n                        pointerId,\r\n                        pi.event.button,\r\n                        (<IWheelEvent>pi.event).deltaX,\r\n                        (<IWheelEvent>pi.event).deltaY\r\n                    );\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    let canMoveFocus = true;\r\n                    if (friendlyControls) {\r\n                        for (const control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], pi, true);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachPickingToSceneRender(\r\n            scene,\r\n            () => {\r\n                const pointerId = this._defaultMousePointerId;\r\n                const pick = scene?.pick(scene.pointerX, scene.pointerY);\r\n                if (pick && pick.hit && pick.pickedMesh === mesh) {\r\n                    let uv = pick.getTextureCoordinates();\r\n                    if (uv) {\r\n                        uv = this._transformUvs(uv);\r\n                        const size = this.getSize();\r\n                        this._doPicking(uv.x * size.width, (this.applyYInversionOnUpdate ? 1.0 - uv.y : uv.y) * size.height, null, PointerEventTypes.POINTERMOVE, pointerId, 0);\r\n                    }\r\n                } else {\r\n                    if (this._lastControlOver[pointerId]) {\r\n                        this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId], null, true);\r\n                    }\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            },\r\n            true\r\n        );\r\n        this._attachToOnPointerOut(scene);\r\n        this._attachToOnBlur(scene);\r\n    }\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== <any>this._lastPickedControl) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n    private _attachPickingToSceneRender(scene: Scene, pickFunction: () => void, forcePicking: boolean) {\r\n        this._sceneRenderObserver = scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.checkPointerEveryFrame) {\r\n                return;\r\n            }\r\n            if (this._linkedControls.length > 0 || forcePicking) {\r\n                pickFunction();\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId], null);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp(pointerEvent.pointerId);\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n    private _attachToOnBlur(scene: Scene): void {\r\n        this._canvasBlurObserver = scene.getEngine().onCanvasBlurObservable.add(() => {\r\n            Object.entries(this._lastControlDown).forEach(([, value]) => {\r\n                value._onCanvasBlur();\r\n            });\r\n            this.focusedControl = null;\r\n            this._lastControlDown = {};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the entire GUI system\r\n     * @returns an object with the JSON serialized data\r\n     */\r\n    public serializeContent(): any {\r\n        const size = this.getSize();\r\n        const serializationObject = {\r\n            root: {},\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n\r\n        this._rootContainer.serialize(serializationObject.root);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     */\r\n    public parseSerializedObject(serializedObject: any, scaleToSize?: boolean) {\r\n        this._rootContainer = Control.Parse(serializedObject.root, this) as Container;\r\n        if (scaleToSize) {\r\n            const width = serializedObject.width;\r\n            const height = serializedObject.height;\r\n            if (typeof width === \"number\" && typeof height === \"number\" && width >= 0 && height >= 0) {\r\n                this.scaleTo(width, height);\r\n            } else {\r\n                // scales the GUI to a default size if none was available in the serialized content\r\n                this.scaleTo(1920, 1080);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the ADT\r\n     * @param newName defines the name of the new ADT\r\n     * @returns the clone of the ADT\r\n     */\r\n    public clone(newName?: string): AdvancedDynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n        const size = this.getSize();\r\n        const data = this.serializeContent();\r\n        const clone = new AdvancedDynamicTexture(newName ?? \"Clone of \" + this.name, size.width, size.height, scene, !this.noMipmap, this.samplingMode);\r\n        clone.parseSerializedObject(data);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a JSON object\r\n     * @param serializedObject define the JSON serialized object to restore from\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @deprecated Please use parseSerializedObject instead\r\n     */\r\n    public parseContent = this.parseSerializedObject;\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from snippet\");\r\n        if (snippetId === \"_BLANK\") {\r\n            return adt;\r\n        }\r\n\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(AdvancedDynamicTexture.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"), true);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a snippet saved by the GUI editor\r\n     * @param snippetId defines the snippet to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromSnippetAsync(snippetId: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromSnippetAsync(snippetId, scaleToSize, this);\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @param appendToAdt if provided the snippet will be appended to the adt. Otherwise a fullscreen ADT will be created.\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public static async ParseFromFileAsync(url: string, scaleToSize?: boolean, appendToAdt?: AdvancedDynamicTexture): Promise<AdvancedDynamicTexture> {\r\n        const adt = appendToAdt ?? AdvancedDynamicTexture.CreateFullscreenUI(\"ADT from URL\");\r\n        const serialized = await AdvancedDynamicTexture._LoadURLContentAsync(url);\r\n        adt.parseSerializedObject(serialized, scaleToSize);\r\n        return adt;\r\n    }\r\n\r\n    /**\r\n     * Recreate the content of the ADT from a url json\r\n     * @param url defines the url to load\r\n     * @param scaleToSize defines whether to scale to texture to the saved size\r\n     * @returns a promise that will resolve on success\r\n     */\r\n    public parseFromURLAsync(url: string, scaleToSize?: boolean): Promise<AdvancedDynamicTexture> {\r\n        return AdvancedDynamicTexture.ParseFromFileAsync(url, scaleToSize, this);\r\n    }\r\n\r\n    private static _LoadURLContentAsync(url: string, snippet: boolean = false): Promise<any> {\r\n        if (url === \"\") {\r\n            return Promise.reject(\"No URL provided\");\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let gui;\r\n                        if (snippet) {\r\n                            const payload = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                            gui = payload.encodedGui ? new TextDecoder(\"utf-8\").decode(DecodeBase64ToBinary(payload.encodedGui)) : payload.gui;\r\n                        } else {\r\n                            gui = request.responseText;\r\n                        }\r\n                        const serializationObject = JSON.parse(gui);\r\n                        resolve(serializationObject);\r\n                    } else {\r\n                        reject(\"Unable to load\");\r\n                    }\r\n                }\r\n            });\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Compares two rectangle based controls for pixel overlap\r\n     * @param control1 The first control to compare\r\n     * @param control2 The second control to compare\r\n     * @returns true if overlaps, otherwise false\r\n     */\r\n    private static _Overlaps(control1: Control, control2: Control) {\r\n        return !(\r\n            control1.centerX > control2.centerX + control2.widthInPixels ||\r\n            control1.centerX + control1.widthInPixels < control2.centerX ||\r\n            control1.centerY + control1.heightInPixels < control2.centerY ||\r\n            control1.centerY > control2.centerY + control2.heightInPixels\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @param materialSetupCallback defines a custom way of creating and setting up the material on the mesh\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(\r\n        mesh: AbstractMesh,\r\n        width = 1024,\r\n        height = 1024,\r\n        supportPointerMove = true,\r\n        onlyAlphaTesting = false,\r\n        invertY?: boolean,\r\n        materialSetupCallback: (mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean) => void = this._CreateMaterial\r\n    ): AdvancedDynamicTexture {\r\n        // use a unique ID in name so serialization will work even if you create two ADTs for a single mesh\r\n        const uniqueId = RandomGUID();\r\n        const result = new AdvancedDynamicTexture(\r\n            `AdvancedDynamicTexture for ${mesh.name} [${uniqueId}]`,\r\n            width,\r\n            height,\r\n            mesh.getScene(),\r\n            true,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            invertY\r\n        );\r\n\r\n        materialSetupCallback(mesh, uniqueId, result, onlyAlphaTesting);\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n\r\n    private static _CreateMaterial(mesh: AbstractMesh, uniqueId: string, texture: AdvancedDynamicTexture, onlyAlphaTesting: boolean): void {\r\n        const internalClassType = GetClass(\"BABYLON.StandardMaterial\");\r\n        if (!internalClassType) {\r\n            throw \"StandardMaterial needs to be imported before as it contains a side-effect required by your code.\";\r\n        }\r\n\r\n        const material: StandardMaterial = new internalClassType(`AdvancedDynamicTextureMaterial for ${mesh.name} [${uniqueId}]`, mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = texture;\r\n            material.emissiveTexture = texture;\r\n            texture.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = texture;\r\n            material.opacityTexture = texture;\r\n        }\r\n        mesh.material = material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh) BUT do not create a new material for the mesh. You will be responsible for connecting the texture\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMeshTexture(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, invertY?: boolean): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE, invertY);\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hosting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param adaptiveScaling defines whether to automatically scale root to match hardwarescaling (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(\r\n        name: string,\r\n        foreground: boolean = true,\r\n        scene: Nullable<Scene> = null,\r\n        sampling = Texture.BILINEAR_SAMPLINGMODE,\r\n        adaptiveScaling: boolean = false\r\n    ): AdvancedDynamicTexture {\r\n        const result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n        // Display\r\n        const resultScene = result.getScene();\r\n        const layer = new Layer(name + \"_layer\", null, resultScene, !foreground);\r\n        layer.texture = result;\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        if (adaptiveScaling && resultScene) {\r\n            const newScale = 1 / resultScene.getEngine().getHardwareScalingLevel();\r\n            result._rootContainer.scaleX = newScale;\r\n            result._rootContainer.scaleY = newScale;\r\n        }\r\n\r\n        // Attach\r\n        result.attach();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public scale(ratio: number): void {\r\n        super.scale(ratio);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public scaleTo(width: number, height: number): void {\r\n        super.scaleTo(width, height);\r\n        this.markAsDirty();\r\n    }\r\n\r\n    private _checkGuiIsReady() {\r\n        if (this.guiIsReady()) {\r\n            this.onGuiReadyObservable.notifyObservers(this);\r\n\r\n            this.onGuiReadyObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the GUI components are ready to render\r\n     */\r\n    public guiIsReady(): boolean {\r\n        return this._rootContainer.isReady();\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { PerfCounter } from \"core/Misc/perfCounter\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}\r\n", "import { GetClass } from \"core/Misc/typeStore\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst XmlLoaderError = \"XmlLoader Exception : XML file is malformed or corrupted.\";\r\n\r\n/**\r\n * Class used to load GUI via XML.\r\n */\r\nexport class XmlLoader {\r\n    private _nodes: any = {};\r\n\r\n    private _nodeTypes: any = {\r\n        element: 1,\r\n        attribute: 2,\r\n        text: 3,\r\n    };\r\n\r\n    private _isLoaded: boolean = false;\r\n\r\n    private _objectAttributes: any = {\r\n        textHorizontalAlignment: 1,\r\n        textVerticalAlignment: 2,\r\n        horizontalAlignment: 3,\r\n        verticalAlignment: 4,\r\n        stretch: 5,\r\n    };\r\n\r\n    private _rootNode: any;\r\n\r\n    private _parentClass: any;\r\n\r\n    /**\r\n     * Create a new xml loader\r\n     * @param parentClass Sets the class context. Used when the loader is instanced inside a class and not in a global context\r\n     */\r\n    constructor(parentClass: any = null) {\r\n        if (parentClass) {\r\n            this._parentClass = parentClass;\r\n        }\r\n    }\r\n\r\n    private _getChainElement(attributeValue: any): any {\r\n        let element: any = window;\r\n\r\n        if (this._parentClass) {\r\n            element = this._parentClass;\r\n        }\r\n        let value = attributeValue;\r\n        value = value.split(\".\");\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            element = element[value[i]];\r\n        }\r\n        return element;\r\n    }\r\n\r\n    private _getClassAttribute(attributeName: string): any {\r\n        const attribute = attributeName.split(\".\");\r\n        const className = GetClass(\"BABYLON.GUI.\" + attribute[0]);\r\n        return className[attribute[1]];\r\n    }\r\n\r\n    private _createGuiElement(node: any, parent: any, linkParent: boolean = true): void {\r\n        try {\r\n            const className = GetClass(\"BABYLON.GUI.\" + node.nodeName);\r\n            const guiNode = new className();\r\n\r\n            if (parent && linkParent) {\r\n                parent.addControl(guiNode);\r\n            }\r\n\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                if (node.attributes[i].name.toLowerCase().includes(\"datasource\")) {\r\n                    continue;\r\n                }\r\n\r\n                if (node.attributes[i].name.toLowerCase().includes(\"observable\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value);\r\n                    guiNode[node.attributes[i].name].add(element);\r\n\r\n                    continue;\r\n                } else if (node.attributes[i].name == \"linkWithMesh\") {\r\n                    if (this._parentClass) {\r\n                        guiNode.linkWithMesh(this._parentClass[node.attributes[i].value]);\r\n                    } else {\r\n                        guiNode.linkWithMesh(window[node.attributes[i].value]);\r\n                    }\r\n                } else if (node.attributes[i].value.startsWith(\"{{\") && node.attributes[i].value.endsWith(\"}}\")) {\r\n                    const element = this._getChainElement(node.attributes[i].value.substring(2, node.attributes[i].value.length - 2));\r\n                    guiNode[node.attributes[i].name] = element;\r\n                } else if (!this._objectAttributes[node.attributes[i].name]) {\r\n                    if (node.attributes[i].value == \"true\" || node.attributes[i].value == \"false\") {\r\n                        guiNode[node.attributes[i].name] = node.attributes[i].value == \"true\";\r\n                    } else {\r\n                        guiNode[node.attributes[i].name] = !isNaN(Number(node.attributes[i].value)) ? Number(node.attributes[i].value) : node.attributes[i].value;\r\n                    }\r\n                } else {\r\n                    guiNode[node.attributes[i].name] = this._getClassAttribute(node.attributes[i].value);\r\n                }\r\n            }\r\n\r\n            if (!node.attributes.getNamedItem(\"id\")) {\r\n                this._nodes[node.nodeName + Object.keys(this._nodes).length + \"_gen\"] = guiNode;\r\n                return guiNode;\r\n            }\r\n\r\n            let id = node.attributes.getNamedItem(\"id\").value;\r\n            if (id.startsWith(\"{{\") && id.endsWith(\"}}\")) {\r\n                id = this._getChainElement(id.substring(2, id.length - 2));\r\n            }\r\n\r\n            if (!this._nodes[id]) {\r\n                this._nodes[id] = guiNode;\r\n            } else {\r\n                throw \"XmlLoader Exception : Duplicate ID, every element should have an unique ID attribute\";\r\n            }\r\n            return guiNode;\r\n        } catch (exception) {\r\n            throw \"XmlLoader Exception : Error parsing Control \" + node.nodeName + \",\" + exception + \".\";\r\n        }\r\n    }\r\n\r\n    private _parseGrid(node: any, guiNode: any, parent: any): void {\r\n        let width;\r\n        let height;\r\n        let columns;\r\n        const rows = node.children;\r\n        let cells;\r\n        let isPixel = false;\r\n        let cellNode;\r\n        let rowNumber = -1;\r\n        let columnNumber = -1;\r\n        let totalColumnsNumber = 0;\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            if (rows[i].nodeType != this._nodeTypes.element) {\r\n                continue;\r\n            }\r\n            if (rows[i].nodeName != \"Row\") {\r\n                throw \"XmlLoader Exception : Expecting Row node, received \" + rows[i].nodeName;\r\n            }\r\n            rowNumber += 1;\r\n            columns = rows[i].children;\r\n\r\n            if (!rows[i].attributes.getNamedItem(\"height\")) {\r\n                throw \"XmlLoader Exception : Height must be defined for grid rows\";\r\n            }\r\n            height = Number(rows[i].attributes.getNamedItem(\"height\").nodeValue);\r\n            isPixel = rows[i].attributes.getNamedItem(\"isPixel\") ? JSON.parse(rows[i].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n            guiNode.addRowDefinition(height, isPixel);\r\n\r\n            for (let j = 0; j < columns.length; j++) {\r\n                if (columns[j].nodeType != this._nodeTypes.element) {\r\n                    continue;\r\n                }\r\n                if (columns[j].nodeName != \"Column\") {\r\n                    throw \"XmlLoader Exception : Expecting Column node, received \" + columns[j].nodeName;\r\n                }\r\n                columnNumber += 1;\r\n                if (rowNumber > 0 && columnNumber > totalColumnsNumber) {\r\n                    throw \"XmlLoader Exception : In the Grid element, the number of columns is defined in the first row, do not add more columns in the subsequent rows.\";\r\n                }\r\n\r\n                if (rowNumber == 0) {\r\n                    if (!columns[j].attributes.getNamedItem(\"width\")) {\r\n                        throw \"XmlLoader Exception : Width must be defined for all the grid columns in the first row\";\r\n                    }\r\n                    width = Number(columns[j].attributes.getNamedItem(\"width\").nodeValue);\r\n                    isPixel = columns[j].attributes.getNamedItem(\"isPixel\") ? JSON.parse(columns[j].attributes.getNamedItem(\"isPixel\").nodeValue) : false;\r\n                    guiNode.addColumnDefinition(width, isPixel);\r\n                }\r\n\r\n                cells = columns[j].children;\r\n\r\n                for (let k = 0; k < cells.length; k++) {\r\n                    if (cells[k].nodeType != this._nodeTypes.element) {\r\n                        continue;\r\n                    }\r\n                    cellNode = this._createGuiElement(cells[k], guiNode, false);\r\n                    guiNode.addControl(cellNode, rowNumber, columnNumber);\r\n                    if (cells[k].firstChild) {\r\n                        this._parseXml(cells[k].firstChild, cellNode);\r\n                    }\r\n                }\r\n            }\r\n            if (rowNumber == 0) {\r\n                totalColumnsNumber = columnNumber;\r\n            }\r\n            columnNumber = -1;\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _parseElement(node: any, guiNode: any, parent: any): void {\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode);\r\n        }\r\n\r\n        if (node.nextSibling) {\r\n            this._parseXml(node.nextSibling, parent);\r\n        }\r\n    }\r\n\r\n    private _prepareSourceElement(node: any, guiNode: any, variable: any, source: any, iterator: any): void {\r\n        if (this._parentClass) {\r\n            this._parentClass[variable] = source[iterator];\r\n        } else {\r\n            window[variable] = source[iterator];\r\n        }\r\n\r\n        if (node.firstChild) {\r\n            this._parseXml(node.firstChild, guiNode, true);\r\n        }\r\n    }\r\n\r\n    private _parseElementsFromSource(node: any, guiNode: any, parent: any): void {\r\n        const dataSource = node.attributes.getNamedItem(\"dataSource\").value;\r\n\r\n        if (!dataSource.includes(\" in \")) {\r\n            throw \"XmlLoader Exception : Malformed XML, Data Source must include an in\";\r\n        } else {\r\n            let isArray = true;\r\n            const splittedSource = dataSource.split(\" in \");\r\n            if (splittedSource.length < 2) {\r\n                throw \"XmlLoader Exception : Malformed XML, Data Source must have an iterator and a source\";\r\n            }\r\n            let source = splittedSource[1];\r\n            if (source.startsWith(\"{\") && source.endsWith(\"}\")) {\r\n                isArray = false;\r\n            }\r\n\r\n            if (!isArray || (source.startsWith(\"[\") && source.endsWith(\"]\"))) {\r\n                source = source.substring(1, source.length - 1);\r\n            }\r\n\r\n            if (this._parentClass) {\r\n                source = this._parentClass[source];\r\n            } else {\r\n                source = window[source];\r\n            }\r\n\r\n            if (isArray) {\r\n                for (let i = 0; i < source.length; i++) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            } else {\r\n                for (const i in source) {\r\n                    this._prepareSourceElement(node, guiNode, splittedSource[0], source, i);\r\n                }\r\n            }\r\n\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _parseXml(node: any, parent: any, generated: boolean = false): void {\r\n        if (node.nodeType != this._nodeTypes.element) {\r\n            if (node.nextSibling) {\r\n                this._parseXml(node.nextSibling, parent, generated);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (generated) {\r\n            node.setAttribute(\"id\", parent.id + (parent._children.length + 1));\r\n        }\r\n\r\n        const guiNode = this._createGuiElement(node, parent);\r\n\r\n        if (!this._rootNode) {\r\n            this._rootNode = guiNode;\r\n        }\r\n\r\n        if (node.nodeName == \"Grid\") {\r\n            this._parseGrid(node, guiNode, parent);\r\n        } else if (!node.attributes.getNamedItem(\"dataSource\")) {\r\n            this._parseElement(node, guiNode, parent);\r\n        } else {\r\n            this._parseElementsFromSource(node, guiNode, parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the loading has finished.\r\n     * @returns whether the loading has finished or not\r\n     */\r\n    public isLoaded(): boolean {\r\n        return this._isLoaded;\r\n    }\r\n\r\n    /**\r\n     * Gets a loaded node / control by id.\r\n     * @param id the Controls id set in the xml\r\n     * @returns element of type Control\r\n     */\r\n    public getNodeById(id: string): any {\r\n        return this._nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Gets all loaded nodes / controls\r\n     * @returns Array of controls\r\n     */\r\n    public getNodes(): any {\r\n        return this._nodes;\r\n    }\r\n    /**\r\n     * Disposes the loaded layout\r\n     */\r\n    public dispose(): void {\r\n        if (this._rootNode) {\r\n            this._rootNode.dispose();\r\n            this._rootNode = null;\r\n            this._nodes = {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates the xml layout loading\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @param onSuccess defines the callback called on layout load successfully.\r\n     * @param onError defines the callback called on layout load failure.\r\n     */\r\n    public loadLayout(xmlFile: any, rootNode: any, onSuccess: Nullable<() => void> = null, onError: Nullable<(error: string) => void> = null): void {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onload = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                if (!xhttp.responseXML) {\r\n                    if (onError) {\r\n                        onError(XmlLoaderError);\r\n                        return;\r\n                    } else {\r\n                        throw XmlLoaderError;\r\n                    }\r\n                }\r\n\r\n                const xmlDoc = xhttp.responseXML.documentElement;\r\n                this._parseXml(xmlDoc.firstChild, rootNode);\r\n                this._isLoaded = true;\r\n\r\n                if (onSuccess) {\r\n                    onSuccess();\r\n                }\r\n            }\r\n        };\r\n\r\n        xhttp.onerror = function () {\r\n            if (onError) {\r\n                onError(\"an error occurred during loading the layout\");\r\n            }\r\n        };\r\n\r\n        xhttp.open(\"GET\", xmlFile, true);\r\n        xhttp.send();\r\n    }\r\n    /**\r\n     * Initiates the xml layout loading asynchronously\r\n     * @param xmlFile defines the xml layout to load\r\n     * @param rootNode defines the node / control to use as a parent for the loaded layout controls.\r\n     * @returns Promise\r\n     */\r\n    public async loadLayoutAsync(xmlFile: any, rootNode: any): Promise<any> {\r\n        return new Promise((resolve: any, reject: any) => {\r\n            this.loadLayout(xmlFile, rootNode, resolve, reject);\r\n        });\r\n    }\r\n}\r\n", "/* eslint-disable import/no-internal-modules */\r\nexport * from \"./controls/index\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./adtInstrumentation\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";\r\nexport * from \"./xmlLoader\";\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAMa;AANb;;;AAMM,IAAO,eAAP,MAAO,cAAY;;;;;;;MAsBrB,YACI,OAEA,OAAO,cAAa,gBAEb,uBAAuB,MAAI;AAA3B,aAAA,uBAAA;AA1BH,aAAA,SAAS;AACT,aAAA,QAAQ,cAAa;AAOtB,aAAA,wBAAwB;AAKxB,aAAA,sBAAsB,IAAI,WAAU;AAevC,aAAK,SAAS;AACd,aAAK,QAAQ;AACb,aAAK,gBAAgB;MACzB;;MAGA,IAAW,eAAY;AACnB,eAAO,KAAK,UAAU,cAAa;MACvC;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK,UAAU,cAAa;MACvC;;;;;MAMA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;;MAGA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;MAGA,IAAW,MAAM,OAAa;AAC1B,YAAI,UAAU,KAAK,QAAQ;AACvB,eAAK,SAAS;AACd,eAAK,oBAAoB,gBAAe;;MAEhD;;MAGA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAK,OAAa;AACzB,YAAI,UAAU,KAAK,OAAO;AACtB,eAAK,QAAQ;AACb,eAAK,oBAAoB,gBAAe;;MAEhD;;;;;;;MAQO,gBAAgB,MAA8B,UAAgB;AACjE,YAAI,KAAK,SAAS;AACd,iBAAO,KAAK,SAAS,IAAI;;AAG7B,eAAO,KAAK,SAAS,IAAI,IAAI;MACjC;;;;;;;MAQO,cAAc,OAAe,OAAO,cAAa,gBAAc;AAClE,YAAI,KAAK,UAAU,SAAS,KAAK,SAAS,MAAM;AAE5C,eAAK,SAAS;AACd,eAAK,QAAQ;AACb,eAAK,oBAAoB,gBAAe;;AAG5C,eAAO;MACX;;;;;;MAOO,SAAS,MAA4B;AACxC,YAAI,QAAQ,CAAC,KAAK,yBAAyB,KAAK,SAAS,cAAa,qBAAqB;AACvF,cAAI,QAAgB;AACpB,cAAI,SAAiB;AAErB,cAAI,KAAK,YAAY;AACjB,oBAAQ,KAAK,KAAM,KAAK,SAAS,KAAK,QAAO,EAAG,QAAS,KAAK,UAAU;;AAG5E,cAAI,KAAK,aAAa;AAClB,qBAAS,KAAK,KAAM,KAAK,SAAS,KAAK,QAAO,EAAG,SAAU,KAAK,WAAW;;AAG/E,cAAI,KAAK,oBAAoB,KAAK,cAAc,KAAK,aAAa;AAC9D,mBAAO,OAAO,aAAa,OAAO,cAAc,QAAQ;;AAG5D,cAAI,KAAK,YAAY;AAEjB,mBAAO;;AAGX,cAAI,KAAK,aAAa;AAElB,mBAAO;;;AAGf,eAAO,KAAK;MAChB;;;;;;;MAQO,SAAS,MAA8B,UAAiB;AAC3D,gBAAQ,KAAK,OAAO;UAChB,KAAK,cAAa,qBAAqB;AACnC,kBAAM,aAAa,KAAK,SAAS,IAAI,IAAI;AACzC,oBAAQ,WAAW,WAAW,QAAQ,QAAQ,IAAI,cAAc;;UAEpE,KAAK,cAAa,gBAAgB;AAC9B,kBAAM,SAAS,KAAK,SAAS,IAAI;AACjC,oBAAQ,WAAW,OAAO,QAAQ,QAAQ,IAAI,UAAU;;;AAIhE,eAAO,KAAK,MAAM,SAAQ;MAC9B;;;;;;MAOO,WAAW,QAAuB;AACrC,cAAM,QAAQ,cAAa,OAAO,KAAK,OAAO,SAAQ,CAAE;AAExD,YAAI,CAAC,SAAS,MAAM,WAAW,GAAG;AAC9B,iBAAO;;AAGX,YAAI,cAAc,WAAW,MAAM,CAAC,CAAC;AACrC,YAAI,aAAa,KAAK;AAEtB,YAAI,CAAC,KAAK,sBAAsB;AAC5B,cAAI,cAAc,GAAG;AACjB,0BAAc;;;AAItB,YAAI,MAAM,WAAW,GAAG;AACpB,kBAAQ,MAAM,CAAC,GAAG;YACd,KAAK;AACD,2BAAa,cAAa;AAC1B;YACJ,KAAK;AACD,2BAAa,cAAa;AAC1B,6BAAe;AACf;;;AAIZ,YAAI,gBAAgB,KAAK,UAAU,eAAe,KAAK,OAAO;AAC1D,iBAAO;;AAGX,aAAK,SAAS;AACd,aAAK,QAAQ;AACb,aAAK,oBAAoB,gBAAe;AAExC,eAAO;MACX;;MAQO,WAAW,sBAAmB;AACjC,eAAO,cAAa;MACxB;;MAGO,WAAW,iBAAc;AAC5B,eAAO,cAAa;MACxB;;AAZe,iBAAA,SAAS;AACT,iBAAA,uBAAuB;AACvB,iBAAA,kBAAkB;;;;;ACzNrC,IAEM,SAEA,UAEA,OACA,OAKO;AAZb;;;AAEA,IAAM,UAAU,CAAC,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC;AAE3F,IAAM,WAAW,CAAC,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC;AAE5F,IAAM,QAAQ,IAAI,QAAQ,GAAG,CAAC;AAC9B,IAAM,QAAQ,IAAI,QAAQ,GAAG,CAAC;AAKxB,IAAO,UAAP,MAAO,SAAO;;;;;;;;MAQhB,YAEW,MAEA,KAEA,OAEA,QAAc;AANd,aAAA,OAAA;AAEA,aAAA,MAAA;AAEA,aAAA,QAAA;AAEA,aAAA,SAAA;MACR;;;;;MAMI,SAAS,OAAc;AAC1B,aAAK,OAAO,MAAM;AAClB,aAAK,MAAM,MAAM;AACjB,aAAK,QAAQ,MAAM;AACnB,aAAK,SAAS,MAAM;MACxB;;;;;;;;MASO,eAAe,MAAc,KAAa,OAAe,QAAc;AAC1E,aAAK,OAAO;AACZ,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,SAAS;MAClB;;;;;;;MAQO,OAAO,aAAa,GAAY,GAAY,QAAe;AAC9D,cAAM,OAAO,KAAK,IAAI,EAAE,MAAM,EAAE,IAAI;AACpC,cAAM,MAAM,KAAK,IAAI,EAAE,KAAK,EAAE,GAAG;AACjC,cAAM,QAAQ,KAAK,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK;AACzD,cAAM,SAAS,KAAK,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM;AAC1D,eAAO,OAAO;AACd,eAAO,MAAM;AACb,eAAO,QAAQ,QAAQ;AACvB,eAAO,SAAS,SAAS;MAC7B;;;;;;;;;;MAWO,qBAAqB,WAAqB,MAAc,MAAc,UAAkB,WAAmB,QAAe;AAC7H,cAAM,OAAO,KAAK,OAAO;AACzB,cAAM,MAAM,KAAK,MAAM;AACvB,cAAM,QAAQ,KAAK,QAAQ;AAC3B,cAAM,SAAS,KAAK,SAAS;AAE7B,gBAAQ,CAAC,EAAE,eAAe,MAAM,GAAG;AACnC,gBAAQ,CAAC,EAAE,eAAe,OAAO,OAAO,GAAG;AAC3C,gBAAQ,CAAC,EAAE,eAAe,OAAO,OAAO,MAAM,MAAM;AACpD,gBAAQ,CAAC,EAAE,eAAe,MAAM,MAAM,MAAM;AAE5C,cAAM,eAAe,OAAO,WAAW,OAAO,SAAS;AACvD,cAAM,eAAe,GAAG,CAAC;AACzB,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,oBAAU,qBAAqB,QAAQ,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,SAAS,CAAC,CAAC;AACtE,gBAAM,IAAI,KAAK,MAAM,KAAK,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;AACrD,gBAAM,IAAI,KAAK,MAAM,KAAK,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;AACrD,gBAAM,IAAI,KAAK,KAAK,KAAK,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;AACpD,gBAAM,IAAI,KAAK,KAAK,KAAK,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;;AAExD,eAAO,OAAO,MAAM;AACpB,eAAO,MAAM,MAAM;AACnB,eAAO,QAAQ,MAAM,IAAI,MAAM;AAC/B,eAAO,SAAS,MAAM,IAAI,MAAM;MACpC;;;;;;MAOO,eAAe,WAAqB,QAAe;AACtD,aAAK,qBAAqB,WAAW,GAAG,GAAG,GAAG,GAAG,MAAM;MAC3D;;;;;;MAMO,WAAW,OAAc;AAC5B,YAAI,KAAK,SAAS,MAAM,MAAM;AAC1B,iBAAO;;AAGX,YAAI,KAAK,QAAQ,MAAM,KAAK;AACxB,iBAAO;;AAGX,YAAI,KAAK,UAAU,MAAM,OAAO;AAC5B,iBAAO;;AAGX,YAAI,KAAK,WAAW,MAAM,QAAQ;AAC9B,iBAAO;;AAGX,eAAO;MACX;;;;;MAMO,OAAO,QAAK;AACf,eAAO,IAAI,SAAQ,GAAG,GAAG,GAAG,CAAC;MACjC;;;;;;ACnJJ,IAMa,iBAgBA,UAgOA;AAtPb;;;AACA;AAKM,IAAO,kBAAP,cAA+B,QAAO;;;;;;MAMxC,YACI,QAEO,cAAsB,GAAC;AAE9B,cAAM,OAAO,GAAG,OAAO,CAAC;AAFjB,aAAA,cAAA;MAGX;;AAIE,IAAO,WAAP,MAAO,UAAQ;;;;;;;;;;MAajB,YAAY,KAAa,KAAa,KAAa,KAAa,KAAa,KAAW;AAXjF,aAAA,IAAI,IAAI,aAAa,CAAC;AAYzB,aAAK,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;MAChD;;;;;;;;;;;MAYO,WAAW,KAAa,KAAa,KAAa,KAAa,KAAa,KAAW;AAC1F,aAAK,EAAE,CAAC,IAAI;AACZ,aAAK,EAAE,CAAC,IAAI;AACZ,aAAK,EAAE,CAAC,IAAI;AACZ,aAAK,EAAE,CAAC,IAAI;AACZ,aAAK,EAAE,CAAC,IAAI;AACZ,aAAK,EAAE,CAAC,IAAI;AACZ,eAAO;MACX;;;;;MAMO,cAAW;AACd,eAAO,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;MACvD;;;;;;MAOO,YAAY,QAAgB;AAC/B,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AAEnB,cAAM,MAAM,KAAK,YAAW;AAC5B,YAAI,MAAM,UAAU,SAAS;AACzB,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO,EAAE,CAAC,IAAI;AACd,iBAAO;;AAGX,cAAM,SAAS,IAAI;AAEnB,cAAM,OAAO,KAAK,KAAK,KAAK;AAC5B,cAAM,OAAO,KAAK,KAAK,KAAK;AAE5B,eAAO,EAAE,CAAC,IAAI,KAAK;AACnB,eAAO,EAAE,CAAC,IAAI,CAAC,KAAK;AACpB,eAAO,EAAE,CAAC,IAAI,CAAC,KAAK;AACpB,eAAO,EAAE,CAAC,IAAI,KAAK;AACnB,eAAO,EAAE,CAAC,IAAI,OAAO;AACrB,eAAO,EAAE,CAAC,IAAI,OAAO;AAErB,eAAO;MACX;;;;;;;MAQO,cAAc,OAAiB,QAAgB;AAClD,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AACnB,cAAM,KAAK,KAAK,EAAE,CAAC;AAEnB,cAAM,KAAK,MAAM,EAAE,CAAC;AACpB,cAAM,KAAK,MAAM,EAAE,CAAC;AACpB,cAAM,KAAK,MAAM,EAAE,CAAC;AACpB,cAAM,KAAK,MAAM,EAAE,CAAC;AACpB,cAAM,KAAK,MAAM,EAAE,CAAC;AACpB,cAAM,KAAK,MAAM,EAAE,CAAC;AAEpB,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK;AAC7B,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK;AAC7B,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK;AAC7B,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK;AAC7B,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAClC,eAAO,EAAE,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAElC,eAAO;MACX;;;;;;;;MASO,qBAAqB,GAAW,GAAW,QAAe;AAC7D,eAAO,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;AACnD,eAAO,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;AAEnD,eAAO;MACX;;;;;;MAOO,OAAO,WAAQ;AAClB,eAAO,IAAI,UAAS,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;MACxC;;;;;MAMO,OAAO,cAAc,QAAgB;AACxC,eAAO,EAAE,CAAC,IAAI;AACd,eAAO,EAAE,CAAC,IAAI;AACd,eAAO,EAAE,CAAC,IAAI;AACd,eAAO,EAAE,CAAC,IAAI;AACd,eAAO,EAAE,CAAC,IAAI;AACd,eAAO,EAAE,CAAC,IAAI;MAClB;;;;;;;MAQO,OAAO,iBAAiB,GAAW,GAAW,QAAgB;AACjE,eAAO,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;MACtC;;;;;;;MAQO,OAAO,aAAa,GAAW,GAAW,QAAgB;AAC7D,eAAO,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;MACtC;;;;;;MAOO,OAAO,cAAc,OAAe,QAAgB;AACvD,cAAM,IAAI,KAAK,IAAI,KAAK;AACxB,cAAM,IAAI,KAAK,IAAI,KAAK;AAExB,eAAO,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;MACvC;;;;;;;;;;;MAoBO,OAAO,aAAa,IAAY,IAAY,OAAe,QAAgB,QAAgB,cAAkC,QAAgB;AAChJ,kBAAS,iBAAiB,IAAI,IAAI,UAAS,yBAAyB;AAEpE,kBAAS,aAAa,QAAQ,QAAQ,UAAS,kBAAkB;AAEjE,kBAAS,cAAc,OAAO,UAAS,mBAAmB;AAE1D,kBAAS,iBAAiB,CAAC,IAAI,CAAC,IAAI,UAAS,0BAA0B;AAEvE,kBAAS,0BAA0B,cAAc,UAAS,oBAAoB,UAAS,aAAa;AACpG,kBAAS,cAAc,cAAc,UAAS,qBAAqB,UAAS,aAAa;AACzF,YAAI,cAAc;AACd,oBAAS,cAAc,cAAc,UAAS,4BAA4B,UAAS,aAAa;AAChG,oBAAS,cAAc,cAAc,cAAc,MAAM;eACtD;AACH,oBAAS,cAAc,cAAc,UAAS,4BAA4B,MAAM;;MAExF;;AAnCe,aAAA,4BAA4B,SAAS,SAAQ;AAC7C,aAAA,6BAA6B,SAAS,SAAQ;AAC9C,aAAA,sBAAsB,SAAS,SAAQ;AACvC,aAAA,qBAAqB,SAAS,SAAQ;AACtC,aAAA,gBAAgB,SAAS,SAAQ;AACjC,aAAA,gBAAgB,SAAS,SAAQ;AACjC,aAAA,gBAAgB,SAAS,SAAQ;AAmC9C,IAAO,YAAP,MAAO,WAAS;;;;;;;MAeX,OAAO,MAAM,OAAe,YAAoB,WAAU,0BAAwB;AACrF,eAAO,KAAK,MAAM,QAAQ,SAAS,IAAI;MAC3C;;AAVc,cAAA,2BAA2B;;;;;IC7NhC;;;;AA7Bb;AACA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAWM,IAAO,UAAP,MAAO,SAAO;;;;;MA+GhB,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAc;AAChC,aAAK,cAAc;MACvB;;;;MAKA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;;;;;MA6BA,IAAW,aAAa,OAAc;AAClC,aAAK,gBAAgB;MACzB;MAGA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,YAAY,OAAc;AACjC,aAAK,eAAe;MACxB;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;MAaA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,aAAK,aAAY;MACrB;;MAKA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,aAAK,aAAY;MACrB;;MAMA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,sBAAsB,KAAK;AAEhC,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;;MAcA,IAAW,WAAQ;AACf,eAAO,KAAK,aAAY;MAC5B;;;;;MAMO,eAAY;AACf,eAAO,KAAK,aAAY;MAC5B;;;;;MAMA,IAAW,iBAAiB,OAAkC;AAC1D,aAAK,oBAAoB;AACzB,aAAK,oCAAoC,gBAAgB,KAAK;MAClE;MAEA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;;;;MAoEA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,QAA2D;AAC7E,aAAK,cAAc;MACvB;;MAIA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MAEA,IAAW,MAAM,OAAa;AAC1B,YAAI,KAAK,WAAW,OAAO;AACvB;;AAEJ,aAAK,YAAY;AACjB,aAAK,SAAS;AACd,aAAK,aAAY;MACrB;;;;MAKA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAa;AACvC,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAGJ,aAAK,sBAAsB;AAC3B,aAAK,aAAY;MACrB;;;;MAKA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAc;AACnC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AACvB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;MAEA,IAAW,OAAO,OAAa;AAC3B,YAAI,KAAK,YAAY,OAAO;AACxB;;AAGJ,aAAK,UAAU;AACf,aAAK,aAAY;AACjB,aAAK,mBAAkB;MAC3B;;;;MAMA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;MAEA,IAAW,OAAO,OAAa;AAC3B,YAAI,KAAK,YAAY,OAAO;AACxB;;AAGJ,aAAK,UAAU;AACf,aAAK,aAAY;AACjB,aAAK,mBAAkB;MAC3B;;;;MAMA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAa;AAC7B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AACjB,aAAK,aAAY;AACjB,aAAK,mBAAkB;MAC3B;;;;MAMA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;AACjB,aAAK,mBAAkB;MAC3B;;;;MAMA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;AACjB,aAAK,mBAAkB;MAC3B;;;;;MAOA,IAAW,sBAAmB;AAC1B,eAAO,KAAK;MAChB;MAEA,IAAW,oBAAoB,OAAa;AACxC,YAAI,KAAK,yBAAyB,OAAO;AACrC;;AAGJ,aAAK,uBAAuB;AAC5B,aAAK,aAAY;MACrB;;;;;MAOA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;MAGA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;;;;;;MASA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAGA,IAAI,wBAAwB,OAAc;AACtC,YAAI,KAAK,6BAA6B,OAAO;AACzC;;AAEJ,aAAK,2BAA2B;AAChC,aAAK,aAAY;MACrB;;;;;MAOA,IAAI,0BAAuB;AACvB,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,QAAK;AACZ,eAAO,KAAK,OAAO,SAAS,KAAK,KAAK;MAC1C;MAEA,IAAW,MAAM,OAAsB;AACnC,aAAK,2BAA2B;AAEhC,YAAI,KAAK,OAAO,SAAS,KAAK,KAAK,MAAM,OAAO;AAC5C;;AAGJ,YAAI,KAAK,OAAO,WAAW,KAAK,GAAG;AAC/B,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,gBAAa;AACpB,eAAO,KAAK,OAAO,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MAClF;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,2BAA2B;AAChC,aAAK,QAAQ,QAAQ;MACzB;;;;;MAOA,IAAW,SAAM;AACb,eAAO,KAAK,QAAQ,SAAS,KAAK,KAAK;MAC3C;MAEA,IAAW,OAAO,OAAsB;AACpC,aAAK,2BAA2B;AAEhC,YAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,OAAO;AAC7C;;AAGJ,YAAI,KAAK,QAAQ,WAAW,KAAK,GAAG;AAChC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,iBAAc;AACrB,eAAO,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MACpF;MAEA,IAAW,eAAe,OAAa;AACnC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,2BAA2B;AAChC,aAAK,SAAS,QAAQ;MAC1B;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,gBAAe;MACxB;;MAGA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,gBAAe;MACxB;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,gBAAe;MACxB;;;;;MAOA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MAEA,IAAW,MAAM,OAAsB;AACnC,YAAI,KAAK,QAAQ;AACb,eAAK,OAAO,oBAAoB,OAAO,KAAK,cAAc;AAC1D,eAAK,iBAAiB;;AAG1B,aAAK,SAAS;AAEd,YAAI,KAAK,QAAQ;AACb,eAAK,iBAAiB,KAAK,OAAO,oBAAoB,IAAI,MAAK;AAC3D,iBAAK,aAAY;AACjB,iBAAK,gBAAe;UACxB,CAAC;;AAGL,aAAK,aAAY;AACjB,aAAK,gBAAe;MACxB;;MAGA,IAAW,0BAAuB;AAC9B,eAAO,KAAK,UAAU;MAC1B;;MAGA,IAAW,mBAAgB;AACvB,cAAM,gBAAgB,KAAK,SAAS,KAAK,OAAO,YAAY,KAAK;AAEjE,YAAI,cAAc,SAAS;AACvB,iBAAO,cAAc,SAAS,KAAK,KAAK;;AAG5C,eAAO,cAAc,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,UAAU,KAAK,qBAAqB,MAAM;MACvH;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,WAAW,QAAQ;MAC5B;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK,UAAU,SAAS,KAAK,KAAK;MAC7C;MAEA,IAAW,SAAS,OAAsB;AACtC,YAAI,KAAK,UAAU,SAAS,KAAK,KAAK,MAAM,OAAO;AAC/C;;AAGJ,YAAI,KAAK,UAAU,WAAW,KAAK,GAAG;AAClC,eAAK,aAAY;AACjB,eAAK,gBAAe;;MAE5B;;MAIA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MAEA,IAAW,MAAM,OAAa;AAC1B,YAAI,KAAK,WAAW,OAAO;AACvB;;AAGJ,aAAK,SAAS;AACd,aAAK,aAAY;MACrB;;MAIA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAA6B;AAC7C,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AACjB,aAAK,aAAY;MACrB;;MAIA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;MAEA,IAAW,OAAO,OAAa;AAC3B,YAAI,KAAK,WAAW,OAAO;AACvB;;AAGJ,aAAK,UAAU;AAEf,YAAI,KAAK,QAAQ;AACb,eAAK,OAAO,gBAAgB,IAAI;;MAExC;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAc;AACnC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAa,IAAI;AAEtB,aAAK,6BAA6B,gBAAgB,KAAK;MAC3D;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,yBAAsB;AAC7B,eAAO,KAAK;MAChB;MAEA,IAAW,uBAAuB,OAAc;AAC5C,YAAI,KAAK,4BAA4B,OAAO;AACxC;;AAGJ,aAAK,0BAA0B;AAC/B,aAAK,aAAY;MACrB;;;;;MAOA,IAAW,cAAW;AAClB,eAAO,KAAK,aAAa,SAAS,KAAK,KAAK;MAChD;MAEA,IAAW,YAAY,OAAsB;AACzC,YAAI,KAAK,aAAa,WAAW,KAAK,GAAG;AACrC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,sBAAmB;AAC1B,eAAO,KAAK,aAAa,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACxF;MAEA,IAAW,oBAAoB,OAAa;AACxC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,cAAc,QAAQ;MAC/B;;MAGA,IAAW,uBAAoB;AAC3B,YAAI,KAAK,yBAAyB;AAC9B,iBAAO;;AAGX,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,eAAY;AACnB,eAAO,KAAK,cAAc,SAAS,KAAK,KAAK;MACjD;MAEA,IAAW,aAAa,OAAsB;AAC1C,YAAI,KAAK,cAAc,WAAW,KAAK,GAAG;AACtC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,uBAAoB;AAC3B,eAAO,KAAK,cAAc,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACzF;MAEA,IAAW,qBAAqB,OAAa;AACzC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,eAAe,QAAQ;MAChC;;MAGA,IAAW,wBAAqB;AAC5B,YAAI,KAAK,yBAAyB;AAC9B,iBAAO;;AAGX,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,aAAU;AACjB,eAAO,KAAK,YAAY,SAAS,KAAK,KAAK;MAC/C;MAEA,IAAW,WAAW,OAAsB;AACxC,YAAI,KAAK,YAAY,WAAW,KAAK,GAAG;AACpC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,qBAAkB;AACzB,eAAO,KAAK,YAAY,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MACxF;MAEA,IAAW,mBAAmB,OAAa;AACvC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,aAAa,QAAQ;MAC9B;;MAGA,IAAW,sBAAmB;AAC1B,YAAI,KAAK,yBAAyB;AAC9B,iBAAO;;AAGX,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,gBAAa;AACpB,eAAO,KAAK,eAAe,SAAS,KAAK,KAAK;MAClD;MAEA,IAAW,cAAc,OAAsB;AAC3C,YAAI,KAAK,eAAe,WAAW,KAAK,GAAG;AACvC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,wBAAqB;AAC5B,eAAO,KAAK,eAAe,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MAC3F;MAEA,IAAW,sBAAsB,OAAa;AAC1C,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,gBAAgB,QAAQ;MACjC;;MAGA,IAAW,yBAAsB;AAC7B,YAAI,KAAK,yBAAyB;AAC9B,iBAAO;;AAGX,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,OAAI;AACX,eAAO,KAAK,MAAM,SAAS,KAAK,KAAK;MACzC;MAEA,IAAW,KAAK,OAAsB;AAClC,YAAI,KAAK,MAAM,WAAW,KAAK,GAAG;AAC9B,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,eAAY;AACnB,eAAO,KAAK,MAAM,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACjF;MAEA,IAAW,aAAa,OAAa;AACjC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,OAAO,QAAQ;MACxB;;;;;MAOA,IAAW,MAAG;AACV,eAAO,KAAK,KAAK,SAAS,KAAK,KAAK;MACxC;MAEA,IAAW,IAAI,OAAsB;AACjC,YAAI,KAAK,KAAK,WAAW,KAAK,GAAG;AAC7B,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK,KAAK,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MACjF;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,MAAM,QAAQ;MACvB;;;;;MAOA,IAAW,cAAW;AAClB,eAAO,KAAK,aAAa,SAAS,KAAK,KAAK;MAChD;MAEA,IAAW,YAAY,OAAsB;AACzC,YAAI,KAAK,aAAa,WAAW,KAAK,GAAG;AACrC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,sBAAmB;AAC1B,eAAO,KAAK,aAAa,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACxF;MAEA,IAAW,oBAAoB,OAAa;AACxC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,cAAc,QAAQ;MAC/B;;;;;MAOA,IAAW,cAAW;AAClB,eAAO,KAAK,aAAa,SAAS,KAAK,KAAK;MAChD;MAEA,IAAW,YAAY,OAAsB;AACzC,YAAI,KAAK,aAAa,WAAW,KAAK,GAAG;AACrC,eAAK,aAAY;;MAEzB;;;;;MAMA,IAAW,sBAAmB;AAC1B,eAAO,KAAK,aAAa,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MACzF;MAEA,IAAW,oBAAoB,OAAa;AACxC,YAAI,MAAM,KAAK,GAAG;AACd;;AAEJ,aAAK,cAAc,QAAQ;MAC/B;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ;MACpE;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS;MACpE;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;AAEjB,cAAM,4BAA4B,CAAC,YAAoB;AACnD,cAAI,CAAC,QAAQ,MAAM;AACf;;AAEJ,qBAAW,WAAW,QAAQ,KAAK,kBAAkB;AACjD,gBAAI,YAAY,KAAK,KAAK,iBAAiB,OAAO,GAAG;AACjD,sBAAQ,cAAc,SAAS,MAAM,IAAI;AACzC,qBAAO,QAAQ,KAAK,iBAAiB,OAAO;;;AAGpD,cAAK,QAAsB,aAAa,QAAW;AAC9C,oBAAsB,SAAS,QAAQ,yBAAyB;;QAEzE;AACA,kCAA0B,IAAI;MAClC;;MAGA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,aAAK,aAAY;MACrB;;MAGA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;;;;;;MA2BA,YAEWA,OAAa;AAAb,aAAA,OAAAA;AAvuCH,aAAA,SAAS;AACT,aAAA,YAAY;AACZ,aAAA,UAAU;AAMX,aAAA,kBAAkB,QAAQ,MAAK;AAE/B,aAAA,sBAAsB,QAAQ,MAAK;AAClC,aAAA,cAAc;AACd,aAAA,aAAa;AACb,aAAA,cAAc;AACd,aAAA,YAAY,IAAI,aAAa,IAAI,aAAa,gBAAgB,KAAK;AAGpE,aAAA,SAAS,IAAI,aAAa,GAAG,aAAa,qBAAqB,KAAK;AAEpE,aAAA,UAAU,IAAI,aAAa,GAAG,aAAa,qBAAqB,KAAK;AAGpE,aAAA,SAAS;AACT,aAAA,SAA0B;AAGxB,aAAA,uBAAuB,SAAQ;AAE/B,aAAA,qBAAqB,SAAQ;AAE7B,aAAA,WAAW;AAEX,aAAA,YAAY;AAEf,aAAA,qBAAqB,QAAQ,MAAK;AAElC,aAAA,gDAAgD,QAAQ,MAAK;AAE7D,aAAA,uBAAuB,QAAQ,MAAK;AACnC,aAAA,0BAA0B;AAC1B,aAAA,eAAe,IAAI,aAAa,CAAC;AACjC,aAAA,gBAAgB,IAAI,aAAa,CAAC;AAClC,aAAA,cAAc,IAAI,aAAa,CAAC;AAChC,aAAA,iBAAiB,IAAI,aAAa,CAAC;AAEpC,aAAA,QAAQ,IAAI,aAAa,CAAC;AAE1B,aAAA,OAAO,IAAI,aAAa,CAAC;AACxB,aAAA,UAAU;AACV,aAAA,UAAU;AACV,aAAA,YAAY;AACZ,aAAA,oBAAoB;AACpB,aAAA,oBAAoB;AAErB,aAAA,mBAAmB,SAAS,SAAQ;AAEjC,aAAA,yBAAyB,SAAS,SAAQ;AAE1C,aAAA,uBAAuB,QAAQ,KAAI;AACrC,aAAA,iBAAiB;AAGjB,aAAA,aAAa;AACb,aAAA,iBAAiB;AACjB,aAAA,kBAAkB;AAChB,aAAA,sBAAsB;AAGxB,aAAA,WAAW;AACX,aAAA,gBAAgB,QAAQ,KAAI;AAC5B,aAAA,aAAa;AACb,aAAA,cAAc;AACd,aAAA,eAAe;AACf,aAAA,kBAA6C,CAAA;AAC7C,aAAA,oBAAoB,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AAC1C,aAAA,0BAA0B,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AAC9C,aAAA,aAAa;AACb,aAAA,iBAAiB;AACjB,aAAA,qBAAqB;AACrB,aAAA,cAAc;AAChB,aAAA,YAAoC;AAElC,aAAA,iBAAiB;AAGpB,aAAA,cAAmB,CAAA;AAGnB,aAAA,aAAa;AAGb,aAAA,iBAAiB;AAiCjB,aAAA,WAAgB;AAIhB,aAAA,mBAAmB;AASnB,aAAA,mBAAmB;AAGnB,aAAA,mBAAmB;AAEhB,aAAA,gBAAgB;AAchB,aAAA,eAAe;AAkBlB,aAAA,iBAAiB;AAIhB,aAAA,iBAAiB;AAgBjB,aAAA,iBAAiB;AAgBjB,aAAA,cAAc;AACd,aAAA,sBAAsB;AAkBtB,aAAA,eAAe;AAkBhB,aAAA,cAAc;AAGX,aAAA,eAAe,IAAI,aAAa,CAAC;AAEjC,aAAA,eAAe,IAAI,aAAa,CAAC;AA8BjC,aAAA,oBAAiD;AAEpD,aAAA,sCAAsC,IAAI,WAAU;AAKpD,aAAA,oBAAoB,IAAI,WAAU;AAIlC,aAAA,0BAA0B,IAAI,WAAU;AAKxC,aAAA,yBAAyB,IAAI,WAAU;AAKvC,aAAA,0BAA0B,IAAI,WAAU;AAKxC,aAAA,wBAAwB,IAAI,WAAU;AAKtC,aAAA,2BAA2B,IAAI,WAAU;AAKzC,aAAA,2BAA2B,IAAI,WAAU;AAKzC,aAAA,oBAAoB,IAAI,WAAU;AAKlC,aAAA,yBAAyB,IAAI,WAAU;AAKvC,aAAA,wBAAwB,IAAI,WAAU;AAKtC,aAAA,sBAAsB,IAAI,WAAU;AAKpC,aAAA,+BAA+B,IAAI,WAAU;AAgN5C,aAAA,cAAc;AAqBd,aAAA,2BAA2B;AAiqBnC,aAAA,aAAoC;AAuuB5B,aAAA,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;MA5tB1C;;MAGO,eAAY;AAClB,eAAO;MACX;;;;;;MAOO,oBAAoB,WAAiB;AACxC,YAAI,CAAC,KAAK,QAAQ;AACd,iBAAO;;AAGX,YAAI,KAAK,OAAO,aAAY,MAAO,WAAW;AAC1C,iBAAO,KAAK;;AAGhB,eAAO,KAAK,OAAO,oBAAoB,SAAS;MACpD;;;;;MAMO,YAAY,QAAQ,OAAK;AAC5B,aAAK,aAAa,KAAK;MAC3B;;;;MAKO,iBAAc;AACjB,aAAK,gBAAe;MACxB;;MAGO,kBAAe;AAClB,aAAK,WAAW;AAChB,aAAK,aAAY;MACrB;;;;;;MAOO,YAAY,WAAkB;AACjC,YAAI,CAAC,KAAK,QAAQ;AACd,iBAAO;;AAGX,YAAI,KAAK,WAAW,WAAW;AAC3B,iBAAO;;AAGX,eAAO,KAAK,OAAO,YAAY,SAAS;MAC5C;;;;;;MAOO,oBAAoB,mBAA0B;AACjD,cAAM,SAAS,QAAQ,KAAI;AAE3B,aAAK,yBAAyB,mBAAmB,MAAM;AAEvD,eAAO;MACX;;;;;;;MAQO,yBAAyB,mBAA4B,QAAe;AACvE,eAAO,IAAI,kBAAkB,IAAI,KAAK,gBAAgB;AACtD,eAAO,IAAI,kBAAkB,IAAI,KAAK,gBAAgB;AACtD,eAAO;MACX;;;;;;MAOO,0BAA0B,mBAA0B;AACvD,cAAM,SAAS,QAAQ,KAAI;AAE3B,eAAO,IAAI,kBAAkB,IAAI,KAAK,qBAAqB;AAC3D,eAAO,IAAI,kBAAkB,IAAI,KAAK,qBAAqB;AAE3D,eAAO;MACX;;;;;;MAOO,cAAc,UAAmB,OAAY;AAChD,YAAI,CAAC,KAAK,SAAS,KAAK,WAAW,KAAK,MAAM,gBAAgB;AAC1D,gBAAM,MAAM,wEAAwE;AACpF;;AAGJ,aAAK,sBAAsB,SAAQ;AACnC,aAAK,oBAAoB,SAAQ;AAEjC,cAAM,iBAAiB,KAAK,MAAM,mBAAkB;AACpD,cAAM,oBAAoB,QAAQ,QAAQ,UAAU,OAAO,kBAAkB,MAAM,mBAAkB,GAAI,cAAc;AAEvH,aAAK,yBAAyB,iBAAiB;AAE/C,YAAI,kBAAkB,IAAI,KAAK,kBAAkB,IAAI,GAAG;AACpD,eAAK,gBAAgB;AACrB;;AAEJ,aAAK,gBAAgB;MACzB;;;;;;;MAQO,oBAAoB,SAAoB,wBAAiC,OAAO,WAAyC;MAEhI;;;;;;;MAQO,eAAe,uBAAiC,WAAyC;AAC5F,cAAM,UAAU,IAAI,MAAK;AAEzB,aAAK,oBAAoB,SAAS,uBAAuB,SAAS;AAElE,eAAO;MACX;;;;;;MAOO,aAAa,MAA6B;AAC7C,YAAI,CAAC,KAAK,SAAU,KAAK,UAAU,KAAK,WAAW,KAAK,MAAM,gBAAiB;AAC3E,cAAI,MAAM;AACN,kBAAM,MAAM,qEAAqE;;AAErF;;AAGJ,cAAM,QAAQ,KAAK,MAAM,gBAAgB,QAAQ,IAAI;AACrD,YAAI,UAAU,IAAI;AACd,eAAK,cAAc;AACnB,cAAI,CAAC,MAAM;AACP,iBAAK,MAAM,gBAAgB,OAAO,OAAO,CAAC;;AAE9C;mBACO,CAAC,MAAM;AACd;;AAGJ,aAAK,sBAAsB,SAAQ;AACnC,aAAK,oBAAoB,SAAQ;AACjC,aAAK,cAAc;AACnB,aAAK,MAAM,gBAAgB,KAAK,IAAI;MACxC;;;;;;;;;MAUO,WAAW,YAA6B,cAAgC,eAAiC,aAA6B;AACzI,cAAM,MAAM;AACZ,cAAM,QAAQ,iBAAY,QAAZ,iBAAY,SAAZ,eAAgB;AAC9B,cAAM,SAAS,kBAAa,QAAb,kBAAa,SAAb,gBAAiB;AAChC,cAAM,OAAO,gBAAW,QAAX,gBAAW,SAAX,cAAe;AAE5B,aAAK,aAAa;AAClB,aAAK,eAAe;AACpB,aAAK,gBAAgB;AACrB,aAAK,cAAc;MACvB;;;;;;;;;MAUO,mBAAmB,YAAoB,cAAuB,eAAwB,aAAoB;AAC7G,cAAM,MAAM;AACZ,cAAM,QAAQ,iBAAY,QAAZ,iBAAY,SAAZ,eAAgB;AAC9B,cAAM,SAAS,kBAAa,QAAb,kBAAa,SAAb,gBAAiB;AAChC,cAAM,OAAO,gBAAW,QAAX,gBAAW,SAAX,cAAe;AAE5B,aAAK,qBAAqB;AAC1B,aAAK,uBAAuB;AAC5B,aAAK,wBAAwB;AAC7B,aAAK,sBAAsB;MAC/B;;;;MAKO,yBAAyB,mBAA0B;;AACtD,cAAM,UAAU,KAAK,MAAM,SAAS,KAAK,KAAK;AAC9C,cAAM,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK;AAE5C,cAAM,iBAAgB,KAAA,KAAK,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE;AACnC,YAAI,eAAe;AACf,eAAK,iBAAiB,eAAe,KAAK,MAAM,WAAU,CAAE;;AAGhE,YAAI,UAAU,kBAAkB,IAAI,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,gBAAgB,QAAQ;AAC1G,YAAI,SAAS,kBAAkB,IAAI,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,gBAAgB,SAAS;AAE1G,cAAM,kCAAkC,KAAK,MAAM,yBAAyB,KAAK,KAAK;AACtF,YAAI,iCAAiC;AACjC,cAAI,KAAK,IAAI,UAAU,OAAO,IAAI,KAAK;AACnC,sBAAU;;AAGd,cAAI,KAAK,IAAI,SAAS,MAAM,IAAI,KAAK;AACjC,qBAAS;;;AAIjB,YAAI,CAAC,mCAAmC,YAAY,WAAW,WAAW,QAAQ;AAC9E;;AAGJ,aAAK,OAAO,UAAU;AACtB,aAAK,MAAM,SAAS;AAEpB,aAAK,MAAM,wBAAwB;AACnC,aAAK,KAAK,wBAAwB;AAClC,aAAK,aAAY;MACrB;;;;MAKO,YAAY,QAAc;AAC7B,aAAK,WAAW;AAChB,aAAK,gBAAgB,QAAQ;MACjC;;;;MAKO,WAAW,QAAc;AAC5B,aAAK,WAAW;AAChB,aAAK,gBAAgB,OAAO;MAChC;;MAGO,qBAAkB;AACrB,aAAK,iBAAiB;AACtB,aAAK,8BAA6B;MACtC;;MAGO,gCAA6B;MAEpC;;;;MAKO,gBAAgB,MAAe,SAAiC;AAEnE,aAAK,WAAW,OAAO;AACvB,YAAI,KAAK,kBAAkB,QAAQ,KAAK,OAAO,KAAK,OAAO;AACvD,iBAAO;;AAGX,YAAI,KAAK,kBAAkB,OAAO,KAAK,MAAM,KAAK,QAAQ;AACtD,iBAAO;;AAGX,YAAI,KAAK,kBAAkB,OAAO,KAAK,kBAAkB,SAAS,KAAK,MAAM;AACzE,iBAAO;;AAGX,YAAI,KAAK,kBAAkB,MAAM,KAAK,kBAAkB,UAAU,KAAK,KAAK;AACxE,iBAAO;;AAGX,eAAO;MACX;;MAGU,4BAAyB;AAC/B,eAAO;MACX;;MAGU,4BAAyB;AAC/B,eAAO;MACX;;;MAIO,iBAAc;AACjB,aAAK,WAAU;AACf,YAAI,KAAK,QAAQ,KAAK,KAAK,+BAA+B;AAEtD,eAAK,gBAAgB,eAAe,KAAK,kBAAkB,KAAK,YAAY;AAG5E,kBAAQ,aAAa,KAAK,cAAc,KAAK,+CAA+C,KAAK,YAAY;AAG7G,gBAAM,gBAAgB,KAAK;AAC3B,gBAAM,gBAAgB,KAAK;AAC3B,gBAAM,aAAa,KAAK,IAAI,KAAK,qBAAqB,KAAK,UAAU;AAErE,gBAAM,mBAAmB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAChF,gBAAM,oBAAoB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AACjF,gBAAM,kBAAkB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAC/E,gBAAM,qBAAqB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAElF,gBAAM,UAAU,KAAK,0BAAyB;AAC9C,gBAAM,UAAU,KAAK,0BAAyB;AAE9C,eAAK,KAAK,eACN,KAAK,MAAM,KAAK,aAAa,OAAO,mBAAmB,OAAO,GAC9D,KAAK,MAAM,KAAK,aAAa,MAAM,kBAAkB,OAAO,GAC5D,KAAK,KAAK,KAAK,aAAa,OAAO,KAAK,aAAa,QAAQ,oBAAoB,OAAO,GACxF,KAAK,KAAK,KAAK,aAAa,MAAM,KAAK,aAAa,SAAS,qBAAqB,OAAO,CAAC;;MAGtG;;;;MAKO,aAAa,QAAQ,OAAK;AAC7B,YAAI,CAAC,KAAK,cAAc,CAAC,OAAO;AAC5B;;AAGJ,aAAK,WAAW;AAChB,aAAK,mBAAkB;AAGvB,YAAI,KAAK,OAAO;AACZ,eAAK,MAAM,YAAW;;MAE9B;;MAGO,kBAAe;AAClB,aAAK,aAAY;AAEjB,YAAI,KAAK,OAAO;AACZ,eAAK,aAAY;;MAEzB;;;;MAKO,MAAM,MAA4B;AACrC,aAAK,QAAQ;AACb,YAAI,KAAK,OAAO;AACZ,eAAK,WAAW,KAAK,MAAM,SAAQ,EAAI,YAAW;;MAE1D;;;;MAKU,WAAW,SAAiC;AAClD,YAAI,CAAC,KAAK,kBAAkB,KAAK,YAAY,KAAK,KAAK,YAAY,KAAK,KAAK,cAAc,GAAG;AAC1F;;AAIJ,cAAM,UAAU,KAAK,gBAAgB,QAAQ,KAAK,oBAAoB,KAAK,gBAAgB;AAC3F,cAAM,UAAU,KAAK,gBAAgB,SAAS,KAAK,oBAAoB,KAAK,gBAAgB;AAC5F,YAAI,SAAS;AACT,kBAAQ,UAAU,SAAS,OAAO;AAGlC,kBAAQ,OAAO,KAAK,SAAS;AAG7B,kBAAQ,MAAM,KAAK,SAAS,KAAK,OAAO;AAGxC,kBAAQ,UAAU,CAAC,SAAS,CAAC,OAAO;;AAGxC,YAAI,KAAK,kBAAkB,KAAK,mBAAmB,WAAW,KAAK,mBAAmB,SAAS;AAC3F,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AACtB,eAAK,8BAA6B;AAElC,mBAAS,aAAa,CAAC,SAAS,CAAC,SAAS,KAAK,WAAW,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,OAAO,mBAAmB,MAAM,KAAK,gBAAgB;AAE9J,eAAK,iBAAiB,YAAY,KAAK,sBAAsB;AAC7D,eAAK,gBAAgB,eAAe,KAAK,kBAAkB,KAAK,iBAAiB;;MAEzF;;;;MAKO,iBAAiB,SAAgC;AACpD,YAAI,CAAC,KAAK,eAAe;AACrB;;AAGJ,gBAAQ,KAAI;AACZ,gBAAQ,cAAc,KAAK;AAC3B,gBAAQ,YAAY,KAAK;AAEzB,aAAK,yBAAyB,OAAO;AACrC,gBAAQ,QAAO;MACnB;;;;MAKO,yBAAyB,SAAgC;AAC5D,gBAAQ,WAAW,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;MACnI;MAEU,UAAU,SAAgC;AAChD,eAAO,KAAK,WAAW,KAAK,SAAS,kBAAkB,OAAO,IAAI,KAAK;MAC3E;;;;MAKU,aAAa,SAAgC;AACnD,YAAI,KAAK,yBAAyB;AAC9B,eAAK,WAAW;;AAGpB,YAAI,KAAK,SAAS,KAAK,MAAM,oBAAoB,CAAC,KAAK,OAAO;AAC1D,eAAK,WAAW;;AAGpB,YAAI,KAAK,UAAU;AACf,eAAK,aAAY;AACjB,eAAK,WAAW;;AAGpB,YAAI,KAAK,OAAO;AACZ,kBAAQ,OAAO,KAAK;;AAGxB,YAAI,KAAK,UAAU,KAAK,UAAU;AAC9B,kBAAQ,YAAY,KAAK,UAAU,OAAO;;AAG9C,YAAI,SAAQ,uBAAuB;AAC/B,kBAAQ,eAAe,KAAK;mBACrB,KAAK,WAAW;AACvB,kBAAQ,cAAc,KAAK,UAAU,CAAC,KAAK,OAAO,8BAA8B,KAAK,OAAO,QAAQ,KAAK,SAAS,KAAK;;MAE/H;;;;MAKO,QAAQ,eAAwB,SAAgC;AACnE,YAAI,CAAC,KAAK,YAAY,CAAC,KAAK,aAAa,KAAK,gBAAgB;AAC1D,iBAAO;;AAGX,YAAI,KAAK,YAAY,CAAC,KAAK,qBAAqB,WAAW,aAAa,GAAG;AACvE,eAAK,KAAK;AAEV,eAAK,gBAAgB,qBACjB,KAAK,kBACL,CAAC,KAAK,uBAAuB,GAC7B,CAAC,KAAK,sBAAsB,GAC5B,KAAK,wBAAwB,GAC7B,KAAK,yBAAyB,GAC9B,KAAK,6CAA6C;AAGtD,kBAAQ,KAAI;AAEZ,eAAK,aAAa,OAAO;AAEzB,cAAI,eAAe;AACnB,aAAG;AACC,iBAAK,iBAAiB;AACtB,iBAAK,iBAAiB,eAAe,OAAO;AAC5C;mBACK,KAAK,kBAAkB,eAAe;AAE/C,cAAI,gBAAgB,GAAG;AACnB,mBAAO,MAAM,8CAA8C,KAAK,IAAI,cAAc,KAAK,QAAQ,GAAG;;AAGtG,kBAAQ,QAAO;AACf,eAAK,eAAc;AACnB,eAAK,uBAAuB,aAAa;;AAG7C,aAAK,YAAY,KAAK;AACtB,aAAK,WAAW;AAEhB,eAAO;MACX;;;;MAKU,iBAAiB,eAAwB,SAAgC;AAC/E,aAAK,oBAAoB,SAAS,aAAa;AAG/C,YAAI,KAAK,UAAU,KAAK,OAAO,wBAAwB;AACnD,eAAK,oBAAoB,QAAQ,KAAK,OAAO;AAC7C,eAAK,oBAAoB,OAAO,KAAK,OAAO;AAC5C,eAAK,oBAAoB,SAAS,KAAK,OAAO,sBAAsB,KAAK,OAAO;AAChF,eAAK,oBAAoB,UAAU,KAAK,OAAO,qBAAqB,KAAK,OAAO;;AAGpF,aAAK,gBAAgB,SAAS,KAAK,mBAAmB;AAGtD,aAAK,YAAY,KAAK,qBAAqB,OAAO;AAElD,aAAK,SAAQ;AACb,aAAK,kBAAkB,KAAK,qBAAqB,OAAO;AAGxD,aAAK,gBAAgB,OAAO,KAAK,gBAAgB,OAAO;AACxD,aAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM;AACtD,aAAK,gBAAgB,QAAQ,KAAK,gBAAgB,QAAQ;AAC1D,aAAK,gBAAgB,SAAS,KAAK,gBAAgB,SAAS;AAG5D,aAAK,sBAAsB,KAAK,qBAAqB,OAAO;AAE5D,aAAK,qBAAqB,SAAS,KAAK,mBAAmB;AAE3D,aAAK,gBAAgB,eAAe,KAAK,kBAAkB,KAAK,iBAAiB;AACjF,YAAI,KAAK,kBAAkB,aAAY,GAAI;AACvC,eAAK,kBAAkB,gBAAgB,IAAI;;MAEnD;MAEU,uBAAuB,eAAsB;AAEnD,aAAK,WAAU;AACf,aAAK,gBAAgB,eAAe,KAAK,kBAAkB,KAAK,iBAAiB;AACjF,YAAI,KAAK,UAAU,KAAK,OAAO,cAAc;AACzC,wBAAc,eAAe,KAAK,OAAO,kBAAkB,KAAK,uBAAuB;AAEvF,cAAI,KAAK,kBAAkB,OAAO,KAAK,wBAAwB,OAAO,KAAK,wBAAwB,OAAO;AACtG,iBAAK,aAAa;AAClB;;AAGJ,cAAI,KAAK,kBAAkB,OAAO,KAAK,kBAAkB,QAAQ,KAAK,wBAAwB,MAAM;AAChG,iBAAK,aAAa;AAClB;;AAGJ,cAAI,KAAK,kBAAkB,MAAM,KAAK,wBAAwB,MAAM,KAAK,wBAAwB,QAAQ;AACrG,iBAAK,aAAa;AAClB;;AAGJ,cAAI,KAAK,kBAAkB,MAAM,KAAK,kBAAkB,SAAS,KAAK,wBAAwB,KAAK;AAC/F,iBAAK,aAAa;AAClB;;;AAIR,aAAK,aAAa;MACtB;;MAGO,WAAQ;AAEX,YAAI,KAAK,OAAO,SAAS;AACrB,eAAK,gBAAgB,QAAQ,KAAK,OAAO,SAAS,KAAK,KAAK;eACzD;AACH,eAAK,gBAAgB,SAAS,KAAK,OAAO,SAAS,KAAK,KAAK;;AAGjE,YAAI,KAAK,QAAQ,SAAS;AACtB,eAAK,gBAAgB,SAAS,KAAK,QAAQ,SAAS,KAAK,KAAK;eAC3D;AACH,eAAK,gBAAgB,UAAU,KAAK,QAAQ,SAAS,KAAK,KAAK;;AAGnE,YAAI,KAAK,gBAAgB,GAAG;AACxB,cAAI,KAAK,0BAA0B;AAC/B,iBAAK,gBAAgB,SAAS,KAAK,gBAAgB,QAAQ,KAAK;iBAC7D;AACH,iBAAK,gBAAgB,QAAQ,KAAK,gBAAgB,SAAS,KAAK;;;MAG5E;;;;MAKU,kBAAkB,eAAwB,SAAgC;AAChF,cAAM,QAAQ,KAAK,gBAAgB;AACnC,cAAM,SAAS,KAAK,gBAAgB;AAEpC,cAAM,cAAc,cAAc;AAClC,cAAM,eAAe,cAAc;AAGnC,YAAI,IAAI;AACR,YAAI,IAAI;AAER,gBAAQ,KAAK,qBAAqB;UAC9B,KAAK,SAAQ;AACT,gBAAI;AACJ;UACJ,KAAK,SAAQ;AACT,gBAAI,cAAc;AAClB;UACJ,KAAK,SAAQ;AACT,iBAAK,cAAc,SAAS;AAC5B;;AAGR,gBAAQ,KAAK,mBAAmB;UAC5B,KAAK,SAAQ;AACT,gBAAI;AACJ;UACJ,KAAK,SAAQ;AACT,gBAAI,eAAe;AACnB;UACJ,KAAK,SAAQ;AACT,iBAAK,eAAe,UAAU;AAC9B;;AAGR,YAAI,CAAC,KAAK,wBAAwB;AAC9B,cAAI,KAAK,aAAa,SAAS;AAC3B,iBAAK,gBAAgB,QAAQ,KAAK,aAAa,SAAS,KAAK,KAAK;AAClE,iBAAK,gBAAgB,SAAS,KAAK,aAAa,SAAS,KAAK,KAAK;iBAChE;AACH,iBAAK,gBAAgB,QAAQ,cAAc,KAAK,aAAa,SAAS,KAAK,KAAK;AAChF,iBAAK,gBAAgB,SAAS,cAAc,KAAK,aAAa,SAAS,KAAK,KAAK;;AAGrF,cAAI,KAAK,cAAc,SAAS;AAC5B,iBAAK,gBAAgB,SAAS,KAAK,cAAc,SAAS,KAAK,KAAK;iBACjE;AACH,iBAAK,gBAAgB,SAAS,cAAc,KAAK,cAAc,SAAS,KAAK,KAAK;;AAGtF,cAAI,KAAK,YAAY,SAAS;AAC1B,iBAAK,gBAAgB,OAAO,KAAK,YAAY,SAAS,KAAK,KAAK;AAChE,iBAAK,gBAAgB,UAAU,KAAK,YAAY,SAAS,KAAK,KAAK;iBAChE;AACH,iBAAK,gBAAgB,OAAO,eAAe,KAAK,YAAY,SAAS,KAAK,KAAK;AAC/E,iBAAK,gBAAgB,UAAU,eAAe,KAAK,YAAY,SAAS,KAAK,KAAK;;AAGtF,cAAI,KAAK,eAAe,SAAS;AAC7B,iBAAK,gBAAgB,UAAU,KAAK,eAAe,SAAS,KAAK,KAAK;iBACnE;AACH,iBAAK,gBAAgB,UAAU,eAAe,KAAK,eAAe,SAAS,KAAK,KAAK;;;AAI7F,YAAI,KAAK,MAAM,SAAS;AACpB,eAAK,gBAAgB,QAAQ,KAAK,MAAM,SAAS,KAAK,KAAK;eACxD;AACH,eAAK,gBAAgB,QAAQ,cAAc,KAAK,MAAM,SAAS,KAAK,KAAK;;AAG7E,YAAI,KAAK,KAAK,SAAS;AACnB,eAAK,gBAAgB,OAAO,KAAK,KAAK,SAAS,KAAK,KAAK;eACtD;AACH,eAAK,gBAAgB,OAAO,eAAe,KAAK,KAAK,SAAS,KAAK,KAAK;;AAG5E,aAAK,gBAAgB,QAAQ;AAC7B,aAAK,gBAAgB,OAAO;MAChC;;;;MAKU,YAAY,eAAwB,SAAgC;MAE9E;;;;MAKU,sBAAsB,eAAwB,SAAgC;MAExF;;;;MAKU,iBAAiB,SAAgC;MAE3D;MAIQ,MAAM,SAAkC,sBAAwC;AACpF,gBAAQ,UAAS;AACjB,iBAAQ,aAAa,SAAS,KAAK,eAAe;AAClD,YAAI,sBAAsB;AAEtB,+BAAqB,eAAe,KAAK,wBAAwB,KAAK,YAAY;AAGlF,gBAAM,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AAC3C,uBAAa,OAAO,KAAK,IAAI,KAAK,aAAa,MAAM,KAAK,gBAAgB,IAAI;AAC9E,uBAAa,MAAM,KAAK,IAAI,KAAK,aAAa,KAAK,KAAK,gBAAgB,GAAG;AAC3E,uBAAa,QAAQ,KAAK,IAAI,KAAK,aAAa,OAAO,KAAK,aAAa,OAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,KAAK,IAAI,aAAa;AACvJ,uBAAa,SAAS,KAAK,IAAI,KAAK,aAAa,MAAM,KAAK,aAAa,QAAQ,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM,IAAI,aAAa;AACxJ,mBAAQ,aAAa,SAAS,YAAY;;AAG9C,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,gBAAM,gBAAgB,KAAK;AAC3B,gBAAM,gBAAgB,KAAK;AAC3B,gBAAM,aAAa,KAAK;AAExB,gBAAM,mBAAmB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAChF,gBAAM,oBAAoB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AACjF,gBAAM,kBAAkB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAC/E,gBAAM,qBAAqB,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,IAAI,aAAa,GAAG,CAAC;AAElF,kBAAQ,KACJ,SAAQ,aAAa,OAAO,kBAC5B,SAAQ,aAAa,MAAM,iBAC3B,SAAQ,aAAa,QAAQ,oBAAoB,kBACjD,SAAQ,aAAa,SAAS,qBAAqB,eAAe;eAEnE;AACH,kBAAQ,KAAK,SAAQ,aAAa,MAAM,SAAQ,aAAa,KAAK,SAAQ,aAAa,OAAO,SAAQ,aAAa,MAAM;;AAG7H,gBAAQ,KAAI;MAChB;;;;MAKO,QAAQ,SAAkC,sBAAwC;AACrF,YAAI,CAAC,KAAK,aAAa,KAAK,iBAAiB,KAAK,YAAY;AAC1D,eAAK,WAAW;AAChB,iBAAO;;AAGX,aAAK,KAAK;AAEV,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAGzB,aAAK,WAAW,OAAO;AAGvB,YAAI,KAAK,aAAa;AAClB,eAAK,MAAM,SAAS,oBAAoB;;AAG5C,YAAI,KAAK,uBAAuB,aAAY,GAAI;AAC5C,eAAK,uBAAuB,gBAAgB,IAAI;;AAGpD,YAAI,KAAK,kBAAkB,CAAC,KAAK,aAAa,KAAK,YAAY;AAC3D,kBAAQ,aAAa,KAAK,YAAY,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,GAAG;eACtF;AACH,eAAK,MAAM,SAAS,oBAAoB;;AAG5C,YAAI,KAAK,kBAAkB,KAAK,WAAW;AACvC,eAAK,aAAa,QAAQ,aAAa,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;AAGvJ,aAAK,iBAAiB,OAAO;AAE7B,YAAI,KAAK,sBAAsB,aAAY,GAAI;AAC3C,eAAK,sBAAsB,gBAAgB,IAAI;;AAGnD,gBAAQ,QAAO;AAEf,eAAO;MACX;;;;MAKO,MAAM,SAAkC,sBAAwC;MAEvF;;;;;;;MAQO,SAAS,GAAW,GAAS;AAEhC,aAAK,uBAAuB,qBAAqB,GAAG,GAAG,KAAK,oBAAoB;AAEhF,YAAI,KAAK,qBAAqB;AAC9B,YAAI,KAAK,qBAAqB;AAG9B,YAAI,IAAI,KAAK,gBAAgB,MAAM;AAC/B,iBAAO;;AAGX,YAAI,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,OAAO;AAC5D,iBAAO;;AAGX,YAAI,IAAI,KAAK,gBAAgB,KAAK;AAC9B,iBAAO;;AAGX,YAAI,IAAI,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,QAAQ;AAC5D,iBAAO;;AAGX,YAAI,KAAK,kBAAkB;AACvB,eAAK,MAAM,sBAAsB;;AAErC,eAAO;MACX;;;;MAKO,gBAAgB,GAAW,GAAW,IAA+B,MAAc,WAAmB,aAAqB,QAAiB,QAAe;AAC9J,YAAI,CAAC,KAAK,YAAY;AAClB,iBAAO;;AAEX,YAAI,CAAC,KAAK,oBAAoB,CAAC,KAAK,aAAa,KAAK,cAAc;AAChE,iBAAO;;AAGX,YAAI,CAAC,KAAK,SAAS,GAAG,CAAC,GAAG;AACtB,iBAAO;;AAGX,aAAK,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,aAAa,QAAQ,MAAM;AAE/E,eAAO;MACX;;;;MAKO,eAAe,QAAiB,aAAsB,WAAmB,IAA6B;AACzG,cAAM,YAAqB,KAAK,wBAAwB,gBAAgB,aAAa,IAAI,QAAQ,MAAM,EAAE;AAEzG,YAAI,aAAa,KAAK,UAAU,QAAQ,CAAC,KAAK,kBAAkB;AAC5D,eAAK,OAAO,eAAe,QAAQ,aAAa,WAAW,EAAE;;MAErE;;;;MAKO,gBAAgB,QAAiB,IAA6B;AACjE,YAAI,CAAC,KAAK,YAAY;AAClB,iBAAO;;AAEX,YAAI,KAAK,cAAc,GAAG;AACtB,iBAAO;;AAGX,YAAI,KAAK,gBAAgB,IAAI;AAEzB,eAAK,cAAc;;AAEvB,aAAK;AAEL,cAAM,YAAqB,KAAK,yBAAyB,gBAAgB,MAAM,IAAI,QAAQ,MAAM,EAAE;AAEnG,YAAI,aAAa,KAAK,UAAU,QAAQ,CAAC,KAAK,kBAAkB;AAC5D,eAAK,OAAO,gBAAgB,QAAQ,EAAE;;AAG1C,eAAO;MACX;;;;MAKO,cAAc,QAAiB,IAA+B,QAAQ,OAAK;AAC9E,YAAI,CAAC,UAAU,CAAC,KAAK,cAAc,WAAW,OAAO;AACjD;;AAEJ,aAAK,cAAc;AAEnB,YAAI,YAAqB;AAEzB,YAAI,CAAC,OAAO,YAAY,IAAI,GAAG;AAC3B,sBAAY,KAAK,uBAAuB,gBAAgB,MAAM,IAAI,QAAQ,MAAM,EAAE;;AAGtF,YAAI,aAAa,KAAK,UAAU,QAAQ,CAAC,KAAK,kBAAkB;AAC5D,eAAK,OAAO,cAAc,QAAQ,IAAI,KAAK;;MAEnD;;;;MAKO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAA6B;AAG9H,aAAK,gBAAgB,MAAM,EAAE;AAE7B,YAAI,KAAK,eAAe,GAAG;AACvB,iBAAO;;AAGX,aAAK;AAEL,aAAK,gBAAgB,SAAS,IAAI;AAElC,cAAM,YAAqB,KAAK,wBAAwB,gBAAgB,IAAI,gBAAgB,aAAa,WAAW,GAAG,IAAI,QAAQ,MAAM,EAAE;AAE3I,YAAI,aAAa,KAAK,UAAU,QAAQ,CAAC,KAAK,kBAAkB;AAC5D,eAAK,OAAO,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE;;AAG9E,YAAI,MAAM,KAAK,aAAa,KAAK,MAAM,cAAc,UAAU;AAC3D,eAAK,MAAM,oBAAoB,IAAK,GAAG,MAAwB,SAAS;;AAG5E,eAAO;MACX;;;;MAKO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAsB,IAA8B;AACnJ,YAAI,CAAC,KAAK,YAAY;AAClB;;AAEJ,aAAK,aAAa;AAElB,eAAO,KAAK,gBAAgB,SAAS;AAErC,YAAI,iBAA0B;AAC9B,YAAI,gBAAgB,KAAK,cAAc,KAAK,KAAK,gBAAgB,KAAK;AAClE,2BAAiB,KAAK,yBAAyB,gBAAgB,IAAI,gBAAgB,aAAa,WAAW,GAAG,IAAI,QAAQ,MAAM,EAAE;;AAEtI,cAAM,YAAqB,KAAK,sBAAsB,gBAAgB,IAAI,gBAAgB,aAAa,WAAW,GAAG,IAAI,QAAQ,MAAM,EAAE;AAEzI,YAAI,aAAa,KAAK,UAAU,QAAQ,CAAC,KAAK,kBAAkB;AAC5D,eAAK,OAAO,aAAa,QAAQ,aAAa,WAAW,aAAa,gBAAgB,EAAE;;AAG5F,YAAI,MAAM,KAAK,aAAa,KAAK,MAAM,cAAc,UAAU;AAC3D,eAAK,MAAM,oBAAoB,OAAQ,GAAG,MAAwB,SAAS;;MAEnF;;;;MAKO,gBAAgB,YAA8B,MAAI;AACrD,YAAI,cAAc,MAAM;AACpB,eAAK,aAAa,MAAM,QAAQ,KAAI,GAAI,WAAW,GAAG,IAAI;eACvD;AACH,qBAAW,OAAO,KAAK,iBAAiB;AACpC,iBAAK,aAAa,MAAM,QAAQ,KAAI,GAAI,CAAC,KAAe,GAAG,IAAI;;;MAG3E;;;;MAKO,eAAe,QAAiB,QAAe;AAClD,YAAI,CAAC,KAAK,YAAY;AAClB;;AAEJ,cAAM,YAAqB,KAAK,kBAAkB,gBAAgB,IAAI,QAAQ,QAAQ,MAAM,CAAC;AAE7F,YAAI,aAAa,KAAK,UAAU,MAAM;AAClC,eAAK,OAAO,eAAe,QAAQ,MAAM;;MAEjD;;MAGO,gBAAa;MAAU;;;;MAKvB,oBACH,MACA,GACA,GACA,IACA,WACA,aACA,QACA,QAAe;AAEf,YAAI,CAAC,KAAK,YAAY;AAClB,iBAAO;;AAEX,aAAK,cAAc,eAAe,GAAG,CAAC;AACtC,YAAI,SAAS,kBAAkB,aAAa;AACxC,eAAK,eAAe,MAAM,KAAK,eAAe,WAAW,EAAE;AAE3D,gBAAM,sBAAsB,KAAK,MAAM,iBAAiB,SAAS;AACjE,cAAI,uBAAuB,wBAAwB,MAAM;AACrD,gCAAoB,cAAc,MAAM,EAAE;;AAG9C,cAAI,wBAAwB,MAAM;AAC9B,iBAAK,gBAAgB,MAAM,EAAE;;AAGjC,eAAK,MAAM,iBAAiB,SAAS,IAAI;AACzC,iBAAO;;AAGX,YAAI,SAAS,kBAAkB,aAAa;AACxC,eAAK,eAAe,MAAM,KAAK,eAAe,WAAW,aAAa,EAAE;AACxE,eAAK,MAAM,yBAAyB,MAAM,SAAS;AACnD,eAAK,MAAM,qBAAqB;AAChC,iBAAO;;AAGX,YAAI,SAAS,kBAAkB,WAAW;AACtC,cAAI,KAAK,MAAM,iBAAiB,SAAS,GAAG;AACxC,iBAAK,MAAM,iBAAiB,SAAS,EAAE,aAAa,MAAM,KAAK,eAAe,WAAW,aAAa,MAAM,EAAE;;AAElH,iBAAO,KAAK,MAAM,iBAAiB,SAAS;AAC5C,iBAAO;;AAGX,YAAI,SAAS,kBAAkB,cAAc;AACzC,cAAI,KAAK,MAAM,iBAAiB,SAAS,GAAG;AACxC,iBAAK,MAAM,iBAAiB,SAAS,EAAE,eAAe,QAAQ,MAAM;AACpE,mBAAO;;;AAIf,eAAO;MACX;MAEQ,eAAY;AAChB,YAAI,CAAC,KAAK,SAAS,CAAC,KAAK,UAAU;AAC/B;;AAGJ,YAAI,KAAK,QAAQ;AACb,eAAK,QAAQ,KAAK,OAAO,YAAY,MAAM,KAAK,OAAO,aAAa,MAAM,KAAK,mBAAmB,QAAQ,KAAK,OAAO;eACnH;AACH,eAAK,QAAQ,KAAK,aAAa,MAAM,KAAK,cAAc,MAAM,KAAK,mBAAmB,QAAQ,KAAK;;AAGvG,aAAK,cAAc,SAAQ,eAAe,KAAK,KAAK;AAGpD,aAAK,eAAc,EAAG,QAAQ,CAAC,UAAU,MAAM,gBAAe,CAAE;MACpE;;;;;;MAOO,MAAM,MAA6B;AACtC,cAAM,gBAAqB,CAAA;AAC3B,aAAK,UAAU,aAAa;AAE5B,cAAM,cAAc,MAAM,YAAY,iBAAiB,cAAc,SAAS;AAC9E,cAAM,SAAS,IAAI,YAAW;AAC9B,eAAO,MAAM,eAAe,IAAI;AAEhC,eAAO;MACX;;;;;;;MAQO,MAAM,kBAAuB,MAA6B;AAC7D,4BAAoB,MAAM,MAAM,MAAM,kBAAkB,IAAI;AAE5D,aAAK,OAAO,iBAAiB;AAE7B,aAAK,kBAAkB,kBAAkB,SAAI,QAAJ,SAAI,SAAJ,OAAQ,KAAK,KAAK;AAE3D,eAAO;MACX;;;;;MAMO,UAAU,qBAAwB;AACrC,4BAAoB,UAAU,MAAM,mBAAmB;AACvD,4BAAoB,OAAO,KAAK;AAChC,4BAAoB,YAAY,KAAK,aAAY;AAGjD,aAAK,aAAY;AACjB,YAAI,KAAK,OAAO;AACZ,8BAAoB,aAAa,KAAK;AACtC,8BAAoB,WAAW,KAAK;AACpC,8BAAoB,aAAa,KAAK;AACtC,8BAAoB,YAAY,KAAK;;AAGzC,YAAI,KAAK,WAAW;AAChB,8BAAoB,WAAW,CAAA;AAC/B,eAAK,UAAU,UAAU,oBAAoB,QAAQ;;AAIzD,4BAAoB,2BAA2B,MAAM,mBAAmB;MAC5E;;;;MAKO,kBAAkB,kBAAuB,MAA4B;;AACxE,YAAI,iBAAiB,YAAY;AAC7B,eAAK,aAAa,iBAAiB;;AAGvC,YAAI,iBAAiB,UAAU;AAC3B,eAAK,WAAW,iBAAiB;;AAGrC,YAAI,iBAAiB,YAAY;AAC7B,eAAK,aAAa,iBAAiB;;AAGvC,YAAI,iBAAiB,WAAW;AAC5B,eAAK,YAAY,iBAAiB;;AAItC,YAAI,iBAAiB,UAAU;AAC3B,gBAAM,YAAY,MAAM,YAAY,iBAAiB,iBAAiB,SAAS,SAAS;AACxF,eAAK,YAAY,IAAI,UAAS;AAC9B,WAAA,KAAA,KAAK,eAAS,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,iBAAiB,QAAQ;;AAInD,YAAI,iBAAiB,YAAY;AAC7B,eAAK,aAAa,CAAA;AAClB,mBAAS,iBAAiB,GAAG,iBAAiB,iBAAiB,WAAW,QAAQ,kBAAkB;AAChG,kBAAM,kBAAkB,iBAAiB,WAAW,cAAc;AAClE,kBAAM,gBAAgB,SAAS,mBAAmB;AAClD,gBAAI,eAAe;AACf,mBAAK,WAAW,KAAK,cAAc,MAAM,eAAe,CAAC;;;AAIjE,cAAI,iBAAiB,eAAe,KAAK,SAAS,KAAK,MAAM,SAAQ,GAAI;AACrE,iBAAK,MACA,SAAQ,EACR,eACG,MACA,iBAAiB,iBACjB,iBAAiB,eACjB,iBAAiB,iBACjB,iBAAiB,oBAAoB,CAAG;;;AAKxD,aAAK,2BAA0B,KAAA,iBAAiB,6BAAuB,QAAA,OAAA,SAAA,KAAI,KAAK;MACpF;;MAGO,UAAO;AACV,aAAK,kBAAkB,MAAK;AAC5B,aAAK,uBAAuB,MAAK;AACjC,aAAK,sBAAsB,MAAK;AAChC,aAAK,wBAAwB,MAAK;AAClC,aAAK,yBAAyB,MAAK;AACnC,aAAK,wBAAwB,MAAK;AAClC,aAAK,uBAAuB,MAAK;AACjC,aAAK,sBAAsB,MAAK;AAChC,aAAK,yBAAyB,MAAK;AACnC,aAAK,kBAAkB,MAAK;AAE5B,YAAI,KAAK,kBAAkB,KAAK,QAAQ;AACpC,eAAK,OAAO,oBAAoB,OAAO,KAAK,cAAc;AAC1D,eAAK,iBAAiB;;AAG1B,YAAI,KAAK,QAAQ;AACb,eAAK,OAAO,cAAc,IAAI;AAC9B,eAAK,SAAS;;AAGlB,YAAI,KAAK,OAAO;AACZ,gBAAM,QAAQ,KAAK,MAAM,gBAAgB,QAAQ,IAAI;AACrD,cAAI,QAAQ,IAAI;AACZ,iBAAK,aAAa,IAAI;;;AAK9B,aAAK,oBAAoB,gBAAgB,IAAI;AAC7C,aAAK,oBAAoB,MAAK;MAClC;;MAYO,WAAW,4BAAyB;AACvC,eAAO,SAAQ;MACnB;;MAGO,WAAW,6BAA0B;AACxC,eAAO,SAAQ;MACnB;;MAGO,WAAW,8BAA2B;AACzC,eAAO,SAAQ;MACnB;;MAGO,WAAW,yBAAsB;AACpC,eAAO,SAAQ;MACnB;;MAGO,WAAW,4BAAyB;AACvC,eAAO,SAAQ;MACnB;;MAGO,WAAW,4BAAyB;AACvC,eAAO,SAAQ;MACnB;;;;MAOO,OAAO,eAAe,MAAY;AACrC,YAAI,SAAQ,iBAAiB,IAAI,GAAG;AAChC,iBAAO,SAAQ,iBAAiB,IAAI;;AAGxC,cAAM,SAAS,YAAY;AAC3B,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,4CAA4C;;AAGhE,cAAM,SAAS,OAAO,cAAc,IAAI;AACxC,iBAAQ,iBAAiB,IAAI,IAAI;AAEjC,eAAO;MACX;;;;;;;MAQO,OAAO,MAAM,kBAAuB,MAA4B;AACnE,cAAM,cAAc,MAAM,YAAY,iBAAiB,iBAAiB,SAAS;AACjF,cAAM,UAAU,oBAAoB,MAAM,MAAM,IAAI,YAAW,GAAI,kBAAkB,IAAI;AAEzF,gBAAQ,OAAO,iBAAiB;AAEhC,gBAAQ,kBAAkB,kBAAkB,IAAI;AAEhD,eAAO;MACX;;;;MAOU,OAAO,YAAY,GAAW,GAAW,OAAe,QAAgB,SAAgC;AAC9G,gBAAQ,UAAU,GAAG,CAAC;AACtB,gBAAQ,MAAM,OAAO,MAAM;AAE3B,gBAAQ,UAAS;AACjB,gBAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,EAAE;AACnC,gBAAQ,UAAS;AAEjB,gBAAQ,MAAM,IAAI,OAAO,IAAI,MAAM;AACnC,gBAAQ,UAAU,CAAC,GAAG,CAAC,CAAC;MAC5B;;;;;MAMO,UAAO;AAEV,eAAO;MACX;;AA/iFc,YAAA,wBAAwB;AAq8DvB,YAAA,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AAsgBrC,YAAA,6BAA6B;AAC7B,YAAA,8BAA8B;AAC9B,YAAA,+BAA+B;AAE/B,YAAA,0BAA0B;AAC1B,YAAA,6BAA6B;AAC7B,YAAA,6BAA6B;AAgC7B,YAAA,mBAA2F,CAAA;AAsC5F,YAAA,YAAuI,MAAK;IAAE;AAz5ErJ,eAAA;MADN,UAAS;;AAKH,eAAA;MADN,UAAS;;AAUH,eAAA;MADN,UAAS;;AAIH,eAAA;MADN,UAAS;;AAaV,eAAA;MADC,UAAS;;AAeV,eAAA;MADC,UAAS;;AASH,eAAA;MADN,UAAS;;AAQV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAgBH,eAAA;MADN,UAAS;;AA4GV,eAAA;MADC,UAAS;;AAWV,eAAA;MADC,UAAS;;AAkEV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AA+BV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAUV,eAAA;MADC,UAAS;;AAsCV,eAAA;MADC,UAAS;;AAgFV,eAAA;MADC,UAAS;;AAiEV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAiCV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAwCV,eAAA;MADC,UAAS;;AAwCV,eAAA;MADC,UAAS;;AAwCV,eAAA;MADC,UAAS;;AAwCV,eAAA;MADC,UAAS;;AA+BV,eAAA;MADC,UAAS;;AA+BV,eAAA;MADC,UAAS;;AA+BV,eAAA;MADC,UAAS;;AAsCV,eAAA;MADC,UAAS;;AA+BV,eAAA;MADC,UAAS;;AAeV,eAAA;MADC,UAAS;;AAqBH,eAAA;MADN,UAAS;;AAMH,eAAA;MADN,UAAS;;AAw1Cd,kBAAc,uBAAuB,OAAO;;;;;IChkF/B;;;;AArBb;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMM,IAAO,YAAP,cAAyB,QAAO;;MAoBlC,IAAW,8BAA2B;AAClC,eAAO,KAAK;MAChB;MACA,IAAW,4BAA4B,OAAc;AACjD,YAAI,KAAK,iCAAiC,OAAO;AAC7C;;AAEJ,aAAK,+BAA+B;AACpC,aAAK,aAAY;MACrB;;MAeA,IAAW,wBAAqB;AAC5B,eAAO,KAAK;MAChB;MAEA,IAAW,sBAAsB,OAAc;AAC3C,YAAI,KAAK,2BAA2B,OAAO;AACvC;;AAGJ,aAAK,yBAAyB;AAE9B,YAAI,OAAO;AACP,eAAK,SAAS;;AAGlB,aAAK,aAAY;MACrB;;MAIA,IAAW,uBAAoB;AAC3B,eAAO,KAAK;MAChB;MAEA,IAAW,qBAAqB,OAAc;AAC1C,YAAI,KAAK,0BAA0B,OAAO;AACtC;;AAGJ,aAAK,wBAAwB;AAE7B,YAAI,OAAO;AACP,eAAK,QAAQ;;AAGjB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAA6B;AACvD,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAEJ,aAAK,sBAAsB;AAC3B,aAAK,aAAY;MACrB;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAc;AAChC,aAAK,cAAc;AAEnB,mBAAW,SAAS,KAAK,WAAW;AAChC,gBAAM,aAAa;;MAE3B;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAlIZ,aAAA,YAAY,IAAI,MAAK;AAElB,aAAA,sBAAsB,QAAQ,MAAK;AAEnC,aAAA,cAAc;AAEd,aAAA,sBAA8C;AAE9C,aAAA,wBAAwB;AAExB,aAAA,yBAAyB;AAEzB,aAAA,+BAAwC;AAExC,aAAA,uBAAiD;AAkBpD,aAAA,uBAAuB;AAMvB,aAAA,iBAAiB;AA0NjB,aAAA,2BAA2B,IAAI,WAAU;AAKzC,aAAA,6BAA6B,IAAI,WAAU;AA4N1C,aAAA,0BAA0B,SAAS,SAAQ;AAC3C,aAAA,kBAAkB,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;MA9VhD;MAEU,eAAY;AAClB,eAAO;MACX;MAEO,gCAA6B;AAChC,mBAAW,SAAS,KAAK,UAAU;AAC/B,gBAAM,aAAa;AACnB,gBAAM,mBAAkB;;MAEhC;;;;;;MAOO,eAAeA,OAAY;AAC9B,mBAAW,SAAS,KAAK,UAAU;AAC/B,cAAI,MAAM,SAASA,OAAM;AACrB,mBAAO;;;AAIf,eAAO;MACX;;;;;;;MAQO,eAAeA,OAAc,MAAY;AAC5C,mBAAW,SAAS,KAAK,UAAU;AAC/B,cAAI,MAAM,aAAa,MAAM;AACzB,mBAAO;;;AAIf,eAAO;MACX;;;;;;MAOO,gBAAgB,SAAgB;AACnC,eAAO,KAAK,SAAS,QAAQ,OAAO,MAAM;MAC9C;;;;;;MAOO,WAAW,SAA0B;AACxC,YAAI,CAAC,SAAS;AACV,iBAAO;;AAGX,cAAM,QAAQ,KAAK,UAAU,QAAQ,OAAO;AAE5C,YAAI,UAAU,IAAI;AACd,iBAAO;;AAEX,gBAAQ,MAAM,KAAK,KAAK;AAExB,gBAAQ,gBAAe;AAEvB,aAAK,gBAAgB,OAAO;AAE5B,aAAK,aAAY;AAEjB,aAAK,yBAAyB,gBAAgB,OAAO;AAErD,eAAO;MACX;;;;;MAMO,gBAAa;AAChB,cAAM,WAAW,KAAK,SAAS,MAAK;AAEpC,mBAAW,SAAS,UAAU;AAC1B,eAAK,cAAc,KAAK;;AAG5B,eAAO;MACX;;;;;;MAOO,cAAc,SAAgB;AACjC,cAAM,QAAQ,KAAK,UAAU,QAAQ,OAAO;AAE5C,YAAI,UAAU,IAAI;AACd,eAAK,UAAU,OAAO,OAAO,CAAC;AAE9B,kBAAQ,SAAS;;AAGrB,gBAAQ,aAAa,IAAI;AAEzB,YAAI,KAAK,OAAO;AACZ,eAAK,MAAM,0BAA0B,OAAO;;AAGhD,aAAK,aAAY;AAEjB,aAAK,2BAA2B,gBAAgB,OAAO;AACvD,eAAO;MACX;;;;MAeO,gBAAgB,SAAgB;AACnC,cAAM,aAAa,QAAQ;AAE3B,aAAK,cAAc,OAAO;AAE1B,YAAI,WAAW;AACf,iBAAS,QAAQ,GAAG,QAAQ,KAAK,UAAU,QAAQ,SAAS;AACxD,cAAI,KAAK,UAAU,KAAK,EAAE,SAAS,QAAQ,QAAQ;AAC/C,iBAAK,UAAU,OAAO,OAAO,GAAG,OAAO;AACvC,uBAAW;AACX;;;AAIR,YAAI,CAAC,UAAU;AACX,eAAK,UAAU,KAAK,OAAO;;AAG/B,gBAAQ,SAAS;AAEjB,YAAI,YAAY;AACZ,kBAAQ,aAAa,UAAU;;AAGnC,aAAK,aAAY;MACrB;;;;MAKO,YAAY,QAAc;AAC7B,cAAM,YAAY,MAAM;AAExB,mBAAW,SAAS,KAAK,WAAW;AAChC,gBAAM,YAAY,MAAM;;MAEhC;;;;MAKO,WAAW,QAAc;AAC5B,cAAM,WAAW,MAAM;AAEvB,mBAAW,SAAS,KAAK,WAAW;AAChC,gBAAM,WAAW,MAAM;;MAE/B;;MAGO,kBAAe;AAClB,cAAM,gBAAe;AAErB,iBAAS,QAAQ,GAAG,QAAQ,KAAK,UAAU,QAAQ,SAAS;AACxD,eAAK,UAAU,KAAK,EAAE,gBAAe;;MAE7C;MAEU,oBAAoB,SAAgC;AAC1D,eAAO,KAAK,sBAAsB,KAAK,oBAAoB,kBAAkB,OAAO,IAAI,KAAK;MACjG;;;;MAKU,WAAW,SAAgC;AACjD,YAAI,KAAK,eAAe,KAAK,qBAAqB;AAC9C,kBAAQ,KAAI;AACZ,cAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,aAAa,KAAK;AAC1B,oBAAQ,gBAAgB,KAAK;AAC7B,oBAAQ,gBAAgB,KAAK;;AAGjC,kBAAQ,YAAY,KAAK,oBAAoB,OAAO;AAEpD,kBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC7H,kBAAQ,QAAO;;MAEvB;;;;MAKO,MAAM,MAA4B;AACrC,cAAM,MAAM,IAAI;AAEhB,mBAAW,SAAS,KAAK,WAAW;AAChC,gBAAM,MAAM,IAAI;;MAExB;;MAGU,gBAAa;MAEvB;;;;MAKU,iBAAiB,eAAwB,SAAgC;AAC/E,YAAI,KAAK,YAAY,CAAC,KAAK,qBAAqB,WAAW,aAAa,GAAG;AACvE,gBAAM,iBAAiB,eAAe,OAAO;AAC7C,eAAK,uBAAuB,aAAa;AACzC,cAAI,KAAK,8BAA8B;AACnC,gBAAI,KAAK,wBAAwB,KAAK,MAAM,SAAQ,KAAM,KAAK,qBAAqB,SAAQ,GAAI;AAC5F,mBAAK,qBAAqB,QAAO;AACjC,mBAAK,uBAAuB;;AAEhC,gBAAI,CAAC,KAAK,sBAAsB;AAC5B,mBAAK,uBAAuB,IAAI,eAC5B,IACA,EAAE,OAAO,KAAK,gBAAgB,OAAO,QAAQ,KAAK,gBAAgB,OAAM,GACxE,KAAK,MAAM,SAAQ,GACnB,OACA,QAAQ,sBACR,UAAU,oBACV,KAAK;AAET,mBAAK,qBAAqB,WAAW;mBAClC;AACH,mBAAK,qBAAqB,QAAQ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;;;MAIzG;;;;MAKO,QAAQ,eAAwB,SAAgC;;AACnE,YAAI,CAAC,KAAK,YAAY,CAAC,KAAK,aAAa,KAAK,gBAAgB;AAC1D,iBAAO;;AAGX,aAAK,KAAK;AAEV,YAAI,KAAK,UAAU;AACf,eAAK,gBAAgB,eAAe,KAAK,kBAAkB,KAAK,6CAA6C;;AAGjH,YAAI,eAAe;AAEnB,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAEzB,aAAK,cAAa;AAElB,WAAG;AACC,cAAI,gBAAgB;AACpB,cAAI,iBAAiB;AACrB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB,eAAe,OAAO;AAE5C,cAAI,CAAC,KAAK,YAAY;AAClB,uBAAW,SAAS,KAAK,WAAW;AAChC,oBAAM,mBAAmB,SAAS,KAAK,mBAAmB;AAE1D,kBAAI,MAAM,QAAQ,KAAK,qBAAqB,OAAO,GAAG;AAClD,oBAAI,MAAM,aAAa,CAAC,MAAM,eAAe;AACzC,sBAAI,KAAK,wBAAwB,MAAM,OAAO,SAAS;AACnD,oCAAgB,KAAK,IAAI,eAAe,MAAM,gBAAgB,QAAQ,MAAM,uBAAuB,MAAM,qBAAqB;;AAElI,sBAAI,KAAK,yBAAyB,MAAM,QAAQ,SAAS;AACrD,qCAAiB,KAAK,IAAI,gBAAgB,MAAM,gBAAgB,SAAS,MAAM,sBAAsB,MAAM,sBAAsB;;;;;AAMjJ,gBAAI,KAAK,wBAAwB,iBAAiB,GAAG;AACjD,+BAAiB,KAAK,sBAAsB,KAAK;AACjD,kBAAI,KAAK,UAAU,gBAAgB,MAAM;AACrC,iBAAA,KAAA,KAAK,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,aAAY;AACzB,qBAAK,QAAQ,gBAAgB;AAC7B,qBAAK,OAAO,wBAAwB;AACpC,qBAAK,iBAAiB;;;AAG9B,gBAAI,KAAK,yBAAyB,kBAAkB,GAAG;AACnD,gCAAkB,KAAK,qBAAqB,KAAK;AACjD,kBAAI,KAAK,WAAW,iBAAiB,MAAM;AACvC,iBAAA,KAAA,KAAK,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,aAAY;AACzB,qBAAK,SAAS,iBAAiB;AAC/B,qBAAK,QAAQ,wBAAwB;AACrC,qBAAK,iBAAiB;;;AAI9B,iBAAK,aAAY;;AAErB;iBACK,KAAK,kBAAkB,eAAe,KAAK;AAEpD,YAAI,gBAAgB,KAAK,KAAK,sBAAsB;AAChD,iBAAO,MAAM,gDAAgD,KAAK,IAAI,cAAc,KAAK,QAAQ,GAAG;;AAGxG,gBAAQ,QAAO;AAEf,YAAI,KAAK,UAAU;AACf,eAAK,eAAc;AAEnB,eAAK,WAAW;;AAGpB,eAAO;MACX;MAEU,eAAY;MAEtB;;;;MAQO,MAAM,SAAkC,sBAA8B;AACzE,cAAM,sCAAsC,KAAK,gCAAgC,KAAK;AACtF,cAAM,kBAAkB,sCAAuD,KAAK,qBAAsB,WAAU,IAAK;AAEzH,YAAI,qCAAqC;AACrC,0BAAgB,KAAI;AACpB,0BAAgB,UAAU,CAAC,KAAK,gBAAgB,MAAM,CAAC,KAAK,gBAAgB,GAAG;AAC/E,cAAI,sBAAsB;AACtB,iBAAK,iBAAiB,YAAY,KAAK,uBAAuB;AAC9D,iCAAqB,eAAe,KAAK,yBAAyB,KAAK,eAAe;AACtF,4BAAgB,UAAU,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;iBACnI;AACH,4BAAgB,UAAU,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;;AAI9I,aAAK,WAAW,eAAe;AAE/B,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc;AACnB,eAAK,iBAAiB,eAAe;;AAGzC,mBAAW,SAAS,KAAK,WAAW;AAEhC,cAAI,sBAAsB;AACtB,gBAAI,CAAC,MAAM,gBAAgB,oBAAoB,GAAG;AAC9C;;;AAGR,gBAAM,QAAQ,iBAAiB,oBAAoB;;AAGvD,YAAI,qCAAqC;AACrC,0BAAgB,QAAO;AACvB,kBAAQ,KAAI;AACZ,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,UAAU,gBAAgB,QAAQ,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,GAAG;AAC7F,kBAAQ,QAAO;;AAGnB,gBAAQ,QAAO;MACnB;MAEO,oBAAoB,SAAoB,wBAAiC,OAAO,WAAyC;AAC5H,YAAI,CAAC,KAAK,UAAU;AAChB;;AAGJ,iBAAS,QAAQ,GAAG,QAAQ,KAAK,SAAS,QAAQ,SAAS;AACvD,gBAAM,OAAO,KAAK,SAAS,KAAK;AAEhC,cAAI,CAAC,aAAa,UAAU,IAAI,GAAG;AAC/B,oBAAQ,KAAK,IAAI;;AAGrB,cAAI,CAAC,uBAAuB;AACxB,iBAAK,oBAAoB,SAAS,OAAO,SAAS;;;MAG9D;;;;MAKO,gBAAgB,GAAW,GAAW,IAA+B,MAAc,WAAmB,aAAqB,QAAiB,QAAe;AAC9J,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,aAAa,KAAK,eAAe;AAC3D,iBAAO;;AAIX,cAAM,WAAW,MAAM,SAAS,GAAG,CAAC;AAGpC,YAAI,CAAC,YAAY,KAAK,cAAc;AAChC,iBAAO;;AAIX,iBAAS,QAAQ,KAAK,UAAU,SAAS,GAAG,SAAS,GAAG,SAAS;AAC7D,gBAAM,QAAQ,KAAK,UAAU,KAAK;AAClC,cAAI,MAAM,gBAAgB,GAAG,GAAG,IAAI,MAAM,WAAW,aAAa,QAAQ,MAAM,GAAG;AAC/E,gBAAI,MAAM,aAAa;AACnB,mBAAK,MAAM,cAAc,MAAM,WAAW;;AAE9C,mBAAO;;;AAIf,YAAI,CAAC,UAAU;AACX,iBAAO;;AAGX,YAAI,CAAC,KAAK,kBAAkB;AACxB,iBAAO;;AAGX,eAAO,KAAK,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,aAAa,QAAQ,MAAM;MAC1F;;;;MAKU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,oBAAoB,SAAS,KAAK,eAAe;MAC1D;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AAEnC,YAAI,KAAK,oBAAoB;AACzB,8BAAoB,qBAAqB,CAAA;AACzC,eAAK,mBAAmB,UAAU,oBAAoB,kBAAkB;;AAG5E,YAAI,CAAC,KAAK,SAAS,QAAQ;AACvB;;AAGJ,4BAAoB,WAAW,CAAA;AAE/B,mBAAW,SAAS,KAAK,UAAU;AAC/B,gBAAM,2BAA2B,CAAA;AACjC,gBAAM,UAAU,wBAAwB;AACxC,8BAAoB,SAAS,KAAK,wBAAwB;;MAElE;;MAGO,UAAO;;AACV,cAAM,QAAO;AAEb,iBAAS,QAAQ,KAAK,SAAS,SAAS,GAAG,SAAS,GAAG,SAAS;AAC5D,eAAK,SAAS,KAAK,EAAE,QAAO;;AAEhC,SAAA,KAAA,KAAK,0BAAoB,QAAA,OAAA,SAAA,SAAA,GAAE,QAAO;MACtC;;;;MAKO,kBAAkB,kBAAuB,MAA4B;;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAC9C,aAAK,MAAM,IAAI;AAGf,YAAI,iBAAiB,oBAAoB;AACrC,gBAAM,YAAY,MAAM,YAAY,iBAAiB,iBAAiB,mBAAmB,SAAS;AAClG,eAAK,sBAAsB,IAAI,UAAS;AACxC,WAAA,KAAA,KAAK,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAE,MAAM,iBAAiB,kBAAkB;;AAGvE,YAAI,CAAC,iBAAiB,UAAU;AAC5B;;AAGJ,mBAAW,aAAa,iBAAiB,UAAU;AAC/C,eAAK,WAAW,QAAQ,MAAM,WAAW,IAAI,CAAC;;MAEtD;MAEO,UAAO;AACV,mBAAW,SAAS,KAAK,UAAU;AAC/B,cAAI,CAAC,MAAM,QAAO,GAAI;AAClB,mBAAO;;;AAIf,eAAO;MACX;;AAroBA,eAAA;MADC,UAAS;;AAqBH,eAAA;MADN,UAAS;;AAKV,eAAA;MADC,UAAS;;AAqBV,eAAA;MADC,UAAS;;AAqBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAyjBd,kBAAc,yBAAyB,SAAS;;;;;IC1qBnC;;;;AAPb;AAEA;AACA;AAIM,IAAO,YAAP,cAAyB,UAAS;;MAOpC,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;MAIA,IAAW,eAAY;AACnB,eAAO,KAAK,cAAc,CAAC;MAC/B;MAEA,IAAW,aAAa,OAAa;AACjC,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAGZ,YAAI,KAAK,cAAc,CAAC,MAAM,SAAS,KAAK,cAAc,CAAC,MAAM,SAAS,KAAK,cAAc,CAAC,MAAM,SAAS,KAAK,cAAc,CAAC,MAAM,OAAO;AAC1I;;AAGJ,aAAK,cAAc,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI;AAChG,aAAK,aAAY;MACrB;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK,cAAc,CAAC;MAC/B;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,cAAc,CAAC,MAAM,OAAO;AACjC;;AAEJ,aAAK,cAAc,CAAC,IAAI;MAC5B;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK,cAAc,CAAC;MAC/B;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,cAAc,CAAC,MAAM,OAAO;AACjC;;AAEJ,aAAK,cAAc,CAAC,IAAI;MAC5B;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK,cAAc,CAAC;MAC/B;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,cAAc,CAAC,MAAM,OAAO;AACjC;;AAEJ,aAAK,cAAc,CAAC,IAAI;MAC5B;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK,cAAc,CAAC;MAC/B;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,cAAc,CAAC,MAAM,OAAO;AACjC;;AAEJ,aAAK,cAAc,CAAC,IAAI;MAC5B;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AA9FX,aAAA,aAAa;AACb,aAAA,gBAAgB,CAAC,GAAG,GAAG,GAAG,CAAC;AAC3B,aAAA,gBAAgB,CAAC,GAAG,GAAG,GAAG,CAAC;MA8FnC;MAEU,eAAY;AAClB,eAAO;MACX;;MAGU,4BAAyB;AAC/B,YAAI,kBAAkB;AACtB,YAAI,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,GAAG;AAE1H,6BAAmB;;AAEvB,YAAI,KAAK,WAAW;AAChB,6BAAmB,KAAK,YAAY;;AAExC,eAAO;MACX;;MAGU,4BAAyB;AAC/B,YAAI,mBAAmB;AACvB,YAAI,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,GAAG;AAE1H,8BAAoB;;AAExB,YAAI,KAAK,WAAW;AAChB,8BAAoB,KAAK,YAAY;;AAEzC,eAAO;MACX;MAEU,kBAAkB,SAAgC;AACxD,eAAO,KAAK,oBAAoB,OAAO;MAC3C;MAEU,WAAW,SAAgC;AACjD,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,YAAI,KAAK,eAAe,KAAK,qBAAqB;AAC9C,kBAAQ,YAAY,KAAK,kBAAkB,OAAO;AAElD,cAAI,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,GAAG;AAC1H,iBAAK,iBAAiB,SAAS,KAAK,aAAa,CAAC;AAClD,oBAAQ,KAAI;iBACT;AACH,oBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;;AAIrI,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,oBAAQ,aAAa;AACrB,oBAAQ,gBAAgB;AACxB,oBAAQ,gBAAgB;;AAG5B,cAAI,KAAK,SAAS,KAAK,UAAU;AAC7B,oBAAQ,cAAc,KAAK,WAAW,KAAK,SAAS,kBAAkB,OAAO,IAAI,KAAK;;AAE1F,kBAAQ,YAAY,KAAK;AAEzB,cAAI,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,GAAG;AAC1H,iBAAK,iBAAiB,SAAS,KAAK,aAAa,CAAC;AAClD,oBAAQ,OAAM;iBACX;AACH,oBAAQ,WACJ,KAAK,gBAAgB,OAAO,KAAK,aAAa,GAC9C,KAAK,gBAAgB,MAAM,KAAK,aAAa,GAC7C,KAAK,gBAAgB,QAAQ,KAAK,YAClC,KAAK,gBAAgB,SAAS,KAAK,UAAU;;;AAKzD,gBAAQ,QAAO;MACnB;MAEU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,oBAAoB,SAAS,IAAI,KAAK;AAC3C,aAAK,oBAAoB,UAAU,IAAI,KAAK;AAC5C,aAAK,oBAAoB,QAAQ,KAAK;AACtC,aAAK,oBAAoB,OAAO,KAAK;MACzC;MAEQ,iBAAiB,SAAkC,SAAiB,GAAC;AACzE,cAAM,IAAI,KAAK,gBAAgB,OAAO;AACtC,cAAM,IAAI,KAAK,gBAAgB,MAAM;AACrC,cAAM,QAAQ,KAAK,gBAAgB,QAAQ,SAAS;AACpD,cAAM,SAAS,KAAK,gBAAgB,SAAS,SAAS;AAEtD,iBAAS,QAAQ,GAAG,QAAQ,KAAK,cAAc,QAAQ,SAAS;AAC5D,eAAK,cAAc,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,SAAS,GAAG,KAAK,IAAI,QAAQ,GAAG,KAAK,cAAc,KAAK,CAAC,CAAC,CAAC;;AAG7G,gBAAQ,UAAS;AACjB,gBAAQ,OAAO,IAAI,KAAK,cAAc,CAAC,GAAG,CAAC;AAC3C,gBAAQ,OAAO,IAAI,QAAQ,KAAK,cAAc,CAAC,GAAG,CAAC;AACnD,gBAAQ,IAAI,IAAI,QAAQ,KAAK,cAAc,CAAC,GAAG,IAAI,KAAK,cAAc,CAAC,GAAG,KAAK,cAAc,CAAC,GAAI,IAAI,KAAK,KAAM,GAAG,KAAK,KAAK,CAAC;AAC/H,gBAAQ,OAAO,IAAI,OAAO,IAAI,SAAS,KAAK,cAAc,CAAC,CAAC;AAC5D,gBAAQ,IAAI,IAAI,QAAQ,KAAK,cAAc,CAAC,GAAG,IAAI,SAAS,KAAK,cAAc,CAAC,GAAG,KAAK,cAAc,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC;AACxH,gBAAQ,OAAO,IAAI,KAAK,cAAc,CAAC,GAAG,IAAI,MAAM;AACpD,gBAAQ,IAAI,IAAI,KAAK,cAAc,CAAC,GAAG,IAAI,SAAS,KAAK,cAAc,CAAC,GAAG,KAAK,cAAc,CAAC,GAAG,KAAK,KAAK,GAAG,KAAK,EAAE;AACtH,gBAAQ,OAAO,GAAG,IAAI,KAAK,cAAc,CAAC,CAAC;AAC3C,gBAAQ,IAAI,IAAI,KAAK,cAAc,CAAC,GAAG,IAAI,KAAK,cAAc,CAAC,GAAG,KAAK,cAAc,CAAC,GAAG,KAAK,IAAK,IAAI,KAAK,KAAM,CAAC;AACnH,gBAAQ,UAAS;MACrB;MAEU,iBAAiB,SAAgC;AACvD,YAAI,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,KAAK,KAAK,cAAc,CAAC,MAAM,GAAG;AAC1H,eAAK,iBAAiB,SAAS,KAAK,UAAU;AAC9C,kBAAQ,KAAI;;MAEpB;;AApNA,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAcV,eAAA;MADC,UAAS;;AAcV,eAAA;MADC,UAAS;;AAcV,eAAA;MADC,UAAS;;AA8Id,kBAAc,yBAAyB,SAAS;;;;;ICvNpC,cAyBC;;;;AAtCb;AAEA;AACA;AACA;AAEA;AAEA;AAKA,KAAA,SAAYC,eAAY;AAIpB,MAAAA,cAAAA,cAAA,MAAA,IAAA,CAAA,IAAA;AAKA,MAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AAKA,MAAAA,cAAAA,cAAA,UAAA,IAAA,CAAA,IAAA;AAKA,MAAAA,cAAAA,cAAA,kBAAA,IAAA,CAAA,IAAA;IACJ,GApBY,iBAAA,eAAY,CAAA,EAAA;AAyBlB,IAAO,YAAP,cAAyB,QAAO;;;;MAmClC,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,YAAY,OAAc;AACjC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,aAAK,eAAe;AAEpB,YAAI,KAAK,cAAc;AACnB,eAAK,OAAO,wBAAwB;AACpC,eAAK,QAAQ,wBAAwB;;AAGzC,aAAK,aAAY;MACrB;;;;MAMA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAa,OAA6B;AACjD,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAEJ,aAAK,gBAAgB,CAAC;AACtB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;;;;MAKA,IAAW,KAAK,OAAa;AACzB,YAAI,KAAK,UAAU,OAAO;AACtB;;AAEJ,aAAK,QAAQ,QAAQ;AACrB,aAAK,aAAY;AAEjB,aAAK,wBAAwB,gBAAgB,IAAI;MACrD;;;;MAMA,IAAW,0BAAuB;AAC9B,eAAO,KAAK;MAChB;;;;MAKA,IAAW,wBAAwB,OAAa;AAC5C,YAAI,KAAK,6BAA6B,OAAO;AACzC;;AAGJ,aAAK,2BAA2B;AAChC,aAAK,aAAY;MACrB;;;;MAMA,IAAW,wBAAqB;AAC5B,eAAO,KAAK;MAChB;;;;MAKA,IAAW,sBAAsB,OAAa;AAC1C,YAAI,KAAK,2BAA2B,OAAO;AACvC;;AAGJ,aAAK,yBAAyB;AAC9B,aAAK,aAAY;MACrB;;;;MAMA,IAAW,YAAY,OAAsB;AACzC,YAAI,KAAK,aAAa,WAAW,KAAK,GAAG;AACrC,eAAK,aAAY;;MAEzB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK,aAAa,SAAS,KAAK,KAAK;MAChD;;;;MAMA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAEJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAEJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,YAAY,OAAc;AACjC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,0BAAuB;AAC9B,eAAO,KAAK;MAChB;MAEA,IAAW,wBAAwB,OAAc;AAC7C,YAAI,KAAK,6BAA6B,OAAO;AACzC;;AAEJ,aAAK,2BAA2B;AAChC,aAAK,aAAY;MACrB;;;;MAMA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAEJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;;;;;MAQA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAc;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAEJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;;;;;MAOA,YAIWC,OACP,OAAe,IAAE;AAEjB,cAAMA,KAAI;AAHH,aAAA,OAAAA;AA1SH,aAAA,QAAQ;AACR,aAAA,gBAAgB,aAAa;AAC7B,aAAA,2BAA2B,QAAQ;AACnC,aAAA,yBAAyB,QAAQ;AAGjC,aAAA,eAAwB;AACxB,aAAA,eAA6B,IAAI,aAAa,CAAC;AAC/C,aAAA,gBAAwB;AACxB,aAAA,gBAAwB;AACxB,aAAA,aAAsB;AACtB,aAAA,eAAwB;AACxB,aAAA,eAAuB;AACvB,aAAA,oBAA6B;AAC7B,aAAA,2BAAoC;AAKrC,aAAA,0BAA0B,IAAI,WAAU;AAKxC,aAAA,yBAAyB,IAAI,WAAU;AA2ZtC,aAAA,aAAuB,CAAA;AApI3B,aAAK,OAAO;MAChB;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,iBAAiB,eAAwB,SAAgC;AAC/E,YAAI,CAAC,KAAK,eAAe,KAAK,SAAS;AACnC,eAAK,cAAc,QAAQ,eAAe,QAAQ,IAAI;;AAE1D,cAAM,iBAAiB,eAAe,OAAO;AAG7C,aAAK,SAAS,KAAK,YAAY,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,OAAO;AAC/F,aAAK,uBAAuB,gBAAgB,IAAI;AAEhD,YAAI,eAAuB;AAE3B,iBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,gBAAM,OAAO,KAAK,OAAO,CAAC;AAE1B,cAAI,KAAK,QAAQ,cAAc;AAC3B,2BAAe,KAAK;;;AAI5B,YAAI,KAAK,cAAc;AACnB,cAAI,KAAK,kBAAkB,aAAa,QAAQ,KAAK,mBAAmB;AACpE,kBAAM,WAAW,KAAK,KAAK,KAAK,oBAAoB,IAAI,KAAK,KAAK,KAAK,qBAAqB,IAAI,KAAK,KAAK,YAAY;AACtH,gBAAI,aAAa,KAAK,OAAO,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,KAAK,GAAG;AACrF,mBAAK,OAAO,cAAc,UAAU,aAAa,cAAc;AAC/D,mBAAK,iBAAiB;;;AAG9B,cAAI,YAAa,KAAK,sBAAsB,KAAK,yBAAyB,KAAK,YAAY,SAAS,KAAK,OAAO,SAAU;AAE1H,cAAI,KAAK,OAAO,SAAS,KAAK,KAAK,aAAa,kBAAkB,GAAG;AACjE,gBAAI,cAAc;AAClB,gBAAI,KAAK,aAAa,SAAS;AAC3B,4BAAc,KAAK,aAAa,SAAS,KAAK,KAAK;mBAChD;AACH,4BAAc,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;;AAGpI,0BAAc,KAAK,OAAO,SAAS,KAAK;;AAG5C,cAAI,cAAc,KAAK,QAAQ,eAAe;AAC1C,iBAAK,QAAQ,cAAc,WAAW,aAAa,cAAc;AACjE,iBAAK,iBAAiB;;;MAGlC;MAEQ,UAAU,MAAc,WAAmB,GAAW,SAAgC;AAC1F,cAAM,QAAQ,KAAK,gBAAgB;AACnC,YAAI,IAAI;AACR,gBAAQ,KAAK,0BAA0B;UACnC,KAAK,QAAQ;AACT,gBAAI;AACJ;UACJ,KAAK,QAAQ;AACT,gBAAI,QAAQ;AACZ;UACJ,KAAK,QAAQ;AACT,iBAAK,QAAQ,aAAa;AAC1B;;AAGR,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,YAAI,KAAK,cAAc;AACnB,kBAAQ,WAAW,MAAM,KAAK,gBAAgB,OAAO,GAAG,CAAC;;AAE7D,gBAAQ,SAAS,MAAM,KAAK,gBAAgB,OAAO,GAAG,CAAC;AAEvD,YAAI,KAAK,YAAY;AACjB,eAAK,UAAU,KAAK,gBAAgB,OAAO,GAAG,IAAI,GAAG,KAAK,gBAAgB,OAAO,IAAI,WAAW,IAAI,GAAG,OAAO;;AAGlH,YAAI,KAAK,cAAc;AACnB,eAAK,UAAU,KAAK,gBAAgB,OAAO,GAAG,IAAI,KAAK,mBAAmB,GAAG,KAAK,gBAAgB,OAAO,IAAI,WAAW,IAAI,KAAK,mBAAmB,GAAG,OAAO;;MAEtK;MAEQ,UAAU,OAAe,OAAe,KAAa,KAAa,SAAgC;AACtG,gBAAQ,UAAS;AACjB,gBAAQ,YAAY,KAAK,MAAM,KAAK,mBAAmB,IAAI;AAC3D,gBAAQ,OAAO,OAAO,KAAK;AAC3B,gBAAQ,OAAO,KAAK,GAAG;AACvB,YAAI,KAAK,gBAAgB,KAAK,yBAAyB;AACnD,kBAAQ,OAAM;AACd,kBAAQ,KAAI;eACT;AACH,gBAAM,gBAAgB,QAAQ;AAC9B,kBAAQ,cAAc,QAAQ;AAC9B,kBAAQ,OAAM;AACd,kBAAQ,cAAc;;AAE1B,gBAAQ,UAAS;MACrB;;;;MAKO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAGzB,aAAK,aAAa,OAAO;AAEzB,gBAAQ,QAAO;MACnB;MAEU,aAAa,SAAgC;AACnD,cAAM,aAAa,OAAO;AAC1B,YAAI,KAAK,cAAc;AACnB,kBAAQ,YAAY,KAAK;AACzB,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,WAAW;AACnB,kBAAQ,aAAa;;MAE7B;MAIU,YAAY,UAAkB,WAAmB,SAAgC;AACvF,aAAK,WAAW,SAAS;AACzB,cAAM,SAAS,KAAK,KAAK,MAAM,IAAI;AAEnC,YAAI,KAAK,kBAAkB,aAAa,UAAU;AAC9C,qBAAW,SAAS,QAAQ;AACxB,iBAAK,WAAW,KAAK,KAAK,mBAAmB,OAAO,UAAU,OAAO,CAAC;;mBAEnE,KAAK,kBAAkB,aAAa,UAAU;AACrD,qBAAW,SAAS,QAAQ;AACxB,iBAAK,WAAW,KAAK,GAAG,KAAK,mBAAmB,OAAO,UAAU,OAAO,CAAC;;mBAEtE,KAAK,kBAAkB,aAAa,kBAAkB;AAC7D,qBAAW,SAAS,QAAQ;AACxB,iBAAK,WAAW,KAAK,GAAG,KAAK,2BAA2B,OAAO,UAAU,WAAY,OAAO,CAAC;;eAE9F;AACH,qBAAW,SAAS,QAAQ;AACxB,iBAAK,WAAW,KAAK,KAAK,WAAW,OAAO,OAAO,CAAC;;;AAI5D,eAAO,KAAK;MAChB;MAEU,WAAW,OAAe,IAAI,SAAgC;AACpE,eAAO,EAAE,MAAM,MAAM,OAAO,KAAK,qBAAqB,QAAQ,YAAY,IAAI,CAAC,EAAC;MACpF;;MAGQ,kBAAkB,WAAmB,OAAe,YAAkB;AAC1E,cAAM,OAAO,YAAY,QAAQ,YAAY,QAAQ;AAErD,cAAM,YAAY,YAAY;AAC9B,cAAM,cAAc,KAAK,IAAI,KAAK,MAAM,OAAO,SAAS,GAAG,CAAC;AAC5D,eAAO;MACX;MAEU,mBAAmB,OAAe,IAAI,OAAe,SAAgC;AAC3F,YAAI,YAAY,KAAK,qBAAqB,QAAQ,YAAY,IAAI,CAAC;AAEnE,YAAI,cAAc,KAAK,kBAAkB,WAAW,OAAO,KAAK,MAAM;AAItE,cAAM,aAAa,MAAM,QAAQ,MAAM,KAAK,IAAI;AAChD,YAAI,CAAC,YAAY;AAEb,iBAAO,KAAK,SAAS,KAAK,YAAY,OAAO;AACzC,mBAAO,KAAK,MAAM,GAAG,CAAC,WAAW;AACjC,wBAAY,KAAK,qBAAqB,QAAQ,YAAY,OAAO,GAAG,CAAC;AAErE,0BAAc,KAAK,kBAAkB,WAAW,OAAO,KAAK,MAAM;;AAGtE,kBAAQ;eACL;AACH,iBAAO,WAAW,UAAU,YAAY,OAAO;AAC3C,uBAAW,OAAO,WAAW,SAAS,aAAa,WAAW;AAC9D,mBAAO,GAAG,WAAW,KAAK,EAAE,CAAC;AAC7B,wBAAY,KAAK,qBAAqB,QAAQ,YAAY,IAAI,CAAC;AAE/D,0BAAc,KAAK,kBAAkB,WAAW,OAAO,KAAK,MAAM;;;AAI1E,eAAO,EAAE,MAAM,MAAM,OAAO,UAAS;MACzC;MAEQ,qBAAqB,aAAyB;AAClD,YAAI,YAAY,0BAA0B,QAAW;AACjD,iBAAO,KAAK,IAAI,YAAY,qBAAqB,IAAI,KAAK,IAAI,YAAY,sBAAsB;;AAEpG,eAAO,YAAY;MACvB;MAEU,mBAAmB,OAAe,IAAI,OAAe,SAAgC;AAC3F,cAAM,QAAQ,CAAA;AACd,cAAM,QAAQ,KAAK,wBAAwB,KAAK,sBAAsB,IAAI,IAAI,KAAK,MAAM,KAAK,YAAY;AAC1G,YAAI,YAAY,KAAK,qBAAqB,QAAQ,YAAY,IAAI,CAAC;AAEnE,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAM,WAAW,IAAI,IAAI,OAAO,KAAK,eAAe,MAAM,CAAC,IAAI,MAAM,CAAC;AACtE,gBAAM,YAAY,KAAK,qBAAqB,QAAQ,YAAY,QAAQ,CAAC;AACzE,cAAI,YAAY,SAAS,IAAI,GAAG;AAC5B,kBAAM,KAAK,EAAE,MAAM,MAAM,OAAO,UAAS,CAAE;AAC3C,mBAAO,MAAM,CAAC;AACd,wBAAY,KAAK,qBAAqB,QAAQ,YAAY,IAAI,CAAC;iBAC5D;AACH,wBAAY;AACZ,mBAAO;;;AAGf,cAAM,KAAK,EAAE,MAAM,MAAM,OAAO,UAAS,CAAE;AAE3C,eAAO;MACX;MAEU,2BAA2B,OAAe,IAAI,OAAe,QAAgB,SAAgC;AACnH,cAAM,QAAQ,KAAK,mBAAmB,MAAM,OAAO,OAAO;AAC1D,iBAAS,IAAI,GAAG,KAAK,MAAM,QAAQ,KAAK;AACpC,gBAAM,gBAAgB,KAAK,yBAAyB,CAAC;AACrD,cAAI,gBAAgB,UAAU,IAAI,GAAG;AACjC,kBAAM,WAAW,MAAM,IAAI,CAAC;AAC5B,kBAAM,cAAc,MAAM,IAAI,CAAC;AAC/B,kBAAM,IAAI,CAAC,IAAI,KAAK,mBAAmB,SAAS,OAAO,KAAK,eAAe,YAAY,MAAM,OAAO,OAAO;AAC3G,kBAAM,gBAAgB,MAAM,SAAS,IAAI;AACzC,qBAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,oBAAM,IAAG;;AAEb,mBAAO;;;AAIf,eAAO;MACX;MAEU,aAAa,SAAgC;AACnD,YAAI,CAAC,KAAK,eAAe,CAAC,KAAK,QAAQ;AACnC;;AAEJ,cAAM,SAAS,KAAK,gBAAgB;AACpC,YAAI,QAAQ;AACZ,gBAAQ,KAAK,wBAAwB;UACjC,KAAK,QAAQ;AACT,oBAAQ,KAAK,YAAY;AACzB;UACJ,KAAK,QAAQ;AACT,oBAAQ,SAAS,KAAK,YAAY,UAAU,KAAK,OAAO,SAAS,KAAK,KAAK,YAAY;AACvF;UACJ,KAAK,QAAQ;AACT,oBAAQ,KAAK,YAAY,UAAU,SAAS,KAAK,YAAY,SAAS,KAAK,OAAO,UAAU;AAC5F;;AAGR,iBAAS,KAAK,gBAAgB;AAE9B,iBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,gBAAM,OAAO,KAAK,OAAO,CAAC;AAE1B,cAAI,MAAM,KAAK,KAAK,aAAa,kBAAkB,GAAG;AAClD,gBAAI,KAAK,aAAa,SAAS;AAC3B,uBAAS,KAAK,aAAa,SAAS,KAAK,KAAK;mBAC3C;AACH,sBAAQ,QAAQ,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;;;AAI1I,eAAK,UAAU,KAAK,MAAM,KAAK,OAAO,OAAO,OAAO;AACpD,mBAAS,KAAK,YAAY;;MAElC;MAEQ,yBAAyB,WAAiB;AAC9C,YAAI,YAAY,KAAK,sBAAsB,KAAK,yBAAyB,KAAK,YAAY,SAAS;AAEnG,YAAI,YAAY,KAAK,KAAK,aAAa,kBAAkB,GAAG;AACxD,cAAI,cAAc;AAClB,cAAI,KAAK,aAAa,SAAS;AAC3B,0BAAc,KAAK,aAAa,SAAS,KAAK,KAAK;iBAChD;AACH,0BAAc,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;;AAGpI,wBAAc,YAAY,KAAK;;AAGnC,eAAO;MACX;;;;;MAMO,wBAAqB;;AACxB,YAAI,KAAK,QAAQ,KAAK,eAAe;AAEjC,gBAAM,WAAU,KAAA,YAAY,uBAAiB,QAAA,OAAA,SAAA,SAAA,GAAE,aAAa,GAAG,CAAC,EAAE,WAAW,IAAI;AACjF,cAAI,SAAS;AACT,iBAAK,aAAa,OAAO;AACzB,gBAAI,CAAC,KAAK,aAAa;AACnB,mBAAK,cAAc,QAAQ,eAAe,QAAQ,IAAI;;AAE1D,kBAAM,QAAQ,KAAK,SACb,KAAK,SACL,KAAK,YACD,KAAK,gBAAgB,KAAK,uBAAuB,KAAK,uBACtD,KAAK,iBAAiB,KAAK,sBAAsB,KAAK,wBACtD,OAAO;AAEjB,mBAAO,KAAK,yBAAyB,MAAM,MAAM;;;AAGzD,eAAO;MACX;MAEA,UAAO;AACH,cAAM,QAAO;AAEb,aAAK,wBAAwB,MAAK;MACtC;;AAnlBA,eAAA;MADC,UAAS;;AA0BV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AAqBV,eAAA;MADC,UAAS;;AAqBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAoBV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AA2Wd,kBAAc,yBAAyB,SAAS;;;;;ICxpBnC;;;;AAbb;AACA;AAEA;AAEA;AACA;AAEA;AAKM,IAAO,QAAP,MAAO,eAAc,QAAO;;;;MAiE9B,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEO,UAAO;AACV,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,4BAAyB;AAChC,eAAO,KAAK;MAChB;MAEA,IAAW,0BAA0B,OAAc;AAC/C,YAAI,KAAK,+BAA+B,OAAO;AAC3C;;AAGJ,aAAK,6BAA6B;MACtC;;;;MAMA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAElB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AAEnB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAa;AAC7B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AAEjB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AAEpB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AAEnB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAElB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AAEpB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;MAEA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAGJ,aAAK,gBAAgB;AAErB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;MAMA,IAAW,mCAAgC;AACvC,eAAO,KAAK;MAChB;MAEA,IAAW,iCAAiC,OAAc;AACtD,YAAI,KAAK,sCAAsC,OAAO;AAClD;;AAGJ,aAAK,oCAAoC;AAEzC,YAAI,KAAK,qCAAqC,KAAK,SAAS;AACxD,eAAK,oCAAmC;;MAEhD;;MAGA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;MAGA,IAAW,oCAAiC;AACxC,eAAO,KAAK;MAChB;;;;;MAOA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAElB,YAAI,SAAS,KAAK,SAAS;AACvB,eAAK,2BAA0B;;MAEvC;;MAIA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAa;AAC5B,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,aAAK,WAAW;AAEhB,aAAK,aAAY;MACrB;;;;MAKO,UAAU,GAAW,qBAA8B,OAAK;;AAC3D,cAAM,QAAQ,KAAK,UAAU;AAC7B,cAAM,SAAS,KAAK,UAAU;AAG9B,cAAM,WAAS,MAAA,KAAA,KAAK,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,MAAM,YAAY;AAClE,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,4CAA4C;;AAEhE,cAAM,SAAS,OAAO,aAAa,QAAQ,KAAK;AAEhD,cAAM,UAAU,OAAO,WAAW,IAAI;AAEtC,gBAAQ,UAAU,OAAO,QAAQ,GAAG,OAAO,SAAS,CAAC;AACrD,gBAAQ,OAAQ,IAAI,KAAK,KAAM,CAAC;AAEhC,gBAAQ,UAAU,KAAK,WAAW,GAAG,GAAG,OAAO,QAAQ,CAAC,QAAQ,GAAG,CAAC,SAAS,GAAG,OAAO,MAAM;AAE7F,cAAM,UAAkB,OAAO,UAAU,WAAW;AACpD,cAAM,eAAe,IAAI,OAAM,KAAK,OAAO,WAAW,OAAO;AAE7D,YAAI,oBAAoB;AACpB,uBAAa,WAAW,KAAK;AAC7B,uBAAa,aAAa,KAAK;AAC/B,uBAAa,UAAU,KAAK;AAC5B,uBAAa,aAAa,IAAI,IAAI,KAAK,cAAc,KAAK;AAC1D,uBAAa,cAAc,IAAI,IAAI,KAAK,aAAa,KAAK;;AAG9D,aAAK,2BAA2B,MAAM,cAAc,CAAC;AAErD,aAAK,gBAAgB,OAAO;AAE5B,eAAO;MACX;MAEQ,2BAA2B,UAAiB,UAAiB,GAAS;AAC1E,YAAI,CAAC,SAAS,QAAQ;AAClB;;AAGJ,YAAI,SAAS,oCAAoC;AAC7C,eAAK,0BAA0B,UAAU,UAAU,CAAC;AACpD,eAAK,aAAY;eACd;AACH,mBAAS,kCAAkC,QAAQ,MAAK;AACpD,iBAAK,0BAA0B,UAAU,UAAU,CAAC;AACpD,iBAAK,aAAY;UACrB,CAAC;;MAET;MAEQ,0BAA0B,UAAiB,UAAiB,GAAS;AACzE,YAAI,UAAU,SAAS,YACnB,SAAS,SAAS,WAClB,WAAW,SAAS,SAAS,OAC7B,YAAY,SAAS,SAAS;AAElC,YAAI,UAAU,SACV,SAAS,QACT,WAAW,SAAS,aACpB,YAAY,SAAS;AAEzB,YAAI,KAAK,GAAG;AACR,gBAAM,OAAO,IAAI,IAAI,KAAK;AAC1B,cAAI,IAAI;AACR,mBAAS,IAAI,GAAG,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE,GAAG;AAClC,sBAAU,EAAE,SAAS,YAAY,KAAK,OAAO,YAAY;AACzD,sBAAU,UAAU,WAAW,KAAK,OAAO,WAAW;AACtD,aAAC,UAAU,SAAS,IAAI,CAAC,WAAW,QAAQ;AAC5C,gBAAI,IAAI,GAAG;AACP,wBAAU;mBACP;AACH,yBAAW;;AAEf,sBAAU;AACV,qBAAS;AACT,aAAC,UAAU,SAAS,IAAI,CAAC,WAAW,QAAQ;;;AAIpD,iBAAS,aAAa;AACtB,iBAAS,YAAY;AACrB,iBAAS,cAAc;AACvB,iBAAS,eAAe;MAC5B;MAEQ,sCAAmC;;AACvC,cAAM,QAAQ,KAAK,UAAU;AAC7B,cAAM,SAAS,KAAK,UAAU;AAE9B,YAAI,CAAC,KAAK,gBAAgB;AACtB,gBAAM,WAAS,MAAA,KAAA,KAAK,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,MAAM,YAAY;AAClE,cAAI,CAAC,QAAQ;AACT,kBAAM,IAAI,MAAM,4CAA4C;;AAEhE,eAAK,iBAAiB,OAAO,aAAa,OAAO,MAAM;;AAE3D,cAAM,SAAS,KAAK;AACpB,cAAM,UAAU,OAAO,WAAW,IAAI;AAEtC,gBAAQ,UAAU,KAAK,WAAW,GAAG,GAAG,OAAO,MAAM;AACrD,cAAM,YAAY,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM;AAG1D,aAAK,aAAa;AAClB,aAAK,cAAc;AACnB,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,gBAAM,QAAQ,UAAU,KAAK,IAAI,IAAI,CAAC;AAEtC,cAAI,QAAQ,OAAO,KAAK,eAAe,IAAI;AACvC,iBAAK,aAAa;AAClB;;AAGJ,cAAI,QAAQ,OAAO,KAAK,aAAa,IAAI;AACrC,iBAAK,cAAc;AACnB;;;AAKR,aAAK,YAAY;AACjB,aAAK,eAAe;AACpB,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,gBAAM,QAAQ,UAAU,KAAK,IAAI,QAAQ,IAAI,CAAC;AAE9C,cAAI,QAAQ,OAAO,KAAK,cAAc,IAAI;AACtC,iBAAK,YAAY;AACjB;;AAGJ,cAAI,QAAQ,OAAO,KAAK,YAAY,IAAI;AACpC,iBAAK,eAAe;AACpB;;;MAGZ;;;;MAKA,IAAW,SAAS,OAAa;AAC7B,aAAK,YAAY;AACjB,aAAK,UAAU;AACf,aAAK,gBAAgB,OAAO;AAE5B,YAAI,KAAK,UAAU,OAAO;AACtB,eAAK,eAAc;eAChB;AACH,eAAK,UAAU,SAAS,MAAK;AACzB,iBAAK,eAAc;UACvB;;MAER;MAEA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEQ,iBAAc;AAClB,aAAK,gBAAgB,OAAO;AAC5B,aAAK,cAAc,KAAK,UAAU;AAClC,aAAK,eAAe,KAAK,UAAU;AACnC,aAAK,UAAU;AAEf,YAAI,KAAK,mCAAmC;AACxC,eAAK,oCAAmC;;AAG5C,YAAI,KAAK,YAAY;AACjB,eAAK,2BAA0B;;AAGnC,aAAK,wBAAwB,gBAAgB,IAAI;AAEjD,aAAK,aAAY;MACrB;;;;MAMA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;;;;MAKO,OAAO,kBAAe;AACzB,eAAM,eAAe,MAAK;MAC9B;MAEQ,kBAAkB,QAAwB;AAC9C,cAAM,QAAQ,UAAU,OAAM,eAAe,IAAI,MAAM;AACvD,YAAI,OAAO;AACP,gBAAM,aAAa;AAEnB,cAAI,MAAM,cAAc,GAAG;AACvB,mBAAM,eAAe,OAAO,MAAM;;;MAG9C;;;;MAKA,IAAW,OAAO,OAAuB;;AACrC,YAAI,KAAK,YAAY,OAAO;AACxB;;AAGJ,aAAK,kBAAkB,KAAK,OAAO;AAEnC,aAAK,UAAU;AACf,aAAK,UAAU;AACf,aAAK,gBAAgB,OAAO;AAE5B,YAAI,OAAO;AACP,kBAAQ,KAAK,UAAU,KAAK;;AAIhC,cAAM,WAAS,MAAA,KAAA,KAAK,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,MAAM,YAAY;AAClE,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,4CAA4C;;AAEhE,YAAI,SAAS,OAAM,eAAe,IAAI,KAAK,GAAG;AAC1C,gBAAM,aAAa,OAAM,eAAe,IAAI,KAAK;AACjD,eAAK,YAAY,WAAW;AAC5B,qBAAW,aAAa;AACxB,cAAI,WAAW,QAAQ;AACnB,iBAAK,eAAc;iBAChB;AACH,uBAAW,uBAAuB,KAAK,KAAK,eAAe,KAAK,IAAI,CAAC;;AAEzE;;AAEJ,aAAK,YAAY,OAAO,kBAAiB;AACzC,YAAI,OAAO;AACP,iBAAM,eAAe,IAAI,OAAO,EAAE,KAAK,KAAK,WAAW,WAAW,GAAG,QAAQ,OAAO,wBAAwB,CAAC,KAAK,eAAe,KAAK,IAAI,CAAC,EAAC,CAAE;;AAGlJ,aAAK,UAAU,SAAS,MAAK;AACzB,cAAI,OAAO;AACP,kBAAM,aAAa,OAAM,eAAe,IAAI,KAAK;AACjD,gBAAI,YAAY;AACZ,yBAAW,SAAS;AACpB,yBAAW,mBAAmB,WAAW,wBAAwB;AAC7D,gCAAe;;AAEnB,yBAAW,uBAAuB,SAAS;AAC3C;;;AAGR,eAAK,eAAc;QACvB;AACA,YAAI,OAAO;AACP,gBAAM,gBAAgB,OAAO,KAAK,SAAS;AAC3C,gBAAM,0BAA0B,KAAK,gBAAgB,KAAK,SAAS;AACnE,eAAK,UAAU,MAAM;;MAE7B;;;;;MAMQ,UAAU,OAAa;AAC3B,YAAI,OAAO,iBAAiB,MAAM,OAAO,SAAS,MAAM,MAAM,MAAM,QAAQ,GAAG,MAAM,MAAM,YAAY,GAAG,GAAG;AACzG,eAAK,SAAS;AACd,gBAAM,SAAS,MAAM,MAAM,GAAG,EAAE,CAAC;AACjC,gBAAM,SAAS,MAAM,MAAM,GAAG,EAAE,CAAC;AAEjC,gBAAM,WAA8B,SAAS,KAAK,cAAc,kBAAkB,SAAS,IAAI;AAC/F,cAAI,UAAU;AACV,kBAAM,SAAS,SAAS;AAExB,gBAAI,UAAU,OAAO,iBAAiB;AAClC,oBAAM,KAAK,OAAO,gBAAgB,aAAa,SAAS;AACxD,oBAAM,WAAW,OAAO,OAAO,gBAAgB,aAAa,OAAO,CAAC;AACpE,oBAAM,YAAY,OAAO,OAAO,gBAAgB,aAAa,QAAQ,CAAC;AACtE,oBAAM,OAAqC,OAAO,eAAe,MAAM;AACvE,kBAAI,QAAQ,MAAM,YAAY,WAAW;AACrC,qBAAK,eAAe,UAAU,MAAM;AACpC,uBAAO;;;AAKf,qBAAS,iBAAiB,QAAQ,MAAK;AACnC,mBAAK,eAAe,UAAU,MAAM;YACxC,CAAC;iBACE;AAEH,kBAAM,WAAW,SAAS,cAAc,QAAQ;AAChD,qBAAS,OAAO;AAChB,qBAAS,OAAO;AAChB,qBAAS,QAAQ;AACjB,qBAAS,SAAS;AAClB,qBAAS,KAAK,YAAY,QAAQ;AAElC,qBAAS,SAAS,MAAK;AACnB,oBAAM,SAA4B,SAAS,KAAK,cAAc,kBAAkB,SAAS,IAAI;AAC7F,kBAAI,QAAQ;AACR,qBAAK,eAAe,QAAQ,MAAM;;YAE1C;;AAEJ,iBAAO;eACJ;AACH,iBAAO;;MAEf;;;;;;;MAQQ,eAAe,QAA2B,QAAc;AAC5D,cAAM,SAAS,OAAO;AAEtB,YAAI,UAAU,OAAO,iBAAiB;AAClC,gBAAM,KAAK,OAAO,gBAAgB,aAAa,SAAS;AACxD,gBAAM,WAAW,OAAO,OAAO,gBAAgB,aAAa,OAAO,CAAC;AACpE,gBAAM,YAAY,OAAO,OAAO,gBAAgB,aAAa,QAAQ,CAAC;AAEtE,gBAAM,OAAO,OAAO,eAAe,MAAM;AACzC,cAAI,MAAM,YAAY,aAAa,MAAM;AACrC,kBAAM,WAAW,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;AACxC,kBAAM,YAAY,OAAO,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;AACzC,kBAAM,YAAY,KAAK,QAAO;AAC9B,gBAAI,gBAAgB;AACpB,gBAAI,gBAAgB;AACpB,gBAAI,gBAAgB;AACpB,gBAAI,gBAAgB;AACpB,kBAAM,aAAa,KAAK,UAAU,QAAQ,YAAW,EAAI;AACzD,gBAAI,KAAK,aAAa,KAAK,UAAU,QAAQ,YAAW,GAAI;AACxD,8BAAgB,WAAW;AAC3B,8BAAgB,WAAW;AAC3B,8BAAgB,WAAW;AAC3B,8BAAgB,WAAW;;AAI/B,iBAAK,cAAe,gBAAgB,UAAU,IAAI,iBAAiB,WAAY;AAC/E,iBAAK,aAAc,gBAAgB,UAAU,IAAI,iBAAiB,YAAa;AAC/E,iBAAK,cAAc,UAAU,QAAQ,iBAAiB,WAAW;AACjE,iBAAK,eAAe,UAAU,SAAS,iBAAiB,YAAY;AACpE,iBAAK,qCAAqC;AAC1C,iBAAK,kCAAkC,gBAAgB,IAAI;;;MAGvE;;;;;MAOA,IAAI,YAAS;AACT,eAAO,KAAK;MAChB;MACA,IAAI,UAAU,OAAa;AACvB,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;;;;MAOA,IAAI,aAAU;AACV,eAAO,KAAK;MAChB;MACA,IAAI,WAAW,OAAa;AACxB,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;;;;MAOA,IAAI,SAAM;AACN,eAAO,KAAK;MAChB;MACA,IAAI,OAAO,OAAa;AACpB,YAAI,KAAK,YAAY,OAAO;AACxB;;AAGJ,aAAK,UAAU;AACf,aAAK,aAAY;MACrB;;;;;;MAOA,YAAmBC,OAAe,MAAwB,MAAI;AAC1D,cAAMA,KAAI;AADK,aAAA,OAAAA;AAttBX,aAAA,iBAAoC;AAKpC,aAAA,UAAU;AACV,aAAA,WAAW,OAAM;AAEjB,aAAA,aAAa;AAEb,aAAA,cAAc;AACd,aAAA,aAAa;AACb,aAAA,eAAe;AACf,aAAA,gBAAgB;AAChB,aAAA,qCAA8C;AAC9C,aAAA,SAAkB;AAElB,aAAA,aAAqB;AACrB,aAAA,cAAsB;AACtB,aAAA,UAAkB;AAOlB,aAAA,oCAAoC;AAIpC,aAAA,kBAGJ,EAAE,MAAM,MAAM,KAAK,GAAE;AAUlB,aAAA,0BAA0B,IAAI,WAAU;AAKxC,aAAA,oCAAoC,IAAI,WAAU;AAwqBrD,aAAK,SAAS;MAClB;;;;;;;MAQO,SAAS,GAAW,GAAS;AAChC,YAAI,CAAC,MAAM,SAAS,GAAG,CAAC,GAAG;AACvB,iBAAO;;AAGX,YAAI,CAAC,KAAK,8BAA8B,CAAC,KAAK,gBAAgB;AAC1D,iBAAO;;AAGX,cAAM,QAAQ,KAAK,gBAAgB,QAAQ;AAC3C,cAAM,SAAS,KAAK,gBAAgB,SAAS;AAC7C,cAAM,MAAM,QAAQ,MAAM;AAE1B,YAAI,YAAY,KAAK,gBAAgB;AAErC,YAAI,CAAC,aAAa,KAAK,gBAAgB,QAAQ,KAAK;AAChD,gBAAM,SAAS,KAAK;AACpB,gBAAM,UAAU,OAAO,WAAW,IAAI;AAEtC,eAAK,gBAAgB,OAAO,YAAY,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM,EAAE;AAClF,eAAK,gBAAgB,MAAM;;AAG/B,YAAK,IAAI,KAAK,gBAAgB,OAAQ;AACtC,YAAK,IAAI,KAAK,gBAAgB,MAAO;AAErC,cAAM,cAAc,WAAW,IAAI,IAAI,SAAS,IAAI,CAAC;AAErD,eAAO,cAAc;MACzB;MAEU,eAAY;AAClB,eAAO;MACX;;MAGO,6BAA0B;AAC7B,YAAI,CAAC,KAAK,SAAS;AACf;;AAGJ,aAAK,QAAQ,KAAK,UAAU,QAAQ;AACpC,aAAK,SAAS,KAAK,UAAU,SAAS;MAC1C;MAEU,iBAAiB,eAAwB,SAAgC;AAC/E,YAAI,KAAK,SAAS;AACd,kBAAQ,KAAK,UAAU;YACnB,KAAK,OAAM;AACP;YACJ,KAAK,OAAM;AACP;YACJ,KAAK,OAAM;AACP;YACJ,KAAK,OAAM;AACP;YACJ,KAAK,OAAM;AACP,kBAAI,KAAK,YAAY;AACjB,qBAAK,2BAA0B;;AAEnC,kBAAI,KAAK,UAAU,KAAK,OAAO,QAAQ;AAEnC,qBAAK,OAAO,uBAAuB;AACnC,qBAAK,OAAO,wBAAwB;;AAExC;;;AAIZ,cAAM,iBAAiB,eAAe,OAAO;MACjD;MAEQ,0CAAuC;;AAC3C,YAAI,CAAC,KAAK,4BAA4B;AAClC;;AAGJ,cAAM,QAAQ,KAAK,gBAAgB;AACnC,cAAM,SAAS,KAAK,gBAAgB;AAEpC,YAAI,CAAC,KAAK,gBAAgB;AACtB,gBAAM,WAAS,MAAA,KAAA,KAAK,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,MAAM,YAAY;AAClE,cAAI,CAAC,QAAQ;AACT,kBAAM,IAAI,MAAM,4CAA4C;;AAEhE,eAAK,iBAAiB,OAAO,aAAa,OAAO,MAAM;;AAE3D,cAAM,SAAS,KAAK;AAEpB,cAAM,UAAU,OAAO,WAAW,IAAI;AAEtC,gBAAQ,UAAU,GAAG,GAAG,OAAO,MAAM;MACzC;MAEQ,WAAW,SAAkC,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAU;AAC/I,gBAAQ,UAAU,KAAK,WAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAEhE,YAAI,CAAC,KAAK,4BAA4B;AAClC;;AAGJ,cAAM,SAAS,KAAK;AACpB,kBAAU,OAAO,WAAW,IAAI;AAEhC,gBAAQ,UAAU,KAAK,WAAW,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,gBAAgB,MAAM,KAAK,KAAK,gBAAgB,KAAK,IAAI,EAAE;MAC3H;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,YAAI,GAAG,GAAG,OAAO;AACjB,YAAI,KAAK,UAAU,IAAI;AACnB,cAAI,KAAK;AACT,cAAI,KAAK;AAET,kBAAQ,KAAK,eAAe,KAAK,eAAe,KAAK;AACrD,mBAAS,KAAK,gBAAgB,KAAK,gBAAgB,KAAK;eACrD;AACH,gBAAM,WAAW,KAAK,UAAU,eAAe,KAAK;AACpD,gBAAM,SAAU,KAAK,SAAS,YAAa;AAC3C,gBAAM,MAAM,KAAK,SAAS;AAE1B,cAAI,KAAK,YAAY;AACrB,cAAI,KAAK,aAAa;AACtB,kBAAQ,KAAK;AACb,mBAAS,KAAK;;AAGlB,aAAK,wCAAuC;AAE5C,aAAK,aAAa,OAAO;AACzB,YAAI,KAAK,SAAS;AACd,kBAAQ,KAAK,UAAU;YACnB,KAAK,OAAM;AACP,mBAAK,WAAW,SAAS,GAAG,GAAG,OAAO,QAAQ,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC1J;YACJ,KAAK,OAAM;AACP,mBAAK,WAAW,SAAS,GAAG,GAAG,OAAO,QAAQ,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC1J;YACJ,KAAK,OAAM,iBAAiB;AACxB,oBAAM,SAAS,KAAK,gBAAgB,QAAQ;AAC5C,oBAAM,SAAS,KAAK,gBAAgB,SAAS;AAC7C,oBAAM,QAAQ,KAAK,IAAI,QAAQ,MAAM;AACrC,oBAAM,WAAW,KAAK,gBAAgB,QAAQ,QAAQ,SAAS;AAC/D,oBAAM,WAAW,KAAK,gBAAgB,SAAS,SAAS,SAAS;AAEjE,mBAAK,WAAW,SAAS,GAAG,GAAG,OAAO,QAAQ,KAAK,gBAAgB,OAAO,SAAS,KAAK,gBAAgB,MAAM,SAAS,QAAQ,OAAO,SAAS,KAAK;AACpJ;;YAEJ,KAAK,OAAM;AACP,mBAAK,WAAW,SAAS,GAAG,GAAG,OAAO,QAAQ,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC1J;YACJ,KAAK,OAAM;AACP,mBAAK,iBAAiB,OAAO;AAC7B;;;AAIZ,gBAAQ,QAAO;MACnB;MAEQ,iBAAiB,SAAgC;AACrD,cAAM,YAAY,KAAK;AACvB,cAAM,YAAY,KAAK;AACvB,cAAM,eAAe,KAAK,eAAe,KAAK;AAC9C,cAAM,aAAa,KAAK,cAAc,KAAK;AAC3C,cAAM,cAAc,KAAK,cAAc,KAAK;AAC5C,cAAM,eAAe,KAAK,eAAe,KAAK;AAC9C,cAAM,oBAAoB,KAAK,gBAAgB,QAAQ,aAAa,YAAY;AAChF,cAAM,qBAAqB,KAAK,gBAAgB,SAAS,eAAe,YAAY;AACpF,cAAM,mBAAmB,KAAK,gBAAgB,OAAO,YAAY;AACjE,cAAM,kBAAkB,KAAK,gBAAgB,MAAM,YAAY;AAC/D,cAAM,cAAc,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ;AAC7E,cAAM,eAAe,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS;AAG9E,aAAK,WAAW,SAAS,GAAG,GAAG,WAAW,WAAW,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,WAAW,SAAS;AAE9H,gBAAQ,UAAU,kBAAkB,KAAK,gBAAgB,KAAK,mBAAmB,SAAS;AAC1F,aAAK,WAAW,SAAS,KAAK,YAAY,GAAG,aAAa,WAAW,kBAAkB,KAAK,gBAAgB,KAAK,mBAAmB,SAAS;AAE7I,gBAAQ,UAAU,aAAa,KAAK,gBAAgB,KAAK,YAAY,SAAS;AAC9E,aAAK,WAAW,SAAS,KAAK,aAAa,GAAG,YAAY,WAAW,aAAa,KAAK,gBAAgB,KAAK,YAAY,SAAS;AAEjI,gBAAQ,UAAU,KAAK,gBAAgB,MAAM,iBAAiB,WAAW,kBAAkB;AAC3F,aAAK,WAAW,SAAS,GAAG,KAAK,WAAW,WAAW,cAAc,KAAK,gBAAgB,MAAM,iBAAiB,WAAW,kBAAkB;AAE9I,gBAAQ,UAAU,kBAAkB,iBAAiB,mBAAmB,kBAAkB;AAC1F,aAAK,WAAW,SAAS,KAAK,YAAY,KAAK,WAAW,aAAa,cAAc,kBAAkB,iBAAiB,mBAAmB,kBAAkB;AAE7J,gBAAQ,UAAU,aAAa,iBAAiB,YAAY,kBAAkB;AAC9E,aAAK,WAAW,SAAS,KAAK,aAAa,KAAK,WAAW,YAAY,cAAc,aAAa,iBAAiB,YAAY,kBAAkB;AAEjJ,gBAAQ,UAAU,KAAK,gBAAgB,MAAM,cAAc,WAAW,YAAY;AAClF,aAAK,WAAW,SAAS,GAAG,KAAK,cAAc,WAAW,cAAc,KAAK,gBAAgB,MAAM,cAAc,WAAW,YAAY;AAExI,gBAAQ,UAAU,kBAAkB,cAAc,mBAAmB,YAAY;AACjF,aAAK,WAAW,SAAS,KAAK,WAAW,KAAK,cAAc,aAAa,cAAc,kBAAkB,cAAc,mBAAmB,YAAY;AAEtJ,gBAAQ,UAAU,aAAa,cAAc,YAAY,YAAY;AACrE,aAAK,WAAW,SAAS,KAAK,aAAa,KAAK,cAAc,YAAY,cAAc,aAAa,cAAc,YAAY,YAAY;MAC/I;MAEO,UAAO;AACV,cAAM,QAAO;AACb,aAAK,wBAAwB,MAAK;AAClC,aAAK,kCAAkC,MAAK;AAC5C,aAAK,kBAAkB,KAAK,OAAO;MACvC;;AAl5Bc,UAAA,iBAAiB,oBAAI,IAAG;AAs5Bf,UAAA,eAAe;AAEf,UAAA,eAAe;AAEf,UAAA,kBAAkB;AAElB,UAAA,iBAAiB;AAEjB,UAAA,qBAAqB;AA53B5C,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAiCV,eAAA;MADC,UAAS;;AAgCV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAyMV,eAAA;MADC,UAAS;;AAqLV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAkQd,kBAAc,qBAAqB,KAAK;;;;;ACv9BxC,IAYa;AAZb;;;AACA;AACA;AACA;AACA;AAQM,IAAO,SAAP,cAAsB,UAAS;;;;MA2BjC,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;;;MAMA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAtBZ,aAAA,4BAA4B;AAyB/B,aAAK,YAAY;AACjB,aAAK,mBAAmB;AAExB,YAAI,aAA+B;AAEnC,aAAK,wBAAwB,MAAK;AAC9B,uBAAa,KAAK;AAClB,eAAK,SAAS;QAClB;AAEA,aAAK,sBAAsB,MAAK;AAC5B,cAAI,eAAe,MAAM;AACrB,iBAAK,QAAQ;;QAErB;AAEA,aAAK,uBAAuB,MAAK;AAC7B,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;AAEA,aAAK,qBAAqB,MAAK;AAC3B,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;MACJ;MAEU,eAAY;AAClB,eAAO;MACX;;;;;MAMO,gBAAgB,GAAW,GAAW,IAAqB,MAAc,WAAmB,aAAqB,QAAiB,QAAe;AACpJ,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,oBAAoB,CAAC,KAAK,aAAa,KAAK,eAAe;AACrF,iBAAO;;AAGX,YAAI,CAAC,MAAM,SAAS,GAAG,CAAC,GAAG;AACvB,iBAAO;;AAGX,YAAI,KAAK,2BAA2B;AAChC,cAAI,WAAW;AACf,mBAAS,QAAQ,KAAK,UAAU,SAAS,GAAG,SAAS,GAAG,SAAS;AAC7D,kBAAM,QAAQ,KAAK,UAAU,KAAK;AAClC,gBAAI,MAAM,aAAa,MAAM,oBAAoB,MAAM,aAAa,CAAC,MAAM,iBAAiB,MAAM,SAAS,GAAG,CAAC,GAAG;AAC9G,yBAAW;AACX;;;AAIR,cAAI,CAAC,UAAU;AACX,mBAAO;;;AAIf,aAAK,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,aAAa,QAAQ,MAAM;AAE/E,eAAO;MACX;;;;MAKO,gBAAgB,QAAiB,IAAmB;AACvD,YAAI,CAAC,MAAM,gBAAgB,QAAQ,EAAE,GAAG;AACpC,iBAAO;;AAGX,YAAI,CAAC,KAAK,cAAc,KAAK,uBAAuB;AAChD,eAAK,sBAAqB;;AAG9B,eAAO;MACX;;;;MAKO,cAAc,QAAiB,IAAqB,QAAQ,OAAK;AACpE,YAAI,CAAC,KAAK,cAAc,KAAK,qBAAqB;AAC9C,eAAK,oBAAmB;;AAG5B,cAAM,cAAc,QAAQ,IAAI,KAAK;MACzC;;;;MAKO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,CAAC,KAAK,cAAc,KAAK,sBAAsB;AAC/C,eAAK,qBAAoB;;AAG7B,eAAO;MACX;MAEU,kBAAkB,SAAgC;AACxD,YAAI,KAAK,WAAW;AAChB,iBAAO,KAAK,oBAAoB,OAAO;eACpC;AACH,iBAAO,KAAK;;MAEpB;;;;MAKO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAsB,IAAmB;AACxI,YAAI,CAAC,KAAK,cAAc,KAAK,oBAAoB;AAC7C,eAAK,mBAAkB;;AAG3B,cAAM,aAAa,QAAQ,aAAa,WAAW,aAAa,aAAa,EAAE;MACnF;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AAEnC,YAAI,KAAK,YAAY;AACjB,8BAAoB,gBAAgB,KAAK,WAAW;;AAExD,YAAI,KAAK,QAAQ;AACb,8BAAoB,YAAY,KAAK,OAAO;;MAEpD;;;;MAKO,kBAAkB,kBAAuB,MAA4B;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAE9C,YAAI,iBAAiB,eAAe;AAChC,eAAK,aAAa,KAAK,eAAe,iBAAiB,aAAa;;AAGxE,YAAI,iBAAiB,WAAW;AAC5B,eAAK,SAAS,KAAK,eAAe,iBAAiB,SAAS;;MAEpE;;;;;;;;;MAUO,OAAO,kBAAkBA,OAAc,MAAc,UAAgB;AACxE,cAAM,SAAS,IAAI,KAAKA,KAAI;AAG5B,cAAM,YAAY,IAAI,UAAUA,QAAO,WAAW,IAAI;AACtD,kBAAU,eAAe;AACzB,kBAAU,0BAA0B,QAAQ;AAC5C,kBAAU,cAAc;AACxB,eAAO,WAAW,SAAS;AAG3B,cAAM,YAAY,IAAI,MAAMA,QAAO,SAAS,QAAQ;AACpD,kBAAU,QAAQ;AAClB,kBAAU,UAAU,MAAM;AAC1B,kBAAU,sBAAsB,QAAQ;AACxC,eAAO,WAAW,SAAS;AAG3B,eAAO,SAAS;AAChB,eAAO,aAAa;AAEpB,eAAO;MACX;;;;;;;MAQO,OAAO,sBAAsBA,OAAc,UAAgB;AAC9D,cAAM,SAAS,IAAI,KAAKA,KAAI;AAG5B,cAAM,YAAY,IAAI,MAAMA,QAAO,SAAS,QAAQ;AACpD,kBAAU,UAAU,MAAM;AAC1B,kBAAU,sBAAsB,QAAQ;AACxC,eAAO,WAAW,SAAS;AAG3B,eAAO,SAAS;AAEhB,eAAO;MACX;;;;;;;MAQO,OAAO,mBAAmBA,OAAc,MAAY;AACvD,cAAM,SAAS,IAAI,KAAKA,KAAI;AAG5B,cAAM,YAAY,IAAI,UAAUA,QAAO,WAAW,IAAI;AACtD,kBAAU,eAAe;AACzB,kBAAU,0BAA0B,QAAQ;AAC5C,eAAO,WAAW,SAAS;AAG3B,eAAO,aAAa;AAEpB,eAAO;MACX;;;;;;;;MASO,OAAO,gCAAgCA,OAAc,MAAc,UAAgB;AACtF,cAAM,SAAS,IAAI,KAAKA,KAAI;AAG5B,cAAM,YAAY,IAAI,MAAMA,QAAO,SAAS,QAAQ;AACpD,kBAAU,UAAU,MAAM;AAC1B,eAAO,WAAW,SAAS;AAG3B,cAAM,YAAY,IAAI,UAAUA,QAAO,WAAW,IAAI;AACtD,kBAAU,eAAe;AACzB,kBAAU,0BAA0B,QAAQ;AAC5C,eAAO,WAAW,SAAS;AAG3B,eAAO,SAAS;AAChB,eAAO,aAAa;AAEpB,eAAO;MACX;;AAEJ,kBAAc,sBAAsB,MAAM;;;;;IC9S7B;;;;AAfb;AAEA;AAEA;AACA;AACA;AAIA;AAKM,IAAO,aAAP,cAA0B,UAAS;;MAerC,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAc;AAChC,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;;;MAMA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAa;AAC5B,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,aAAK,WAAW;AAChB,aAAK,aAAY;MACrB;;;;;MAOA,IAAW,MAAM,OAAsB;AACnC,YAAI,CAAC,KAAK,0BAA0B;AAChC,eAAK,eAAe;;AAGxB,YAAI,KAAK,OAAO,SAAS,KAAK,KAAK,MAAM,OAAO;AAC5C;;AAGJ,YAAI,KAAK,OAAO,WAAW,KAAK,GAAG;AAC/B,eAAK,aAAY;;MAEzB;MAEA,IAAW,QAAK;AACZ,eAAO,KAAK,OAAO,SAAS,KAAK,KAAK;MAC1C;;;;;MAOA,IAAW,OAAO,OAAsB;AACpC,YAAI,CAAC,KAAK,0BAA0B;AAChC,eAAK,gBAAgB;;AAGzB,YAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,OAAO;AAC7C;;AAGJ,YAAI,KAAK,QAAQ,WAAW,KAAK,GAAG;AAChC,eAAK,aAAY;;MAEzB;MAEA,IAAW,SAAM;AACb,eAAO,KAAK,QAAQ,SAAS,KAAK,KAAK;MAC3C;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AA9FX,aAAA,cAAc;AACd,aAAA,eAAe;AACf,aAAA,gBAAgB;AAChB,aAAA,2BAA2B;AAC3B,aAAA,WAAW;AAMZ,aAAA,uBAAuB;MAsF9B;MAEU,eAAY;AAClB,eAAO;MACX;;;;MAKU,YAAY,eAAwB,SAAgC;AAC1E,mBAAW,SAAS,KAAK,WAAW;AAChC,cAAI,KAAK,aAAa;AAClB,kBAAM,oBAAoB,QAAQ;iBAC/B;AACH,kBAAM,sBAAsB,QAAQ;;;AAI5C,cAAM,YAAY,eAAe,OAAO;MAC5C;MAEU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,oBAAoB,SAAS,aAAa;AAE/C,aAAK,oBAAoB,OAAO,KAAK,gBAAgB;AACrD,aAAK,oBAAoB,MAAM,KAAK,gBAAgB;AAEpD,YAAI,CAAC,KAAK,cAAc,KAAK,cAAc;AACvC,eAAK,oBAAoB,QAAQ,KAAK,gBAAgB;;AAG1D,YAAI,KAAK,cAAc,KAAK,eAAe;AACvC,eAAK,oBAAoB,SAAS,KAAK,gBAAgB;;MAE/D;MAEU,eAAY;AAClB,YAAI,aAAa;AACjB,YAAI,cAAc;AAClB,cAAM,gBAAgB,KAAK,UAAU;AACrC,iBAAS,QAAQ,GAAG,QAAQ,eAAe,SAAS;AAChD,gBAAM,QAAQ,KAAK,UAAU,KAAK;AAClC,cAAI,CAAC,MAAM,aAAa,MAAM,eAAe;AACzC;;AAGJ,cAAI,KAAK,aAAa;AAClB,gBAAI,MAAM,QAAQ,cAAc,MAAM;AAClC,oBAAM,MAAM,cAAc;AAC1B,mBAAK,iBAAiB;AACtB,oBAAM,KAAK,wBAAwB;;AAGvC,gBAAI,MAAM,QAAQ,gBAAgB,CAAC,MAAM,gBAAgB;AACrD,kBAAI,CAAC,KAAK,sBAAsB;AAC5B,sBAAM,KAAK,iBAAiB,MAAM,IAAI,cAAc,MAAM,QAAQ,mEAAmE;;mBAEtI;AACH,6BAAe,MAAM,gBAAgB,SAAS,MAAM,sBAAsB,MAAM,0BAA0B,QAAQ,gBAAgB,IAAI,KAAK,WAAW;;iBAEvJ;AACH,gBAAI,MAAM,SAAS,aAAa,MAAM;AAClC,oBAAM,OAAO,aAAa;AAC1B,mBAAK,iBAAiB;AACtB,oBAAM,MAAM,wBAAwB;;AAGxC,gBACI,MAAM,OAAO,gBACb,CAAC,MAAM,kBACP,MAAM,aAAY,MAAO,eACxB,MAAoB,iBAAiB,aAAa,QACnD,CAAE,MAAoB,kBACxB;AACE,kBAAI,CAAC,KAAK,sBAAsB;AAC5B,sBAAM,KAAK,iBAAiB,MAAM,IAAI,cAAc,MAAM,QAAQ,oEAAoE;;mBAEvI;AACH,4BAAc,MAAM,gBAAgB,QAAQ,MAAM,uBAAuB,MAAM,yBAAyB,QAAQ,gBAAgB,IAAI,KAAK,WAAW;;;;AAKhK,sBAAc,KAAK,uBAAuB,KAAK;AAC/C,uBAAe,KAAK,sBAAsB,KAAK;AAE/C,aAAK,2BAA2B;AAKhC,YAAI,oBAAoB;AACxB,YAAI,qBAAqB;AAEzB,aAAK,CAAC,KAAK,iBAAiB,KAAK,0BAA0B,KAAK,aAAa;AAEzE,gBAAM,iBAAiB,KAAK;AAC5B,eAAK,SAAS,cAAc;AAC5B,+BAAqB,mBAAmB,KAAK,UAAU,CAAC,KAAK,QAAQ;;AAEzE,aAAK,CAAC,KAAK,gBAAgB,KAAK,yBAAyB,CAAC,KAAK,aAAa;AAExE,gBAAM,gBAAgB,KAAK;AAC3B,eAAK,QAAQ,aAAa;AAC1B,8BAAoB,kBAAkB,KAAK,SAAS,CAAC,KAAK,OAAO;;AAGrE,YAAI,oBAAoB;AACpB,eAAK,QAAQ,wBAAwB;;AAGzC,YAAI,mBAAmB;AACnB,eAAK,OAAO,wBAAwB;;AAGxC,aAAK,2BAA2B;AAEhC,YAAI,qBAAqB,oBAAoB;AACzC,eAAK,iBAAiB;;AAG1B,cAAM,aAAY;MACtB;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AACnC,4BAAoB,cAAc,KAAK;AACvC,4BAAoB,eAAe,KAAK;MAC5C;;;;MAKO,kBAAkB,kBAAuB,MAA4B;AACxE,aAAK,eAAe,iBAAiB;AACrC,aAAK,gBAAgB,iBAAiB;AAEtC,cAAM,kBAAkB,kBAAkB,IAAI;MAClD;;AAtOO,eAAA;MADN,UAAS;;AAKV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAwBV,eAAA;MADC,UAAS;;AA2Kd,kBAAc,0BAA0B,UAAU;;;;;ICpPrC;;;;AAdb;AAGA;AACA;AACA;AACA;AAEA;AAMM,IAAO,WAAP,MAAO,kBAAiB,QAAO;;MAQjC,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;MASA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,gBAAQ,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG,CAAC;AAEtC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AACvB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;AAEjB,aAAK,6BAA6B,gBAAgB,KAAK;MAC3D;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AA9EX,aAAA,aAAa;AACb,aAAA,cAAc;AACd,aAAA,kBAAkB;AAClB,aAAA,aAAa;AAoBd,aAAA,+BAA+B,IAAI,WAAU;AAyDhD,aAAK,mBAAmB;MAC5B;MAEU,eAAY;AAClB,eAAO;MACX;;;;MAKO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,cAAM,cAAc,KAAK,gBAAgB,QAAQ,KAAK;AACtD,cAAM,eAAe,KAAK,gBAAgB,SAAS,KAAK;AAExD,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,gBAAQ,YAAY,KAAK,aAAa,KAAK,cAAc,KAAK;AAC9D,gBAAQ,SAAS,KAAK,gBAAgB,OAAO,KAAK,aAAa,GAAG,KAAK,gBAAgB,MAAM,KAAK,aAAa,GAAG,aAAa,YAAY;AAE3I,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAG5B,YAAI,KAAK,YAAY;AACjB,kBAAQ,YAAY,KAAK,aAAa,KAAK,QAAQ,KAAK;AACxD,gBAAM,cAAc,cAAc,KAAK;AACvC,gBAAM,eAAe,eAAe,KAAK;AAEzC,kBAAQ,SACJ,KAAK,gBAAgB,OAAO,KAAK,aAAa,KAAK,cAAc,eAAe,GAChF,KAAK,gBAAgB,MAAM,KAAK,aAAa,KAAK,eAAe,gBAAgB,GACjF,aACA,YAAY;;AAIpB,gBAAQ,cAAc,KAAK;AAC3B,gBAAQ,YAAY,KAAK;AAEzB,gBAAQ,WAAW,KAAK,gBAAgB,OAAO,KAAK,aAAa,GAAG,KAAK,gBAAgB,MAAM,KAAK,aAAa,GAAG,aAAa,YAAY;AAE7I,gBAAQ,QAAO;MACnB;;;;;MAOO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,CAAC,KAAK,YAAY;AAClB,eAAK,YAAY,CAAC,KAAK;;AAG3B,eAAO;MACX;;;;;;;MAQO,OAAO,sBAAsB,OAAe,gBAAwC;AACvF,cAAM,QAAQ,IAAI,WAAU;AAC5B,cAAM,aAAa;AACnB,cAAM,SAAS;AAEf,cAAM,WAAW,IAAI,UAAQ;AAC7B,iBAAS,QAAQ;AACjB,iBAAS,SAAS;AAClB,iBAAS,YAAY;AACrB,iBAAS,QAAQ;AACjB,iBAAS,6BAA6B,IAAI,cAAc;AACxD,cAAM,WAAW,QAAQ;AAEzB,cAAM,SAAS,IAAI,UAAS;AAC5B,eAAO,OAAO;AACd,eAAO,QAAQ;AACf,eAAO,cAAc;AACrB,eAAO,0BAA0B,QAAQ;AACzC,eAAO,QAAQ;AACf,cAAM,WAAW,MAAM;AAEvB,eAAO;MACX;;AA5KA,eAAA;MADC,UAAS;;AAqBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AA2Hd,kBAAc,wBAAwB,QAAQ;;;;;ACpM9C,IACa;AADb;;AACM,IAAO,cAAP,MAAkB;MAIpB,IAAW,OAAI;AACX,eAAO,KAAK,cAAc,KAAK,YAAY,KAAK,EAAE,IAAI,KAAK;MAC/D;MAEA,IAAW,KAAK,KAAW;AACvB,aAAK,QAAQ;AACb,aAAK,cAAc,MAAM,QAAQ,MAAM,KAAK,GAAG;MACnD;MAEA,IAAW,SAAM;AACb,eAAO,KAAK,cAAc,KAAK,YAAY,SAAS,KAAK,MAAM;MACnE;MAEO,WAAW,UAAkB,QAAgB,WAAkB;AAClE,aAAK,QAAQ,KAAK,MAAM,MAAM,GAAG,QAAQ,KAAK,YAAY,YAAY,MAAM,KAAK,MAAM,MAAM,MAAM;AACnG,YAAI,KAAK,aAAa;AAClB,gBAAM,gBAAgB,YAAY,MAAM,KAAK,SAAS,IAAI,CAAA;AAC1D,eAAK,YAAY,OAAO,UAAU,SAAS,UAAU,GAAG,aAAa;;MAE7E;MAEO,OAAO,KAAW;AACrB,eAAO,KAAK,cAAc,KAAK,YAAY,GAAG,IAAI,KAAK,MAAM,OAAO,GAAG;MAC3E;MAEO,OAAO,MAAc,QAAe;AACvC,YAAI,KAAK,aAAa;AAClB,cAAI,MAAM,IAAI,GAAG;AACb,mBAAO;qBACA,QAAQ,GAAG;AAClB,mBAAO,KAAK,IAAI,MAAM,KAAK,YAAY,MAAM;iBAC1C;AACH,mBAAO,KAAK,YAAY,SAAS,KAAK,IAAI,MAAM,CAAC,KAAK,YAAY,MAAM;;AAE5E,cAAI,WAAW,QAAW;AACtB,qBAAS,KAAK,YAAY,SAAS;qBAC5B,MAAM,MAAM,GAAG;AACtB,qBAAS;qBACF,SAAS,GAAG;AACnB,qBAAS;;AAEb,gBAAM,OAAO,CAAA;AACb,iBAAO,EAAE,UAAU,GAAG;AAClB,iBAAK,MAAM,IAAI,KAAK,YAAY,OAAO,MAAM;;AAEjD,iBAAO,KAAK,KAAK,EAAE;;AAGvB,eAAO,KAAK,MAAM,OAAO,MAAM,MAAM;MACzC;MAEO,UAAU,MAAc,IAAW;AACtC,YAAI,KAAK,aAAa;AAClB,cAAI,MAAM,IAAI,GAAG;AACb,mBAAO;qBACA,OAAO,KAAK,YAAY,QAAQ;AACvC,mBAAO,KAAK,YAAY;qBACjB,OAAO,GAAG;AACjB,mBAAO;;AAEX,cAAI,OAAO,QAAW;AAClB,iBAAK,KAAK,YAAY;qBACf,MAAM,EAAE,GAAG;AAClB,iBAAK;qBACE,KAAK,KAAK,YAAY,QAAQ;AACrC,iBAAK,KAAK,YAAY;qBACf,KAAK,GAAG;AACf,iBAAK;;AAET,gBAAM,OAAO,CAAA;AACb,cAAI,MAAM;AACV,iBAAO,OAAO,IAAI;AACd,iBAAK,KAAK,IAAI,KAAK,YAAY,MAAM;;AAEzC,iBAAO,KAAK,KAAK,EAAE;;AAGvB,eAAO,KAAK,MAAM,UAAU,MAAM,EAAE;MACxC;MAEO,OAAO,OAAa;AACvB,cAAM,QAAQ;AACd,eAAO,KAAK,cAAc,KAAK,YAAY,KAAK,EAAE,OAAO,KAAK,MAAM,KAAK,KAAK,MAAM,OAAO,KAAK,MAAM;MAC1G;;;;;;IClES;;;;AApBb;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAOM,IAAO,YAAP,cAAyB,QAAO;;MAkElC,IAAW,WAAQ;AACf,eAAO,KAAK,UAAU,SAAS,KAAK,KAAK;MAC7C;;MAGA,IAAW,mBAAgB;AACvB,eAAO,KAAK,UAAU,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACrF;MAEA,IAAW,SAAS,OAAsB;AACtC,YAAI,KAAK,UAAU,SAAS,KAAK,KAAK,MAAM,OAAO;AAC/C;;AAGJ,YAAI,KAAK,UAAU,WAAW,KAAK,GAAG;AAClC,eAAK,aAAY;;MAEzB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAEJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;;MAGA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAc;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;MAIA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAa;AACvC,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAEJ,aAAK,sBAAsB;AAC3B,aAAK,aAAY;MACrB;;MAIA,IAAW,SAAM;AACb,eAAO,KAAK,QAAQ,SAAS,KAAK,KAAK;MAC3C;;MAGA,IAAW,iBAAc;AACrB,eAAO,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACnF;MAEA,IAAW,OAAO,OAAa;AAC3B,YAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,OAAO;AAC7C;;AAGJ,YAAI,KAAK,QAAQ,WAAW,KAAK,GAAG;AAChC,eAAK,aAAY;;MAEzB;;MAIA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAc;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;;MAIA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;MAEA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAGJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;MAIA,IAAW,kBAAe;AACtB,eAAO,KAAK;MAChB;MAEA,IAAW,gBAAgB,OAAa;AACpC,YAAI,KAAK,qBAAqB,OAAO;AACjC;;AAEJ,aAAK,mBAAmB;AACxB,aAAK,aAAY;MACrB;;MAIA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,MAAa;AAC5B,aAAK,WAAW;MACpB;;MAGA,IAAW,kBAAe;AACtB,eAAO,KAAK;MAChB;MACA,IAAW,gBAAgB,MAAY;AACnC,YAAI,KAAK,qBAAqB,MAAM;AAChC;;AAEJ,aAAK,mBAAmB;AACxB,aAAK,aAAY;MACrB;;MAGA,IAAW,SAAM;AACb,eAAO,KAAK;MAChB;MAEA,IAAW,OAAO,MAAa;AAC3B,aAAK,UAAU;MACnB;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,KAAW;AAC7B,aAAK,cAAc;MACvB;;MAIA,IAAW,OAAI;AACX,eAAO,KAAK,aAAa;MAC7B;MAEA,IAAW,KAAK,OAAa;AACzB,cAAM,gBAAgB,MAAM,SAAQ;AAEpC,YAAI,CAAC,KAAK,cAAc;AACpB,eAAK,eAAe,IAAI,YAAW;;AAGvC,YAAI,KAAK,aAAa,SAAS,eAAe;AAC1C;;AAEJ,aAAK,aAAa,OAAO;AACzB,aAAK,gBAAe;MACxB;MAEU,kBAAe;AACrB,aAAK,aAAY;AACjB,aAAK,wBAAwB,gBAAgB,IAAI;MACrD;;MAIA,IAAW,QAAK;AACZ,eAAO,KAAK,OAAO,SAAS,KAAK,KAAK;MAC1C;MAEA,IAAW,MAAM,OAAsB;AACnC,YAAI,KAAK,OAAO,SAAS,KAAK,KAAK,MAAM,OAAO;AAC5C;;AAGJ,YAAI,KAAK,OAAO,WAAW,KAAK,GAAG;AAC/B,eAAK,aAAY;;AAGrB,aAAK,mBAAmB;MAC5B;;;;;;MAOA,YAAmBC,OAAe,OAAe,IAAE;AAC/C,cAAMA,KAAI;AADK,aAAA,OAAAA;AAlVT,aAAA,mBAAmB;AACnB,aAAA,cAAc;AACd,aAAA,qBAAqB;AACrB,aAAA,gBAAgB;AAChB,aAAA,oBAAoB;AACpB,aAAA,aAAa;AACb,aAAA,UAAU,IAAI,aAAa,IAAI,aAAa,cAAc;AAC1D,aAAA,oBAAoB;AACpB,aAAA,YAAY,IAAI,aAAa,GAAG,aAAa,qBAAqB,KAAK;AACvE,aAAA,aAAa;AAIb,aAAA,eAAe;AACjB,aAAA,gBAAgB;AAId,aAAA,WAAW;AACX,aAAA,UAAU;AACV,aAAA,cAAc;AACd,aAAA,qBAAqB;AACrB,aAAA,sBAAsB;AACtB,aAAA,qBAAqB;AACrB,aAAA,mBAAmB;AACrB,aAAA,uBAAuB;AACvB,aAAA,qBAAqB;AACrB,aAAA,eAAe;AACb,aAAA,oBAAoB;AACpB,aAAA,iBAAiB;AASpB,aAAA,gBAAgB;AAGhB,aAAA,sBAAsB;AAGtB,aAAA,0BAA0B,IAAI,WAAU;AAExC,aAAA,2BAA2B,IAAI,WAAU;AAEzC,aAAA,oBAAoB,IAAI,WAAU;AAElC,aAAA,mBAAmB,IAAI,WAAU;AAEjC,aAAA,4BAA4B,IAAI,WAAU;AAE1C,aAAA,uBAAuB,IAAI,WAAU;AAErC,aAAA,sBAAsB,IAAI,WAAU;AAEpC,aAAA,wBAAwB,IAAI,WAAU;AAEtC,aAAA,qCAAqC,IAAI,WAAU;AAyRtD,aAAK,OAAO;AACZ,aAAK,mBAAmB;MAC5B;;MAGO,SAAM;AACT,aAAK,aAAa;AAClB,aAAK,cAAc;AACnB,aAAK,gBAAgB;AACrB,qBAAa,KAAK,aAAa;AAC/B,aAAK,aAAY;AAEjB,aAAK,iBAAiB,gBAAgB,IAAI;AAE1C,aAAK,MAAM,0BAAyB;AACpC,YAAI,KAAK,sBAAsB;AAC3B,eAAK,MAAM,sBAAsB,OAAO,KAAK,oBAAoB;;AAErE,cAAM,QAAQ,KAAK,MAAM,SAAQ;AACjC,YAAI,KAAK,4BAA4B,OAAO;AACxC,gBAAM,oBAAoB,OAAO,KAAK,wBAAwB;;MAEtE;;MAGO,UAAO;AACV,YAAI,CAAC,KAAK,YAAY;AAClB;;AAEJ,aAAK,cAAc;AACnB,aAAK,aAAa;AAClB,aAAK,eAAe;AACpB,aAAK,gBAAgB;AACrB,aAAK,aAAY;AAEjB,aAAK,kBAAkB,gBAAgB,IAAI;AAE3C,YAAI,KAAK,eAAe,WAAW,CAAC,KAAK,qBAAqB;AAC1D,gBAAM,QAAQ,OAAO,KAAK,aAAa;AAEvC,cAAI,UAAU,MAAM;AAChB,iBAAK,OAAO;;AAEhB,eAAK,MAAM,iBAAiB;AAC5B;;AAGJ,aAAK,MAAM,wBAAuB;AAElC,aAAK,uBAAuB,KAAK,MAAM,sBAAsB,IAAI,CAAC,kBAAiB;AAE/E,kBAAQ,cAAc,MAAM;YACxB,KAAK,oBAAoB;AACrB,mBAAK,YAAY,cAAc,KAAK;AACpC,mBAAK,qBAAqB,gBAAgB,IAAI;AAC9C;YACJ,KAAK,oBAAoB;AACrB,mBAAK,WAAW,cAAc,KAAK;AACnC,mBAAK,oBAAoB,gBAAgB,IAAI;AAC7C;YACJ,KAAK,oBAAoB;AACrB,mBAAK,aAAa,cAAc,KAAK;AACrC,mBAAK,sBAAsB,gBAAgB,IAAI;AAC/C;YACJ;AACI;;QAEZ,CAAC;AAED,cAAM,QAAQ,KAAK,MAAM,SAAQ;AACjC,YAAI,OAAO;AAEP,eAAK,2BAA2B,MAAM,oBAAoB,IAAI,CAAC,gBAAe;AAC1E,gBAAI,CAAC,KAAK,YAAY;AAClB;;AAEJ,gBAAI,YAAY,SAAS,kBAAkB,kBAAkB;AACzD,mBAAK,iBAAiB,WAAW;;UAEzC,CAAC;;AAGL,YAAI,KAAK,mBAAmB;AACxB,eAAK,eAAc;;MAE3B;;;;MAKO,QAAK;AACR,aAAK,MAAM,mBAAmB,IAAI;MACtC;;;;MAKO,OAAI;AACP,aAAK,MAAM,iBAAiB;MAChC;MAEU,eAAY;AAClB,eAAO;MACX;;;;;MAMO,iBAAc;AACjB,YAAI,CAAC,KAAK,2BAA2B;AACjC,iBAAO;;AAEX,eAAO,CAAC,KAAK,yBAAyB;MAC1C;;;;MAKO,WAAW,SAAiB,KAAc,KAAoB;;AACjE,YAAI,KAAK,YAAY;AACjB;;AAIJ,YAAI,QAAQ,IAAI,WAAW,IAAI,aAAa,YAAY,MAAM,YAAY,MAAM,YAAY,KAAK;AAC7F;;AAIJ,YAAI,QAAQ,IAAI,WAAW,IAAI,YAAY,YAAY,IAAI;AACvD,eAAK,eAAc;AACnB,cAAI,eAAc;AAClB;;AAGJ,gBAAQ,SAAS;UACb,KAAK;AACD,kBAAM;AACN;UACJ,KAAK;AACD,gBAAI,KAAK;AACL,kBAAI,eAAc;;AAEtB;UACJ,KAAK;AACD,gBAAI,KAAK,aAAa,QAAQ,KAAK,aAAa,SAAS,GAAG;AAExD,kBAAI,KAAK,mBAAmB;AACxB,qBAAK,aAAa,WAAW,KAAK,sBAAsB,KAAK,kBAAkB;AAC/E,qBAAK,gBAAe;AACpB,qBAAK,oBAAoB;AACzB,qBAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AACrD,qBAAK,eAAe;AACpB,oBAAI,KAAK;AACL,sBAAI,eAAc;;AAEtB;;AAGJ,kBAAI,KAAK,kBAAkB,GAAG;AAC1B,qBAAK,OAAO,KAAK,aAAa,OAAO,GAAG,KAAK,aAAa,SAAS,CAAC;qBACjE;AACH,sBAAM,iBAAiB,KAAK,aAAa,SAAS,KAAK;AACvD,oBAAI,iBAAiB,GAAG;AACpB,uBAAK,aAAa,WAAW,iBAAiB,GAAG,cAAc;AAC/D,uBAAK,gBAAe;;;;AAIhC,gBAAI,KAAK;AACL,kBAAI,eAAc;;AAEtB;UACJ,KAAK;AACD,gBAAI,KAAK,mBAAmB;AACxB,mBAAK,aAAa,WAAW,KAAK,sBAAsB,KAAK,kBAAkB;AAC/E,mBAAK,gBAAe;AACpB,mBAAK,oBAAoB;AACzB,mBAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AACrD,kBAAI,KAAK;AACL,oBAAI,eAAc;;AAEtB;;AAEJ,gBAAI,KAAK,aAAa,QAAQ,KAAK,aAAa,SAAS,KAAK,KAAK,gBAAgB,GAAG;AAClF,oBAAM,iBAAiB,KAAK,aAAa,SAAS,KAAK;AACvD,mBAAK,aAAa,WAAW,gBAAgB,iBAAiB,CAAC;AAC/D,mBAAK,gBAAe;AACpB,mBAAK;;AAET,gBAAI,KAAK;AACL,kBAAI,eAAc;;AAEtB;UACJ,KAAK;AACD,iBAAK,MAAM,iBAAiB;AAC5B,iBAAK,oBAAoB;AACzB;UACJ,KAAK;AACD,iBAAK,gBAAgB;AACrB,iBAAK,eAAe;AACpB,iBAAK,oBAAoB;AACzB,iBAAK,aAAY;AACjB;UACJ,KAAK;AACD,iBAAK,gBAAgB,KAAK,aAAa;AACvC,iBAAK,eAAe;AACpB,iBAAK,oBAAoB;AACzB,iBAAK,aAAY;AACjB;UACJ,KAAK;AACD,iBAAK;AACL,gBAAI,KAAK,gBAAgB,KAAK,aAAa,QAAQ;AAC/C,mBAAK,gBAAgB,KAAK,aAAa;;AAG3C,gBAAI,OAAO,IAAI,UAAU;AAErB,mBAAK,eAAe;AAEpB,kBAAI,IAAI,WAAW,IAAI,SAAS;AAC5B,oBAAI,CAAC,KAAK,mBAAmB;AACzB,sBAAI,KAAK,aAAa,WAAW,KAAK,eAAe;AACjD;yBACG;AACH,yBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK,gBAAgB;;;AAGlF,qBAAK,uBAAuB;AAC5B,qBAAK,eAAe,KAAK,aAAa,SAAS,KAAK;AACpD,qBAAK,gBAAgB,KAAK,aAAa;AACvC,qBAAK,oBAAoB;AACzB,qBAAK,aAAY;AACjB;;AAGJ,kBAAI,CAAC,KAAK,mBAAmB;AACzB,qBAAK,oBAAoB;AACzB,qBAAK,eAAe,KAAK,iBAAiB,KAAK,aAAa,SAAS,KAAK,aAAa,SAAS,KAAK,gBAAgB;yBAGhH,KAAK,iBAAiB,IAAI;AAC/B,qBAAK,eAAe,KAAK,aAAa,SAAS,KAAK;AACpD,qBAAK,gBAAgB,KAAK,yBAAyB,IAAI,KAAK,aAAa,SAAS,KAAK,aAAa,SAAS,KAAK,uBAAuB;;AAG7I,kBAAI,KAAK,eAAe,KAAK,eAAe;AACxC,qBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,qBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;yBACrD,KAAK,eAAe,KAAK,eAAe;AAC/C,qBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,qBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;qBACzD;AACH,qBAAK,oBAAoB;;AAE7B,mBAAK,aAAY;AACjB;;AAEJ,gBAAI,KAAK,mBAAmB;AACxB,mBAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AACrD,mBAAK,oBAAoB;;AAE7B,gBAAI,QAAQ,IAAI,WAAW,IAAI,UAAU;AACrC,mBAAK,gBAAgB,KAAK,aAAa;AACvC,kBAAI,eAAc;;AAEtB,iBAAK,eAAe;AACpB,iBAAK,oBAAoB;AACzB,iBAAK,eAAe;AACpB,iBAAK,aAAY;AACjB;UACJ,KAAK;AACD,iBAAK;AACL,gBAAI,KAAK,gBAAgB,GAAG;AACxB,mBAAK,gBAAgB;;AAEzB,gBAAI,OAAO,IAAI,UAAU;AAErB,mBAAK,eAAe;AAEpB,kBAAI,IAAI,WAAW,IAAI,SAAS;AAC5B,oBAAI,CAAC,KAAK,mBAAmB;AACzB,sBAAI,KAAK,kBAAkB,GAAG;AAC1B;yBACG;AACH,yBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK,gBAAgB;;;AAGpF,qBAAK,qBAAqB,KAAK,aAAa;AAC5C,qBAAK,oBAAoB;AACzB,qBAAK,eAAe,KAAK,aAAa,SAAS,KAAK;AACpD,qBAAK,gBAAgB;AACrB,qBAAK,aAAY;AACjB;;AAGJ,kBAAI,CAAC,KAAK,mBAAmB;AACzB,qBAAK,oBAAoB;AACzB,qBAAK,eAAe,KAAK,iBAAiB,IAAI,IAAI,KAAK,gBAAgB;yBAGlE,KAAK,iBAAiB,IAAI;AAC/B,qBAAK,eAAe,KAAK,aAAa,SAAS,KAAK;AACpD,qBAAK,gBAAgB,KAAK,aAAa,WAAW,KAAK,qBAAqB,IAAI,KAAK,aAAa,SAAS,KAAK,qBAAqB;;AAGzI,kBAAI,KAAK,eAAe,KAAK,eAAe;AACxC,qBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,qBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;yBACrD,KAAK,eAAe,KAAK,eAAe;AAC/C,qBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,qBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;qBACzD;AACH,qBAAK,oBAAoB;;AAE7B,mBAAK,aAAY;AACjB;;AAEJ,gBAAI,KAAK,mBAAmB;AACxB,mBAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AACrD,mBAAK,oBAAoB;;AAG7B,gBAAI,QAAQ,IAAI,WAAW,IAAI,UAAU;AACrC,mBAAK,gBAAgB;AACrB,kBAAI,eAAc;;AAEtB,iBAAK,eAAe;AACpB,iBAAK,oBAAoB;AACzB,iBAAK,eAAe;AACpB,iBAAK,aAAY;AACjB;;AAER,YAAI,YAAY,IAAI;AAChB,iBAAM,KAAA,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,SAAG,QAAA,OAAA,SAAA,KAAI;;AAEtB,aAAK,WAAW,QAAQ;AAExB,YACI,QACC,YAAY;QACT,YAAY;QACZ,YAAY;QACZ,YAAY;QACX,UAAU,MAAM,UAAU;QAC1B,UAAU,MAAM,UAAU;QAC1B,UAAU,OAAO,UAAU;QAC3B,UAAU,OAAO,UAAU;QAC3B,UAAU,MAAM,UAAU,MACjC;AAEE,eAAK,cAAc;AACnB,eAAK,yBAAyB,gBAAgB,IAAI;AAClD,gBAAM,KAAK;AACX,cAAI,KAAK,WAAW,CAAC,KAAK,UAAU;AAChC,gBAAI,KAAK,mBAAmB;AACxB,mBAAK,aAAa,WAAW,KAAK,sBAAsB,KAAK,oBAAoB,GAAG;AACpF,mBAAK,gBAAe;AACpB,mBAAK,gBAAgB,KAAK,aAAa,UAAU,KAAK,uBAAuB;AAC7E,mBAAK,oBAAoB;AACzB,mBAAK,eAAe;AACpB,mBAAK,aAAY;uBACV,KAAK,kBAAkB,GAAG;AACjC,mBAAK,QAAQ,KAAK,aAAY,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,OAAM,IAAI,MAAM;mBAChD;AACH,oBAAM,iBAAiB,KAAK,aAAa,SAAS,KAAK;AACvD,mBAAK,aAAa,WAAW,gBAAgB,gBAAgB,GAAG;AAChE,mBAAK,gBAAe;;;;MAIpC;;;;MAKU,4BAA4B,QAAc;AAEhD,aAAK,eAAe;AAEpB,YAAI,KAAK,iBAAiB,IAAI;AAC1B,eAAK,eAAe;eACjB;AACH,cAAI,KAAK,eAAe,KAAK,eAAe;AACxC,iBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,iBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;qBACrD,KAAK,eAAe,KAAK,eAAe;AAC/C,iBAAK,qBAAqB,KAAK,aAAa,SAAS,KAAK;AAC1D,iBAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;iBACzD;AACH,iBAAK,oBAAoB;AACzB,iBAAK,aAAY;AACjB;;;AAGR,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;;;;MAKU,iBAAiB,KAAgB;AAEvC,aAAK,uBAAuB,KAAK,aAAa,SAAS,KAAK;AAC5D,aAAK,qBAAqB,KAAK;AAC/B,YAAI,UAAU;AACd,WAAG;AACC,sBAAY,KAAK,qBAAqB,KAAK,aAAa,UAAU,KAAK,aAAa,OAAO,KAAK,kBAAkB,IAAI,EAAE,KAAK,qBAAqB;AAClJ,qBAAW,KAAK,uBAAuB,KAAK,KAAK,aAAa,OAAO,KAAK,uBAAuB,CAAC,IAAI,EAAE,KAAK,uBAAuB;iBAC/H,YAAY;AAErB,aAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AAErD,aAAK,oBAAoB;AACzB,aAAK,qBAAqB;AAC1B,aAAK,eAAe;AACpB,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;MAEU,iBAAc;AACpB,aAAK,eAAe;AACpB,aAAK,oBAAoB;AAEzB,aAAK,uBAAuB;AAC5B,aAAK,qBAAqB,KAAK,aAAa;AAC5C,aAAK,gBAAgB,KAAK,aAAa;AACvC,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;;;;MAMO,gBAAgB,KAAmB;AAEtC,aAAK,WAAW,IAAI,SAAS,IAAI,KAAK,GAAG;AAEzC,aAAK,mCAAmC,gBAAgB,GAAG;MAC/D;;;;MAKU,YAAY,IAAkB;AACpC,aAAK,oBAAoB;AAEzB,YAAI;AACA,aAAG,iBAAiB,GAAG,cAAc,QAAQ,cAAc,KAAK,gBAAgB;iBAClF,IAAM;QAAA;AACR,aAAK,MAAM,gBAAgB,KAAK;MACpC;;;;MAIU,WAAW,IAAkB;AACnC,YAAI,CAAC,KAAK,kBAAkB;AACxB;;AAEJ,aAAK,aAAa,WAAW,KAAK,sBAAsB,KAAK,kBAAkB;AAC/E,aAAK,gBAAe;AACpB,aAAK,oBAAoB;AACzB,aAAK,gBAAgB,KAAK,aAAa,SAAS,KAAK;AAErD,YAAI;AACA,aAAG,iBAAiB,GAAG,cAAc,QAAQ,cAAc,KAAK,gBAAgB;iBAClF,IAAM;QAAA;AAER,aAAK,MAAM,gBAAgB,KAAK;AAChC,aAAK,mBAAmB;MAC5B;;;;MAIU,aAAa,IAAkB;AACrC,YAAI,OAAe;AACnB,YAAI,GAAG,iBAAiB,GAAG,cAAc,MAAM,QAAQ,YAAY,MAAM,IAAI;AACzE,iBAAO,GAAG,cAAc,QAAQ,YAAY;eACzC;AAEH,iBAAO,KAAK,MAAM;;AAEtB,cAAM,iBAAiB,KAAK,aAAa,SAAS,KAAK;AACvD,aAAK,aAAa,WAAW,gBAAgB,gBAAgB,IAAI;AACjE,aAAK,gBAAe;MACxB;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAIjC,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,oBAAoB;AACzB,oBAAQ,YAAY,KAAK,aAAa,KAAK,qBAAqB,KAAK;AAErE,oBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;mBAE1H,KAAK,aAAa;AACzB,kBAAQ,YAAY,KAAK,aAAa,KAAK,cAAc,KAAK;AAE9D,kBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;AAGjI,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAG5B,YAAI,CAAC,KAAK,eAAe,KAAK,WAAW;AACrC,eAAK,cAAc,QAAQ,eAAe,QAAQ,IAAI;;AAI1D,cAAM,eAAe,KAAK,gBAAgB,OAAO,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,KAAK;AACvH,YAAI,KAAK,OAAO;AACZ,kBAAQ,YAAY,KAAK;;AAG7B,YAAI,OAAO,KAAK,kBAAkB,KAAK,YAAY;AAEnD,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,aAAa,QAAQ,KAAK,kBAAkB;AACtE,iBAAO,IAAI,YAAW;AACtB,eAAK,OAAO,KAAK;AAEjB,cAAI,KAAK,mBAAmB;AACxB,oBAAQ,YAAY,KAAK;;;AAIjC,aAAK,aAAa,QAAQ,YAAY,KAAK,IAAI,EAAE;AACjD,cAAM,cAAc,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,KAAK,IAAI;AAC9F,YAAI,KAAK,mBAAmB;AACxB,eAAK,QAAQ,KAAK,IAAI,KAAK,UAAU,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,KAAK,GAAG,KAAK,aAAa,WAAW,IAAI;AAClI,eAAK,oBAAoB;;AAG7B,cAAM,QAAQ,KAAK,YAAY,UAAU,KAAK,gBAAgB,SAAS,KAAK,YAAY,UAAU;AAClG,cAAM,iBAAiB,KAAK,OAAO,gBAAgB,KAAK,OAAO,KAAK,mBAAmB,KAAK,IAAI;AAEhG,gBAAQ,KAAI;AACZ,gBAAQ,UAAS;AACjB,gBAAQ,KAAK,cAAc,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,SAAS,KAAK,YAAY,UAAU,GAAG,iBAAiB,GAAG,KAAK,gBAAgB,MAAM;AAClK,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,aAAa,gBAAgB;AACrD,gBAAM,WAAW,eAAe,KAAK,aAAa;AAClD,cAAI,CAAC,KAAK,aAAa;AACnB,iBAAK,cAAc;;eAEpB;AACH,eAAK,cAAc;;AAGvB,gBAAQ,SAAS,KAAK,MAAM,KAAK,aAAa,KAAK,gBAAgB,MAAM,KAAK;AAG9E,YAAI,KAAK,YAAY;AAEjB,cAAI,KAAK,oBAAoB;AACzB,kBAAM,gBAAgB,KAAK,cAAc,KAAK;AAC9C,kBAAM,yBAAyB,gBAAgB,KAAK;AACpD,gBAAI,cAAc;AAClB,iBAAK,gBAAgB;AACrB,gBAAI,eAAe;AACnB,eAAG;AACC,kBAAI,KAAK,eAAe;AACpB,+BAAe,KAAK,IAAI,yBAAyB,WAAW;;AAEhE,mBAAK;AACL,4BAAc,QAAQ,YAAY,KAAK,OAAO,KAAK,SAAS,KAAK,eAAe,KAAK,aAAa,CAAC,EAAE;qBAChG,cAAc,0BAA0B,KAAK,UAAU,KAAK;AAGrE,gBAAI,KAAK,IAAI,yBAAyB,WAAW,IAAI,cAAc;AAC/D,mBAAK;;AAGT,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;;AAI9B,cAAI,CAAC,KAAK,cAAc;AACpB,kBAAM,mBAAmB,KAAK,OAAO,KAAK,SAAS,KAAK,aAAa;AACrE,kBAAM,oBAAoB,QAAQ,YAAY,gBAAgB,EAAE;AAChE,gBAAI,aAAa,KAAK,cAAc,KAAK,aAAa;AAEtD,gBAAI,aAAa,cAAc;AAC3B,mBAAK,eAAe,eAAe;AACnC,2BAAa;AACb,mBAAK,aAAY;uBACV,aAAa,eAAe,gBAAgB;AACnD,mBAAK,eAAe,eAAe,iBAAiB;AACpD,2BAAa,eAAe;AAC5B,mBAAK,aAAY;;AAErB,gBAAI,CAAC,KAAK,mBAAmB;AACzB,sBAAQ,SAAS,YAAY,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,SAAS,KAAK,YAAY,UAAU,GAAG,GAAG,KAAK,YAAY,MAAM;;;AAIvJ,uBAAa,KAAK,aAAa;AAC/B,eAAK,gBAAqB,WAAW,MAAK;AACtC,iBAAK,eAAe,CAAC,KAAK;AAC1B,iBAAK,aAAY;UACrB,GAAG,GAAG;AAGN,cAAI,KAAK,mBAAmB;AACxB,yBAAa,KAAK,aAAa;AAC/B,kBAAM,6BAA6B,QAAQ,YAAY,KAAK,UAAU,KAAK,oBAAoB,CAAC,EAAE;AAClG,gBAAI,sBAAsB,KAAK,cAAc,KAAK,aAAa;AAC/D,iBAAK,mBAAmB,KAAK,UAAU,KAAK,sBAAsB,KAAK,kBAAkB;AACzF,gBAAI,QAAQ,QAAQ,YAAY,KAAK,UAAU,KAAK,sBAAsB,KAAK,kBAAkB,CAAC,EAAE;AACpG,gBAAI,sBAAsB,cAAc;AACpC,sBAAQ,SAAS,eAAe;AAChC,kBAAI,CAAC,OAAO;AAGR,wBAAQ,QAAQ,YAAY,KAAK,OAAO,KAAK,SAAS,KAAK,aAAa,CAAC,EAAE;;AAE/E,oCAAsB;;AAG1B,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,YAAY,KAAK;AACzB,oBAAQ,SAAS,qBAAqB,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,SAAS,KAAK,YAAY,UAAU,GAAG,OAAO,KAAK,YAAY,MAAM;AAC5J,oBAAQ,cAAc;;;AAG9B,gBAAQ,QAAO;AAGf,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,YAAY;AACjB,gBAAI,KAAK,cAAc;AACnB,sBAAQ,cAAc,KAAK;;iBAE5B;AACH,gBAAI,KAAK,OAAO;AACZ,sBAAQ,cAAc,KAAK;;;AAInC,kBAAQ,YAAY,KAAK;AAEzB,kBAAQ,WACJ,KAAK,gBAAgB,OAAO,KAAK,aAAa,GAC9C,KAAK,gBAAgB,MAAM,KAAK,aAAa,GAC7C,KAAK,gBAAgB,QAAQ,KAAK,YAClC,KAAK,gBAAgB,SAAS,KAAK,UAAU;;AAIrD,gBAAQ,QAAO;MACnB;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,aAAK,qBAAqB,YAAY;AACtC,aAAK,oBAAoB;AACzB,aAAK,mBAAmB;AACxB,aAAK,eAAe;AACpB,aAAK,iBAAiB;AACtB,aAAK,MAAM,kBAAkB,SAAS,IAAI;AAC1C,aAAK,aAAc,GAAG,MAAwB;AAC9C,YAAI,KAAK,MAAM,mBAAmB,MAAM;AAEpC,uBAAa,KAAK,aAAa;AAC/B,eAAK,aAAY;AACjB,iBAAO;;AAEX,YAAI,CAAC,KAAK,YAAY;AAClB,iBAAO;;AAEX,aAAK,MAAM,iBAAiB;AAE5B,eAAO;MACX;MACO,eAAe,QAAiB,aAAsB,WAAmB,IAAmB;AAC/F,YAAI,KAAK,MAAM,mBAAmB,QAAQ,KAAK,kBAAkB,CAAC,KAAK,YAAY;AAC/E,eAAK,qBAAqB,YAAY;AACtC,eAAK,aAAY;AACjB,eAAK,4BAA4B,KAAK,aAAa;;AAEvD,cAAM,eAAe,QAAQ,aAAa,WAAW,EAAE;MAC3D;MAEO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAoB;AACnH,aAAK,iBAAiB;AACtB,eAAO,KAAK,MAAM,kBAAkB,SAAS;AAC7C,cAAM,aAAa,QAAQ,aAAa,WAAW,aAAa,WAAW;MAC/E;MAEU,kBAAkB,aAAwB;AAChD,eAAO;MACX;;MAGA,IAAY,kBAAkB,OAAc;AACxC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAEJ,YAAI,OAAO;AACP,eAAK,0BAA0B,gBAAgB,IAAI;;AAEvD,aAAK,qBAAqB;MAC9B;;MAGA,IAAY,oBAAiB;AACzB,eAAO,KAAK;MAChB;MAEO,UAAO;AACV,cAAM,QAAO;AAEb,aAAK,iBAAiB,MAAK;AAC3B,aAAK,kBAAkB,MAAK;AAC5B,aAAK,wBAAwB,MAAK;AAClC,aAAK,qBAAqB,MAAK;AAC/B,aAAK,oBAAoB,MAAK;AAC9B,aAAK,sBAAsB,MAAK;AAChC,aAAK,0BAA0B,MAAK;AACpC,aAAK,mCAAmC,MAAK;MACjD;;AAvhCO,eAAA;MADN,UAAS;;AAIH,eAAA;MADN,UAAS;;AAwBV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AAcV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAeV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAeV,eAAA;MADC,UAAS;;AAyCV,eAAA;MADC,UAAS;;AA0BV,eAAA;MADC,UAAS;;AAmwBd,kBAAc,yBAAyB,SAAS;;;;;ICvkCnC;;;;AAdb;AACA;AACA;AAEA;AACA;AAIA;AAKM,IAAO,OAAP,cAAoB,UAAS;;;;;MAY/B,IAAW,YAAY,OAAc;AACjC,aAAK,eAAe;AAGpB,mBAAW,OAAO,KAAK,QAAQ;AAC3B,eAAK,OAAO,GAAG,EAAE,cAAc;;MAEvC;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;;MAMA,IAAW,aAAa,OAAc;AAClC,aAAK,gBAAgB;AAGrB,mBAAW,OAAO,KAAK,QAAQ;AAC3B,eAAK,OAAO,GAAG,EAAE,eAAe;;MAExC;MAEA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK,mBAAmB;MACnC;;;;MAKA,IAAW,WAAQ;AACf,eAAO,KAAK,gBAAgB;MAChC;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;;MAGA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;;;;;MAOO,iBAAiB,OAAa;AACjC,YAAI,QAAQ,KAAK,SAAS,KAAK,gBAAgB,QAAQ;AACnD,iBAAO;;AAGX,eAAO,KAAK,gBAAgB,KAAK;MACrC;;;;;;MAOO,oBAAoB,OAAa;AACpC,YAAI,QAAQ,KAAK,SAAS,KAAK,mBAAmB,QAAQ;AACtD,iBAAO;;AAGX,eAAO,KAAK,mBAAmB,KAAK;MACxC;;;;;;;MAQO,iBAAiB,QAAgB,UAAU,OAAK;AACnD,aAAK,gBAAgB,KAAK,IAAI,aAAa,QAAQ,UAAU,aAAa,iBAAiB,aAAa,mBAAmB,CAAC;AAC5H,aAAK,wBAAwB,KAAK,KAAK,gBAAgB,KAAK,WAAW,CAAC,EAAE,oBAAoB,IAAI,MAAM,KAAK,aAAY,CAAE,CAAE;AAC7H,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;;MAQO,oBAAoB,OAAe,UAAU,OAAK;AACrD,aAAK,mBAAmB,KAAK,IAAI,aAAa,OAAO,UAAU,aAAa,iBAAiB,aAAa,mBAAmB,CAAC;AAC9H,aAAK,2BAA2B,KAAK,KAAK,mBAAmB,KAAK,cAAc,CAAC,EAAE,oBAAoB,IAAI,MAAM,KAAK,aAAY,CAAE,CAAE;AACtI,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;;;MASO,iBAAiB,OAAe,QAAgB,UAAU,OAAK;AAClE,YAAI,QAAQ,KAAK,SAAS,KAAK,gBAAgB,QAAQ;AACnD,iBAAO;;AAGX,cAAM,UAAU,KAAK,gBAAgB,KAAK;AAC1C,YAAI,WAAW,QAAQ,YAAY,WAAW,QAAQ,UAAU,QAAQ;AACpE,iBAAO;;AAGX,aAAK,gBAAgB,KAAK,EAAE,oBAAoB,OAAO,KAAK,wBAAwB,KAAK,CAAC;AAC1F,aAAK,gBAAgB,KAAK,IAAI,IAAI,aAAa,QAAQ,UAAU,aAAa,iBAAiB,aAAa,mBAAmB;AAC/H,aAAK,wBAAwB,KAAK,IAAI,KAAK,gBAAgB,KAAK,EAAE,oBAAoB,IAAI,MAAM,KAAK,aAAY,CAAE;AAEnH,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;;;MASO,oBAAoB,OAAe,OAAe,UAAU,OAAK;AACpE,YAAI,QAAQ,KAAK,SAAS,KAAK,mBAAmB,QAAQ;AACtD,iBAAO;;AAGX,cAAM,UAAU,KAAK,mBAAmB,KAAK;AAC7C,YAAI,WAAW,QAAQ,YAAY,WAAW,QAAQ,UAAU,OAAO;AACnE,iBAAO;;AAGX,aAAK,mBAAmB,KAAK,EAAE,oBAAoB,OAAO,KAAK,2BAA2B,KAAK,CAAC;AAChG,aAAK,mBAAmB,KAAK,IAAI,IAAI,aAAa,OAAO,UAAU,aAAa,iBAAiB,aAAa,mBAAmB;AACjI,aAAK,2BAA2B,KAAK,IAAI,KAAK,mBAAmB,KAAK,EAAE,oBAAoB,IAAI,MAAM,KAAK,aAAY,CAAE;AAEzH,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;;MAQO,cAAc,KAAa,QAAc;AAC5C,cAAM,OAAO,KAAK,OAAO,GAAG,GAAG,IAAI,MAAM,EAAE;AAE3C,YAAI,CAAC,MAAM;AACP,iBAAO;;AAGX,eAAO,KAAK;MAChB;;;;;;MAOO,iBAAiB,OAAc;AAClC,eAAO,MAAM;MACjB;MAEQ,YAAY,MAAiB,KAAW;AAC5C,YAAI,CAAC,MAAM;AACP;;AAGJ,cAAM,cAAc,IAAI;AAExB,mBAAW,WAAW,KAAK,UAAU;AACjC,gBAAM,aAAa,KAAK,eAAe,QAAQ,OAAO;AAEtD,cAAI,eAAe,IAAI;AACnB,iBAAK,eAAe,OAAO,YAAY,CAAC;;;AAIhD,eAAO,KAAK,OAAO,GAAG;MAC1B;MAEQ,YAAY,aAAqB,KAAW;AAChD,YAAI,CAAC,KAAK,OAAO,GAAG,GAAG;AACnB;;AAGJ,aAAK,OAAO,WAAW,IAAI,KAAK,OAAO,GAAG;AAE1C,mBAAW,WAAW,KAAK,OAAO,WAAW,EAAE,UAAU;AACrD,kBAAQ,OAAO;;AAGnB,eAAO,KAAK,OAAO,GAAG;MAC1B;;;;;;MAOO,uBAAuB,OAAa;AACvC,YAAI,QAAQ,KAAK,SAAS,KAAK,mBAAmB,QAAQ;AACtD,iBAAO;;AAGX,iBAAS,IAAI,GAAG,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AAClD,gBAAM,MAAM,GAAG,CAAC,IAAI,KAAK;AACzB,gBAAM,OAAO,KAAK,OAAO,GAAG;AAE5B,eAAK,YAAY,MAAM,GAAG;;AAG9B,iBAAS,IAAI,GAAG,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AAClD,mBAAS,IAAI,QAAQ,GAAG,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AAC7D,kBAAM,cAAc,GAAG,CAAC,IAAI,IAAI,CAAC;AACjC,kBAAM,MAAM,GAAG,CAAC,IAAI,CAAC;AAErB,iBAAK,YAAY,aAAa,GAAG;;;AAIzC,aAAK,mBAAmB,KAAK,EAAE,oBAAoB,OAAO,KAAK,2BAA2B,KAAK,CAAC;AAChG,aAAK,mBAAmB,OAAO,OAAO,CAAC;AACvC,aAAK,2BAA2B,OAAO,OAAO,CAAC;AAE/C,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;MAOO,oBAAoB,OAAa;AACpC,YAAI,QAAQ,KAAK,SAAS,KAAK,gBAAgB,QAAQ;AACnD,iBAAO;;AAGX,iBAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AACrD,gBAAM,MAAM,GAAG,KAAK,IAAI,CAAC;AACzB,gBAAM,OAAO,KAAK,OAAO,GAAG;AAE5B,eAAK,YAAY,MAAM,GAAG;;AAG9B,iBAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AACrD,mBAAS,IAAI,QAAQ,GAAG,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AAC1D,kBAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC;AACjC,kBAAM,MAAM,GAAG,CAAC,IAAI,CAAC;AAErB,iBAAK,YAAY,aAAa,GAAG;;;AAIzC,aAAK,gBAAgB,KAAK,EAAE,oBAAoB,OAAO,KAAK,wBAAwB,KAAK,CAAC;AAC1F,aAAK,gBAAgB,OAAO,OAAO,CAAC;AACpC,aAAK,wBAAwB,OAAO,OAAO,CAAC;AAE5C,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;;;MASO,WAAW,SAAkB,MAAc,GAAG,SAAiB,GAAC;AACnE,YAAI,KAAK,gBAAgB,WAAW,GAAG;AAEnC,eAAK,iBAAiB,GAAG,KAAK;;AAGlC,YAAI,KAAK,mBAAmB,WAAW,GAAG;AAEtC,eAAK,oBAAoB,GAAG,KAAK;;AAGrC,YAAI,KAAK,eAAe,QAAQ,OAAO,MAAM,IAAI;AAC7C,gBAAM,KAAK,iBAAiB,QAAQ,IAAI,cAAc,QAAQ,QAAQ,kFAAkF;AACxJ,iBAAO;;AAGX,cAAM,IAAI,KAAK,IAAI,KAAK,KAAK,gBAAgB,SAAS,CAAC;AACvD,cAAM,IAAI,KAAK,IAAI,QAAQ,KAAK,mBAAmB,SAAS,CAAC;AAC7D,cAAM,MAAM,GAAG,CAAC,IAAI,CAAC;AACrB,YAAI,gBAAgB,KAAK,OAAO,GAAG;AAEnC,YAAI,CAAC,eAAe;AAChB,0BAAgB,IAAI,UAAU,GAAG;AACjC,eAAK,OAAO,GAAG,IAAI;AACnB,wBAAc,sBAAsB,QAAQ;AAC5C,wBAAc,oBAAoB,QAAQ;AAC1C,wBAAc,cAAc,KAAK;AACjC,wBAAc,eAAe,KAAK;AAClC,gBAAM,WAAW,aAAa;;AAGlC,sBAAc,WAAW,OAAO;AAChC,aAAK,eAAe,KAAK,OAAO;AAChC,gBAAQ,OAAO;AACf,gBAAQ,SAAS;AAEjB,aAAK,aAAY;AAEjB,eAAO;MACX;;;;;;MAOO,cAAc,SAAgB;AACjC,cAAM,QAAQ,KAAK,eAAe,QAAQ,OAAO;AAEjD,YAAI,UAAU,IAAI;AACd,eAAK,eAAe,OAAO,OAAO,CAAC;;AAGvC,cAAM,OAAO,KAAK,OAAO,QAAQ,IAAI;AAErC,YAAI,MAAM;AACN,eAAK,cAAc,OAAO;AAC1B,kBAAQ,OAAO;;AAGnB,aAAK,aAAY;AACjB,eAAO;MACX;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAtXX,aAAA,kBAAkB,IAAI,MAAK;AAC3B,aAAA,0BAA4C,CAAA;AAC5C,aAAA,qBAAqB,IAAI,MAAK;AAC9B,aAAA,6BAA+C,CAAA;AAC/C,aAAA,SAAuC,CAAA;AACvC,aAAA,iBAAiB,IAAI,MAAK;MAmXlC;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,oBAAoB,oBAAkG;AAC5H,cAAM,SAAS,CAAA;AACf,cAAM,UAAU,CAAA;AAChB,cAAM,QAAQ,CAAA;AACd,cAAM,OAAO,CAAA;AAEb,YAAI,iBAAiB,KAAK,gBAAgB;AAC1C,YAAI,wBAAwB;AAC5B,YAAI,kBAAkB,KAAK,gBAAgB;AAC3C,YAAI,yBAAyB;AAG7B,YAAI,QAAQ;AACZ,mBAAW,iBAAiB,KAAK,iBAAiB;AAC9C,cAAI,cAAc,SAAS;AACvB,kBAAM,SAAS,cAAc,SAAS,KAAK,KAAK;AAChD,+BAAmB;AACnB,oBAAQ,KAAK,IAAI;iBACd;AACH,sCAA0B,cAAc;;AAE5C;;AAGJ,YAAI,MAAM;AACV,gBAAQ;AACR,mBAAW,iBAAiB,KAAK,iBAAiB;AAC9C,eAAK,KAAK,GAAG;AAEb,cAAI,CAAC,cAAc,SAAS;AACxB,kBAAM,SAAS,KAAK,MAAO,cAAc,QAAQ,yBAA0B,eAAe;AAC1F,mBAAO;AACP,oBAAQ,KAAK,IAAI;iBACd;AACH,mBAAO,cAAc,SAAS,KAAK,KAAK;;AAE5C;;AAIJ,gBAAQ;AACR,mBAAW,oBAAoB,KAAK,oBAAoB;AACpD,cAAI,iBAAiB,SAAS;AAC1B,kBAAM,QAAQ,iBAAiB,SAAS,KAAK,KAAK;AAClD,8BAAkB;AAClB,mBAAO,KAAK,IAAI;iBACb;AACH,qCAAyB,iBAAiB;;AAE9C;;AAGJ,YAAI,OAAO;AACX,gBAAQ;AACR,mBAAW,oBAAoB,KAAK,oBAAoB;AACpD,gBAAM,KAAK,IAAI;AACf,cAAI,CAAC,iBAAiB,SAAS;AAC3B,kBAAM,QAAQ,KAAK,MAAO,iBAAiB,QAAQ,wBAAyB,cAAc;AAC1F,oBAAQ;AACR,mBAAO,KAAK,IAAI;iBACb;AACH,oBAAQ,iBAAiB,SAAS,KAAK,KAAK;;AAEhD;;AAGJ,2BAAmB,OAAO,MAAM,QAAQ,OAAO;MACnD;MAEU,sBAAsB,eAAwB,SAAgC;AACpF,aAAK,oBAAoB,CAAC,OAAiB,MAAgB,QAAkB,YAAqB;AAE9F,qBAAW,OAAO,KAAK,QAAQ;AAC3B,gBAAI,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,QAAQ,GAAG,GAAG;AACzD;;AAEJ,kBAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,kBAAM,IAAI,SAAS,MAAM,CAAC,CAAC;AAC3B,kBAAM,IAAI,SAAS,MAAM,CAAC,CAAC;AAC3B,kBAAM,OAAO,KAAK,OAAO,GAAG;AAE5B,iBAAK,eAAe,MAAM,CAAC;AAC3B,iBAAK,cAAc,KAAK,CAAC;AACzB,iBAAK,gBAAgB,OAAO,CAAC;AAC7B,iBAAK,iBAAiB,QAAQ,CAAC;AAC/B,iBAAK,MAAM,wBAAwB;AACnC,iBAAK,KAAK,wBAAwB;AAClC,iBAAK,OAAO,wBAAwB;AACpC,iBAAK,QAAQ,wBAAwB;;QAE7C,CAAC;AAED,cAAM,sBAAsB,eAAe,OAAO;MACtD;MAEO,gCAA6B;AAChC,mBAAW,OAAO,KAAK,QAAQ;AAC3B,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,QAAQ,GAAG,GAAG;AACzD;;AAGJ,gBAAM,QAAQ,KAAK,OAAO,GAAG;AAC7B,gBAAM,mBAAkB;;MAEhC;MAEO,yBAAyB,SAAgC;AAC5D,cAAM,yBAAyB,OAAO;AAEtC,aAAK,oBAAoB,CAAC,OAAiB,MAAgB,QAAkB,YAAqB;AAE9F,mBAAS,QAAQ,GAAG,QAAQ,MAAM,QAAQ,SAAS;AAC/C,kBAAM,OAAO,KAAK,gBAAgB,OAAO,MAAM,KAAK,IAAI,OAAO,KAAK;AACpE,oBAAQ,UAAS;AACjB,oBAAQ,OAAO,MAAM,KAAK,gBAAgB,GAAG;AAC7C,oBAAQ,OAAO,MAAM,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM;AAC3E,oBAAQ,OAAM;;AAIlB,mBAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,SAAS;AAC9C,kBAAM,MAAM,KAAK,gBAAgB,MAAM,KAAK,KAAK,IAAI,QAAQ,KAAK;AAClE,oBAAQ,UAAS;AACjB,oBAAQ,OAAO,KAAK,gBAAgB,MAAM,GAAG;AAC7C,oBAAQ,OAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,OAAO,GAAG;AAC1E,oBAAQ,OAAM;;QAEtB,CAAC;AAED,gBAAQ,QAAO;MACnB;;MAGO,UAAO;AACV,cAAM,QAAO;AAEb,mBAAW,WAAW,KAAK,gBAAgB;AACvC,kBAAQ,QAAO;;AAEnB,iBAAS,QAAQ,GAAG,QAAQ,KAAK,gBAAgB,QAAQ,SAAS;AAC9D,eAAK,gBAAgB,KAAK,EAAE,oBAAoB,OAAO,KAAK,wBAAwB,KAAK,CAAC;;AAE9F,iBAAS,QAAQ,GAAG,QAAQ,KAAK,mBAAmB,QAAQ,SAAS;AACjE,eAAK,mBAAmB,KAAK,EAAE,oBAAoB,OAAO,KAAK,2BAA2B,KAAK,CAAC;;AAEpG,aAAK,wBAAwB,SAAS;AACtC,aAAK,gBAAgB,SAAS;AAC9B,aAAK,2BAA2B,SAAS;AACzC,aAAK,mBAAmB,SAAS;AACjC,aAAK,SAAS,CAAA;AACd,aAAK,eAAe,SAAS;MACjC;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AACnC,4BAAoB,cAAc,KAAK;AACvC,4BAAoB,WAAW,KAAK;AACpC,4BAAoB,UAAU,CAAA;AAC9B,4BAAoB,OAAO,CAAA;AAC3B,4BAAoB,OAAO,CAAA;AAC3B,iBAAS,IAAI,GAAG,IAAI,KAAK,aAAa,EAAE,GAAG;AACvC,gBAAM,KAAK,KAAK,oBAAoB,CAAC;AACrC,gBAAM,2BAA2B,EAAE,OAAO,OAAE,QAAF,OAAE,SAAA,SAAF,GAAI,SAAS,KAAK,IAAI,GAAG,MAAM,OAAE,QAAF,OAAE,SAAA,SAAF,GAAI,KAAI;AACjF,8BAAoB,QAAQ,KAAK,wBAAwB;;AAE7D,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,EAAE,GAAG;AACpC,gBAAM,KAAK,KAAK,iBAAiB,CAAC;AAClC,gBAAM,2BAA2B,EAAE,OAAO,OAAE,QAAF,OAAE,SAAA,SAAF,GAAI,SAAS,KAAK,IAAI,GAAG,MAAM,OAAE,QAAF,OAAE,SAAA,SAAF,GAAI,KAAI;AACjF,8BAAoB,KAAK,KAAK,wBAAwB;;AAE1D,aAAK,SAAS,QAAQ,CAAC,UAAS;AAC5B,8BAAoB,KAAK,KAAK,MAAM,IAAI;QAC5C,CAAC;MACL;;;;MAKO,kBAAkB,kBAAuB,MAA4B;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAC9C,cAAM,WAAsB,CAAA;AAC5B,aAAK,SAAS,QAAQ,CAAC,UAAS;AAC5B,mBAAS,KAAK,KAAK;QACvB,CAAC;AACD,aAAK,oBAAoB,CAAC;AAC1B,aAAK,uBAAuB,CAAC;AAC7B,iBAAS,IAAI,GAAG,IAAI,iBAAiB,aAAa,EAAE,GAAG;AACnD,gBAAM,cAAc,iBAAiB,QAAQ,CAAC,EAAE;AAChD,gBAAM,OAAO,iBAAiB,QAAQ,CAAC,EAAE;AACzC,eAAK,oBAAoB,aAAa,SAAS,IAAI,OAAO,KAAK;;AAEnE,iBAAS,IAAI,GAAG,IAAI,iBAAiB,UAAU,EAAE,GAAG;AAChD,gBAAM,WAAW,iBAAiB,KAAK,CAAC,EAAE;AAC1C,gBAAM,OAAO,iBAAiB,KAAK,CAAC,EAAE;AACtC,eAAK,iBAAiB,UAAU,SAAS,IAAI,OAAO,KAAK;;AAG7D,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,gBAAM,WAAW,iBAAiB,KAAK,CAAC;AACxC,cAAI,YAAY,SAAS,SAAS,UAAU,GAAG,SAAS,OAAO,GAAG,CAAC,CAAC;AACpE,cAAI,MAAM,SAAS,GAAG;AAClB,wBAAY;;AAEhB,cAAI,eAAe,SAAS,SAAS,UAAU,SAAS,OAAO,GAAG,IAAI,CAAC,CAAC;AACxE,cAAI,MAAM,YAAY,GAAG;AACrB,2BAAe;;AAEnB,eAAK,WAAW,SAAS,CAAC,GAAG,WAAW,YAAY;;MAE5D;;AA9jBA,eAAA;MADC,UAAS;;AAikBd,kBAAc,oBAAoB,IAAI;;;;;ICnlBzB;;;;AAnBb;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGM,IAAO,cAAP,MAAO,qBAAoB,QAAO;;MA2BpC,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MAEA,IAAW,MAAM,OAAa;AAC1B,YAAI,KAAK,OAAO,OAAO,KAAK,GAAG;AAC3B;;AAGJ,aAAK,OAAO,SAAS,KAAK;AAE1B,aAAK,OAAO,WAAW,KAAK,SAAS;AAErC,aAAK,KAAK,KAAK,UAAU;AACzB,aAAK,KAAK,KAAK,IAAI,KAAK,UAAU,GAAG,IAAO;AAC5C,aAAK,KAAK,KAAK,IAAI,KAAK,UAAU,GAAG,IAAO;AAE5C,aAAK,aAAY;AAEjB,YAAI,KAAK,OAAO,KAAK,aAAY,UAAU;AACvC,eAAK,OAAO,IAAI;;AAGpB,YAAI,KAAK,OAAO,KAAK,aAAY,UAAU;AACvC,eAAK,OAAO,IAAI;;AAGpB,YAAI,KAAK,OAAO,KAAK,aAAY,UAAU;AACvC,eAAK,OAAO,IAAI;;AAGpB,YAAI,KAAK,OAAO,KAAK,IAAM,aAAY,UAAU;AAC7C,eAAK,OAAO,IAAI;;AAGpB,YAAI,KAAK,OAAO,KAAK,IAAM,aAAY,UAAU;AAC7C,eAAK,OAAO,IAAI;;AAGpB,YAAI,KAAK,OAAO,KAAK,IAAM,aAAY,UAAU;AAC7C,eAAK,OAAO,IAAI;;AAGpB,aAAK,yBAAyB,gBAAgB,KAAK,MAAM;MAC7D;;;;;MAOA,IAAW,QAAK;AACZ,eAAO,KAAK,OAAO,SAAS,KAAK,KAAK;MAC1C;MAEA,IAAW,MAAM,OAAsB;AACnC,YAAI,KAAK,OAAO,SAAS,KAAK,KAAK,MAAM,OAAO;AAC5C;;AAGJ,YAAI,KAAK,OAAO,WAAW,KAAK,GAAG;AAC/B,cAAI,KAAK,OAAO,SAAS,KAAK,KAAK,MAAM,GAAG;AACxC,oBAAQ;AACR,iBAAK,OAAO,WAAW,KAAK;;AAEhC,eAAK,QAAQ,WAAW,KAAK;AAC7B,eAAK,aAAY;;MAEzB;;;;;MAOA,IAAW,SAAM;AACb,eAAO,KAAK,QAAQ,SAAS,KAAK,KAAK;MAC3C;;MAGA,IAAW,OAAO,OAAsB;AACpC,YAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,OAAO;AAC7C;;AAGJ,YAAI,KAAK,QAAQ,WAAW,KAAK,GAAG;AAChC,cAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,GAAG;AACzC,oBAAQ;AACR,iBAAK,QAAQ,WAAW,KAAK;;AAEjC,eAAK,OAAO,WAAW,KAAK;AAC5B,eAAK,aAAY;;MAEzB;;MAIA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;MAEA,IAAW,KAAK,OAAsB;AAClC,aAAK,QAAQ;MACjB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AApIX,aAAA,SAAiB,OAAO,IAAG;AAC3B,aAAA,YAAY,IAAI,OAAM;AAEtB,aAAA,0BAA0B;AAC1B,aAAA,yBAAyB;AAEzB,aAAA,cAAc;AACd,aAAA,aAAa;AACb,aAAA,cAAc;AAEd,aAAA,KAAK;AACL,aAAA,KAAK;AACL,aAAA,KAAK;AAEL,aAAA,qBAAqB;AAKtB,aAAA,2BAA2B,IAAI,WAAU;AAwSxC,aAAA,iBAAiB;AArLrB,aAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,GAAG;AACtC,aAAK,OAAO;AACZ,aAAK,mBAAmB;MAC5B;MAEU,eAAY;AAClB,eAAO;MACX;;;;MAKU,YAAY,eAAsB;AACxC,YAAI,cAAc,QAAQ,cAAc,QAAQ;AAC5C,eAAK,gBAAgB,SAAS,cAAc;eACzC;AACH,eAAK,gBAAgB,QAAQ,cAAc;;MAEnD;MAEQ,qBAAkB;AACtB,cAAM,SAAS,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM,IAAI;AACnF,cAAM,iBAAiB,SAAS;AAChC,cAAM,iBAAiB,SAAS,kBAAkB;AAClD,cAAM,aAAa,gBAAgB,KAAK,KAAK,CAAC;AAC9C,cAAM,SAAS,SAAS,aAAa;AAErC,aAAK,cAAc,KAAK,gBAAgB,OAAO;AAC/C,aAAK,aAAa,KAAK,gBAAgB,MAAM;AAC7C,aAAK,cAAc;MACvB;MAEQ,oBAAoB,UAAkB,MAAc,KAAa,OAAe,QAAgB,SAAgC;AACpI,cAAM,MAAM,QAAQ,qBAAqB,MAAM,KAAK,QAAQ,MAAM,GAAG;AACrE,YAAI,aAAa,GAAG,MAAM;AAC1B,YAAI,aAAa,GAAG,SAAS,WAAW,cAAc;AAEtD,gBAAQ,YAAY;AACpB,gBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;AAEzC,cAAM,MAAM,QAAQ,qBAAqB,MAAM,KAAK,MAAM,SAAS,GAAG;AACtE,YAAI,aAAa,GAAG,eAAe;AACnC,YAAI,aAAa,GAAG,MAAM;AAE1B,gBAAQ,YAAY;AACpB,gBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;MAC7C;MAEQ,YAAY,SAAiB,SAAiB,QAAgB,SAAgC;AAClG,gBAAQ,UAAS;AACjB,gBAAQ,IAAI,SAAS,SAAS,SAAS,GAAG,GAAG,IAAI,KAAK,IAAI,KAAK;AAC/D,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACtB,gBAAQ,OAAM;AACd,gBAAQ,UAAS;AACjB,gBAAQ,IAAI,SAAS,SAAS,QAAQ,GAAG,IAAI,KAAK,IAAI,KAAK;AAC3D,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACtB,gBAAQ,OAAM;MAClB;MAEQ,wBAAwB,QAAgB,WAAiB;AAE7D,cAAM,SAAS,YAAY;AAC3B,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,4CAA4C;;AAEhE,cAAM,SAAS,OAAO,aAAa,SAAS,GAAG,SAAS,CAAC;AACzD,cAAM,UAAU,OAAO,WAAW,IAAI;AACtC,cAAM,QAAQ,QAAQ,aAAa,GAAG,GAAG,SAAS,GAAG,SAAS,CAAC;AAC/D,cAAM,OAAO,MAAM;AAEnB,cAAM,QAAQ,KAAK;AACnB,cAAM,YAAY,SAAS;AAC3B,cAAM,cAAc,SAAS;AAC7B,cAAM,YAAY,cAAc;AAEhC,iBAAS,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK;AACnC,mBAAS,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK;AACnC,kBAAM,SAAS,IAAI,IAAI,IAAI;AAE3B,gBAAI,SAAS,aAAa,SAAS,WAAW;AAC1C;;AAGJ,kBAAM,OAAO,KAAK,KAAK,MAAM;AAC7B,kBAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAE3B,mBAAO,cAAe,MAAM,MAAO,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG,KAAK;AAEzE,kBAAM,SAAS,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU;AAEzD,iBAAK,KAAK,IAAI,MAAM,IAAI;AACxB,iBAAK,QAAQ,CAAC,IAAI,MAAM,IAAI;AAC5B,iBAAK,QAAQ,CAAC,IAAI,MAAM,IAAI;AAC5B,gBAAI,cAAc,OAAO,gBAAgB,SAAS;AAGlD,gBAAI,cAAc;AAClB,kBAAM,WAAW;AACjB,kBAAM,WAAW;AACjB,kBAAM,cAAc;AACpB,kBAAM,cAAc;AAEpB,gBAAI,SAAS,aAAa;AACtB,4BAAc;uBACP,SAAS,aAAa;AAC7B,4BAAc;mBACX;AACH,6BAAgB,WAAW,aAAa,SAAS,gBAAiB,cAAc,eAAe;;AAGnG,0BAAc,OAAO,gBAAgB,SAAS;AAE9C,gBAAI,aAAa,aAAa;AAC1B,mBAAK,QAAQ,CAAC,IAAI,OAAO,aAAa;uBAC/B,aAAa,IAAI,aAAa;AACrC,mBAAK,QAAQ,CAAC,IAAI,OAAO,KAAO,cAAc,IAAI,gBAAgB;mBAC/D;AACH,mBAAK,QAAQ,CAAC,IAAI;;;;AAK9B,gBAAQ,aAAa,OAAO,GAAG,CAAC;AAEhC,eAAO;MACX;;;;MAKO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAEzB,cAAM,SAAS,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM,IAAI;AACnF,cAAM,iBAAiB,SAAS;AAChC,cAAM,OAAO,KAAK,gBAAgB;AAClC,cAAM,MAAM,KAAK,gBAAgB;AAEjC,YAAI,CAAC,KAAK,qBAAqB,KAAK,kBAAkB,SAAS,SAAS,GAAG;AACvE,eAAK,oBAAoB,KAAK,wBAAwB,QAAQ,cAAc;;AAGhF,aAAK,mBAAkB;AAEvB,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;AAE7B,kBAAQ,SAAS,KAAK,aAAa,KAAK,YAAY,KAAK,aAAa,KAAK,WAAW;;AAG1F,gBAAQ,UAAU,KAAK,mBAAmB,MAAM,GAAG;AAEnD,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAG5B,aAAK,oBAAoB,KAAK,IAAI,KAAK,aAAa,KAAK,YAAY,KAAK,aAAa,KAAK,aAAa,OAAO;AAEhH,YAAI,KAAK,KAAK,cAAc,KAAK,cAAc,KAAK;AACpD,YAAI,KAAK,KAAK,aAAa,KAAK,eAAe,IAAI,KAAK;AAExD,aAAK,YAAY,IAAI,IAAI,SAAS,MAAM,OAAO;AAE/C,cAAM,OAAO,SAAS,iBAAiB;AACvC,aAAK,OAAO,SAAS,KAAK,KAAM,KAAK,KAAK,OAAO,KAAK,KAAM,GAAG,IAAI;AACnE,aAAK,MAAM,SAAS,KAAK,KAAM,KAAK,KAAK,OAAO,KAAK,KAAM,GAAG,IAAI;AAClE,aAAK,YAAY,IAAI,IAAI,iBAAiB,MAAM,OAAO;AAEvD,gBAAQ,QAAO;MACnB;MAKQ,wBAAwB,GAAW,GAAS;AAChD,YAAI,KAAK,wBAAwB;AAC7B,gBAAM,SAAS,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM,IAAI;AACnF,gBAAM,UAAU,SAAS,KAAK,gBAAgB;AAC9C,gBAAM,UAAU,SAAS,KAAK,gBAAgB;AAC9C,eAAK,KAAM,KAAK,MAAM,IAAI,SAAS,IAAI,OAAO,IAAI,MAAO,KAAK,KAAK;mBAC5D,KAAK,yBAAyB;AACrC,eAAK,mBAAkB;AACvB,eAAK,MAAM,IAAI,KAAK,eAAe,KAAK;AACxC,eAAK,KAAK,KAAK,IAAI,KAAK,cAAc,KAAK;AAC3C,eAAK,KAAK,KAAK,IAAI,KAAK,IAAI,CAAC;AAC7B,eAAK,KAAK,KAAK,IAAI,KAAK,IAAI,aAAY,QAAQ;AAChD,eAAK,KAAK,KAAK,IAAI,KAAK,IAAI,CAAC;AAC7B,eAAK,KAAK,KAAK,IAAI,KAAK,IAAI,aAAY,QAAQ;;AAGpD,eAAO,cAAc,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,SAAS;AAE9D,aAAK,QAAQ,KAAK;MACtB;MAEQ,iBAAiB,GAAW,GAAS;AACzC,aAAK,mBAAkB;AAEvB,cAAM,OAAO,KAAK;AAClB,cAAM,MAAM,KAAK;AACjB,cAAM,OAAO,KAAK;AAElB,YAAI,KAAK,QAAQ,KAAK,OAAO,QAAQ,KAAK,OAAO,KAAK,MAAM,MAAM;AAC9D,iBAAO;;AAGX,eAAO;MACX;MAEQ,gBAAgB,GAAW,GAAS;AACxC,cAAM,SAAS,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM,IAAI;AACnF,cAAM,UAAU,SAAS,KAAK,gBAAgB;AAC9C,cAAM,UAAU,SAAS,KAAK,gBAAgB;AAC9C,cAAM,iBAAiB,SAAS;AAChC,cAAM,cAAc,SAAS;AAC7B,cAAM,WAAW,SAAS;AAC1B,cAAM,gBAAgB,cAAc;AAEpC,cAAM,KAAK,IAAI;AACf,cAAM,KAAK,IAAI;AAEf,cAAM,SAAS,KAAK,KAAK,KAAK;AAE9B,YAAI,UAAU,YAAY,UAAU,eAAe;AAC/C,iBAAO;;AAGX,eAAO;MACX;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,aAAK,iBAAiB;AAEtB,aAAK,0BAA0B;AAC/B,aAAK,yBAAyB;AAG9B,aAAK,uBAAuB,qBAAqB,YAAY,GAAG,YAAY,GAAG,KAAK,oBAAoB;AAExG,cAAM,IAAI,KAAK,qBAAqB;AACpC,cAAM,IAAI,KAAK,qBAAqB;AAEpC,YAAI,KAAK,iBAAiB,GAAG,CAAC,GAAG;AAC7B,eAAK,0BAA0B;mBACxB,KAAK,gBAAgB,GAAG,CAAC,GAAG;AACnC,eAAK,yBAAyB;;AAGlC,aAAK,wBAAwB,GAAG,CAAC;AACjC,aAAK,MAAM,kBAAkB,SAAS,IAAI;AAC1C,aAAK,qBAAqB;AAC1B,eAAO;MACX;MAEO,eAAe,QAAiB,aAAsB,WAAmB,IAAmB;AAE/F,YAAI,aAAa,KAAK,oBAAoB;AACtC;;AAGJ,YAAI,CAAC,KAAK,YAAY;AAElB,eAAK,uBAAuB,qBAAqB,YAAY,GAAG,YAAY,GAAG,KAAK,oBAAoB;AAExG,gBAAM,IAAI,KAAK,qBAAqB;AACpC,gBAAM,IAAI,KAAK,qBAAqB;AAEpC,cAAI,KAAK,gBAAgB;AACrB,iBAAK,wBAAwB,GAAG,CAAC;;;AAIzC,cAAM,eAAe,QAAQ,aAAa,WAAW,EAAE;MAC3D;MAEO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAsB,IAAmB;AACxI,aAAK,iBAAiB;AAEtB,eAAO,KAAK,MAAM,kBAAkB,SAAS;AAC7C,cAAM,aAAa,QAAQ,aAAa,WAAW,aAAa,aAAa,EAAE;MACnF;MAEO,gBAAa;AAChB,aAAK,gBAAe;AACpB,cAAM,cAAa;MACvB;;;;;;;;;;;;;;;;MAiBO,OAAO,sBACV,iBACA,SAQC;AAKD,eAAO,IAAI,QAAQ,CAAC,YAAW;AAE3B,kBAAQ,cAAc,QAAQ,eAAe;AAC7C,kBAAQ,eAAe,QAAQ,gBAAgB;AAC/C,kBAAQ,eAAe,QAAQ,gBAAgB;AAC/C,kBAAQ,YAAY,QAAQ,aAAa;AACzC,kBAAQ,cAAc,QAAQ,eAAe;AAC7C,kBAAQ,qBAAqB,QAAQ,sBAAsB;AAG3D,gBAAM,gBAAwB,QAAQ,cAAc,QAAQ;AAC5D,gBAAM,gBAAwB,WAAmB,QAAQ,WAAW,IAAI,QAAQ;AAChF,gBAAM,aAAqB,KAAK,MAAM,gBAAgB,IAAI;AAC1D,gBAAM,aAAqB,cAAc,QAAQ,qBAAqB;AACtE,gBAAM,aAAqB,KAAK,OAAO,WAAmB,QAAQ,WAAW,IAAI,cAAc,QAAQ,kBAAkB;AACzH,gBAAM,gBAAwB,aAAa,gBAAgB,cAAc,gBAAgB;AACzF,gBAAM,iBAAyB,SAAS,QAAQ,YAAY,IAAI,gBAAgB,KAAK,MAAM,aAAa,IAAI,GAAG,SAAQ,IAAK;AAG5H,gBAAM,cAAsB;AAC5B,gBAAM,wBAAgC;AACtC,gBAAM,6BAAqC;AAC3C,gBAAM,6BAAqC;AAC3C,gBAAM,sBAA8B;AACpC,gBAAM,gCAAwC;AAC9C,gBAAM,8BAAsC;AAC5C,gBAAM,sBAA8B,OAAO,cAAc,SAAS;AAClE,gBAAM,iBAAyB,oBAAoB,IAAI,oBAAoB,IAAI,oBAAoB;AACnG,gBAAM,gBAAwB;AAC9B,gBAAM,iBAAyB;AAG/B,cAAI;AACJ,cAAI;AAGJ,gBAAM,mBAA6B,CAAC,KAAK,KAAK,GAAG;AACjD,gBAAM,2BAAmC;AACzC,gBAAM,iBAAyB;AAG/B,cAAI;AAGJ,cAAI;AACJ,cAAI,iBAA0B;AAG9B,cAAI;AACJ,cAAI;AACJ,cAAI;AAGJ,gBAAM,kBAAwB,IAAI,KAAI;AACtC,0BAAgB,OAAO;AACvB,0BAAgB,QAAQ,QAAQ;AAChC,cAAI,QAAQ,aAAa;AACrB,4BAAgB,SAAS;AACzB,kBAAM,SAAiB,SAAS,QAAQ,YAAY,IAAI,SAAS,aAAa;AAC9E,4BAAgB,iBAAiB,QAAQ,KAAK;AAC9C,4BAAgB,iBAAiB,IAAM,QAAQ,KAAK;iBACjD;AACH,4BAAgB,SAAS,QAAQ;AACjC,4BAAgB,iBAAiB,GAAK,KAAK;;AAE/C,0BAAgB,WAAW,eAAe;AAG1C,cAAI,QAAQ,aAAa;AACrB,2BAAe,IAAI,KAAI;AACvB,yBAAa,OAAO;AACpB,yBAAa,oBAAoB,QAAQ;AACzC,yBAAa,aAAa;AAC1B,yBAAa,QAAQ,QAAQ;AAC7B,kBAAM,cAAsB,QAAQ,YAAY,SAAS,QAAQ;AACjE,gBAAI;AACJ,gBAAI,eAAe,GAAG;AAClB,4BAAc;mBACX;AACH,4BAAc,cAAc;;AAEhC,yBAAa,UAAU,aAAa,cAAc,cAAc,YAAY,SAAQ,IAAK;AACzF,yBAAa,MAAM,KAAK,MAAM,aAAa,IAAI,EAAE,SAAQ,IAAK;AAC9D,qBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,YAAY,SAAS,QAAQ,kBAAkB,IAAI,IAAI,GAAG,KAAK;AACjG,kBAAI,IAAI,KAAK,GAAG;AACZ,6BAAa,iBAAiB,YAAY,IAAI;qBAC3C;AACH,6BAAa,iBAAiB,YAAY,IAAI;;;AAGtD,qBAAS,IAAI,GAAG,IAAI,QAAQ,qBAAsB,IAAI,GAAG,KAAK;AAC1D,kBAAI,IAAI,KAAK,GAAG;AACZ,6BAAa,oBAAoB,YAAY,IAAI;qBAC9C;AACH,6BAAa,oBAAoB,YAAY,IAAI;;;AAGzD,4BAAgB,WAAW,cAAc,GAAG,CAAC;;AAIjD,gBAAM,cAAoB,IAAI,KAAI;AAClC,sBAAY,OAAO;AACnB,sBAAY,SAAS,QAAQ;AAC7B,gBAAM,YAAoB,SAAS,QAAQ,YAAY,IAAI,SAAS,QAAQ,YAAY;AACxF,gBAAM,kBAA4B,CAAC,WAAW,IAAM,SAAS;AAC7D,sBAAY,iBAAiB,gBAAgB,CAAC,GAAG,KAAK;AACtD,sBAAY,iBAAiB,gBAAgB,CAAC,GAAG,KAAK;AACtD,0BAAgB,WAAW,aAAa,GAAG,CAAC;AAG5C,gBAAM,SAAoB,IAAI,UAAS;AACvC,iBAAO,OAAO;AACd,iBAAO,aAAa;AACpB,iBAAO,YAAY;AACnB,sBAAY,WAAW,QAAQ,GAAG,CAAC;AAGnC,gBAAM,cAAsB,OAAO,mBAAmB,eAAe,GAAG;AACxE,sBAAY,aAAa;AACzB,gBAAM,eAAuB,OAAO,cAAc,OAAO,UAAU;AACnE,gBAAM,iBAAiB,IAAI,OAAO,IAAM,aAAa,GAAG,IAAM,aAAa,GAAG,IAAM,aAAa,CAAC;AAClG,sBAAY,QAAQ,eAAe,YAAW;AAC9C,sBAAY,WAAW,KAAK,MAAM,SAAS,QAAQ,YAAa,IAAI,GAAG;AACvE,sBAAY,UAAW,wBAAwB,QAAQ;AACvD,sBAAY,sBAAsB,QAAQ;AAC1C,sBAAY,SAAS,YAAY,QAAQ,QAAQ;AACjD,sBAAY,aAAa,OAAO;AAChC,sBAAY,YAAY;AACxB,sBAAY,uBAAuB,MAAK;UAAE;AAC1C,sBAAY,qBAAqB,MAAK;AAClC,wBAAY,aAAa,OAAO;UACpC;AACA,sBAAY,wBAAwB,MAAK;AACrC,wBAAY,QAAQ,OAAO;AAC3B,wBAAY,aAAa;UAC7B;AACA,sBAAY,sBAAsB,MAAK;AACnC,wBAAY,QAAQ,eAAe,YAAW;AAC9C,wBAAY,aAAa,OAAO;UACpC;AACA,sBAAY,yBAAyB,IAAI,MAAK;AAC1C,wBAAY,cAAc,UAAU;UACxC,CAAC;AACD,sBAAY,WAAW,aAAa,GAAG,CAAC;AAGxC,gBAAM,aAAmB,IAAI,KAAI;AACjC,qBAAW,OAAO;AAClB,qBAAW,aAAa;AACxB,gBAAM,iBAA2B,CAAC,QAAQ,MAAM;AAChD,qBAAW,iBAAiB,GAAK,KAAK;AACtC,qBAAW,oBAAoB,eAAe,CAAC,GAAG,KAAK;AACvD,qBAAW,oBAAoB,eAAe,CAAC,GAAG,KAAK;AACvD,sBAAY,WAAW,YAAY,GAAG,CAAC;AAGvC,gBAAM,aAAmB,IAAI,KAAI;AACjC,qBAAW,OAAO;AAClB,qBAAW,iBAAiB,MAAM,KAAK;AACvC,qBAAW,iBAAiB,MAAM,KAAK;AACvC,qBAAW,WAAW,YAAY,GAAG,CAAC;AAGtC,gBAAM,SAAS,IAAI,aAAW;AAC9B,iBAAO,OAAO;AACd,cAAI,QAAQ,eAAe,QAAQ,aAAa;AAC5C,mBAAO,QAAQ;iBACZ;AACH,mBAAO,SAAS;;AAEpB,iBAAO,QAAQ,OAAO,cAAc,QAAQ,SAAS;AACrD,iBAAO,sBAAsB,QAAQ;AACrC,iBAAO,oBAAoB,QAAQ;AACnC,iBAAO,wBAAwB,IAAI,MAAK;AACpC,0BAAc,OAAO;AACrB,sBAAU;AACV,yBAAa,KAAK;UACtB,CAAC;AACD,iBAAO,yBAAyB,IAAI,SAAU,OAAK;AAE/C,gBAAI,eAAe,OAAO,MAAM;AAC5B,2BAAa,OAAO,OAAO,IAAI;;UAEvC,CAAC;AACD,qBAAW,WAAW,QAAQ,GAAG,CAAC;AAGlC,gBAAM,kBAAwB,IAAI,KAAI;AACtC,0BAAgB,OAAO;AACvB,0BAAgB,sBAAsB,QAAQ;AAC9C,gBAAM,sBAAgC,CAAC,OAAO,KAAK;AACnD,0BAAgB,iBAAiB,oBAAoB,CAAC,GAAG,KAAK;AAC9D,0BAAgB,iBAAiB,oBAAoB,CAAC,GAAG,KAAK;AAC9D,qBAAW,WAAW,iBAAiB,GAAG,CAAC;AAG3C,gBAAM,wBAA8B,IAAI,KAAI;AAC5C,gCAAsB,OAAO;AAC7B,gBAAM,mBAA6B,CAAC,OAAO,KAAK;AAChD,gCAAsB,iBAAiB,GAAK,KAAK;AACjD,gCAAsB,oBAAoB,iBAAiB,CAAC,GAAG,KAAK;AACpE,gCAAsB,oBAAoB,iBAAiB,CAAC,GAAG,KAAK;AACpE,0BAAgB,WAAW,uBAAuB,GAAG,CAAC;AAGtD,gBAAM,iBAAuB,IAAI,KAAI;AACrC,yBAAe,OAAO;AACtB,gBAAM,oBAA8B,CAAC,MAAM,MAAM,MAAM,IAAI;AAC3D,yBAAe,iBAAiB,kBAAkB,CAAC,GAAG,KAAK;AAC3D,yBAAe,iBAAiB,kBAAkB,CAAC,GAAG,KAAK;AAC3D,yBAAe,iBAAiB,kBAAkB,CAAC,GAAG,KAAK;AAC3D,yBAAe,iBAAiB,kBAAkB,CAAC,GAAG,KAAK;AAC3D,gCAAsB,WAAW,gBAAgB,GAAG,CAAC;AAGrD,gBAAM,iBAAuB,IAAI,KAAI;AACrC,yBAAe,OAAO;AACtB,yBAAe,QAAQ;AACvB,yBAAe,iBAAiB,KAAK,KAAK;AAC1C,yBAAe,iBAAiB,KAAK,KAAK;AAC1C,yBAAe,WAAW,gBAAgB,GAAG,CAAC;AAE9C,gBAAM,aAAqB,KAAK,MAAM,SAAS,QAAQ,WAAW,IAAI,eAAe,CAAC,IAAI,iBAAiB,CAAC,IAAI,IAAI;AACpH,gBAAM,cAAsB,KAAK,MAAM,SAAS,QAAQ,YAAY,IAAI,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,IAAI,kBAAkB,CAAC,IAAI,GAAG;AAEhJ,cAAI;AACJ,cAAI,QAAQ,cAAc,QAAQ,cAAc;AAC5C,4BAAgB;iBACb;AACH,4BAAgB;;AAGpB,gBAAM,UAAqB,IAAI,UAAS;AACxC,kBAAQ,OAAO;AACf,kBAAQ,OAAO;AACf,kBAAQ,QAAQ;AAChB,kBAAQ,WAAW;AACnB,yBAAe,WAAW,SAAS,GAAG,CAAC;AAEvC,gBAAM,YAAY,IAAI,UAAS;AAC/B,oBAAU,OAAO;AACjB,oBAAU,aAAa,QAAQ;AAC/B,oBAAU,YAAY;AACtB,yBAAe,WAAW,WAAW,GAAG,CAAC;AAEzC,gBAAM,gBAAwB,OAAO,mBAAmB,iBAAiB,EAAE;AAC3E,wBAAc,aAAa,QAAQ;AACnC,wBAAc,YAAY;AAC1B,wBAAc,yBAAyB,IAAI,MAAK;AAC5C,kBAAM,cAAc,OAAO,cAAc,cAAc,UAAU;AACjE,yBAAa,aAAa,cAAc,IAAK;AAC7C,yBAAa,KAAK;UACtB,CAAC;AACD,wBAAc,uBAAuB,MAAK;UAAE;AAC5C,wBAAc,qBAAqB,MAAK;UAAE;AAC1C,wBAAc,wBAAwB,MAAK;UAAE;AAC7C,wBAAc,sBAAsB,MAAK;UAAE;AAC3C,yBAAe,WAAW,eAAe,GAAG,CAAC;AAE7C,gBAAM,gBAA2B,IAAI,UAAS;AAC9C,wBAAc,OAAO;AACrB,wBAAc,QAAQ;AACtB,wBAAc,YAAY;AAC1B,wBAAc,QAAQ;AACtB,wBAAc,mBAAmB;AACjC,yBAAe,WAAW,eAAe,GAAG,CAAC;AAE7C,gBAAM,cAAyB,IAAI,UAAS;AAC5C,sBAAY,OAAO;AACnB,sBAAY,OAAO;AACnB,sBAAY,QAAQ;AACpB,sBAAY,WAAW;AACvB,yBAAe,WAAW,aAAa,GAAG,CAAC;AAG3C,gBAAM,aAAmB,IAAI,KAAI;AACjC,qBAAW,OAAO;AAClB,qBAAW,SAAS;AACpB,gBAAM,iBAAyB,IAAI;AACnC,qBAAW,iBAAiB,gBAAgB,KAAK;AACjD,qBAAW,iBAAiB,gBAAgB,KAAK;AACjD,qBAAW,iBAAiB,gBAAgB,KAAK;AACjD,gCAAsB,WAAW,YAAY,GAAG,CAAC;AAGjD,gBAAM,cAAc,KAAK,MAAM,SAAS,QAAQ,WAAW,IAAI,eAAe,CAAC,IAAI,iBAAiB,CAAC,IAAI,IAAI,EAAE,SAAQ,IAAK;AAC5H,gBAAM,eACF,KAAK,MACD,SAAS,QAAQ,YAAY,IAAI,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,WAAW,WAAW,OAAO,SAAQ,CAAE,IAAI,OAAO,iBAAiB,GAAG,EACxJ,SAAQ,IAAK;AAGnB,cAAI,WAAW,WAAW,IAAI,WAAW,YAAY,GAAG;AACpD,6BAAiB,KAAK,MAAM,WAAW,YAAY,IAAI,IAAI;iBACxD;AACH,6BAAiB,KAAK,MAAM,WAAW,WAAW,IAAI,IAAI;;AAI9D,gBAAM,QAAgB,OAAO,mBAAmB,SAAS,IAAI;AAC7D,gBAAM,QAAQ;AACd,gBAAM,SAAS;AACf,gBAAM,oBAAoB,QAAQ;AAClC,gBAAM,YAAY;AAClB,gBAAM,QAAQ;AACd,gBAAM,WAAW;AACjB,gBAAM,aAAa;AACnB,gBAAM,yBAAyB,IAAI,MAAK;AACpC,kBAAM,aAAa;UACvB,CAAC;AACD,gBAAM,uBAAuB,IAAI,MAAK;AAClC,kBAAM,aAAa;UACvB,CAAC;AACD,gBAAM,uBAAuB,MAAK;AAC9B,kBAAM,aAAa;UACvB;AACA,gBAAM,qBAAqB,MAAK;AAC5B,kBAAM,aAAa;UACvB;AACA,gBAAM,yBAAyB,IAAI,MAAK;AACpC,yBAAa,KAAK;AAClB,wBAAY,UAAU,UAAU;UACpC,CAAC;AACD,qBAAW,WAAW,OAAO,GAAG,CAAC;AAEjC,gBAAM,YAAoB,OAAO,mBAAmB,aAAa,QAAQ;AACzE,oBAAU,QAAQ;AAClB,oBAAU,SAAS;AACnB,oBAAU,oBAAoB,QAAQ;AACtC,oBAAU,YAAY;AACtB,oBAAU,QAAQ;AAClB,oBAAU,WAAW;AACrB,oBAAU,aAAa;AACvB,oBAAU,yBAAyB,IAAI,MAAK;AACxC,sBAAU,aAAa;UAC3B,CAAC;AACD,oBAAU,uBAAuB,IAAI,MAAK;AACtC,sBAAU,aAAa;UAC3B,CAAC;AACD,oBAAU,uBAAuB,MAAK;AAClC,sBAAU,aAAa;UAC3B;AACA,oBAAU,qBAAqB,MAAK;AAChC,sBAAU,aAAa;UAC3B;AACA,oBAAU,yBAAyB,IAAI,MAAK;AACxC,yBAAa,KAAK;AAClB,wBAAY,cAAc,UAAU;UACxC,CAAC;AACD,qBAAW,WAAW,WAAW,GAAG,CAAC;AAErC,cAAI,QAAQ,aAAa;AACrB,sBAAU,OAAO,mBAAmB,WAAW,MAAM;AACrD,oBAAQ,QAAQ;AAChB,oBAAQ,SAAS;AACjB,oBAAQ,oBAAoB,QAAQ;AACpC,oBAAQ,YAAY;AACpB,oBAAQ,WAAW;AACnB,gBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,sBAAQ,QAAQ;AAChB,sBAAQ,aAAa;mBAClB;AACH,4BAAc,SAAS,IAAI;;AAE/B,oBAAQ,yBAAyB,IAAI,MAAK;AACtC,kBAAI,QAAQ,aAAa;AACrB,oBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,0BAAQ,aAAa;;;YAGjC,CAAC;AACD,oBAAQ,uBAAuB,IAAI,MAAK;AACpC,kBAAI,QAAQ,aAAa;AACrB,oBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,0BAAQ,aAAa;;;YAGjC,CAAC;AACD,oBAAQ,uBAAuB,MAAK;AAChC,kBAAI,QAAQ,aAAa;AACrB,oBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,0BAAQ,aAAa;;;YAGjC;AACA,oBAAQ,qBAAqB,MAAK;AAC9B,kBAAI,QAAQ,aAAa;AACrB,oBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,0BAAQ,aAAa;;;YAGjC;AACA,oBAAQ,yBAAyB,IAAI,MAAK;AACtC,kBAAI,QAAQ,aAAa;AACrB,oBAAI,QAAQ,YAAY,UAAU,GAAG;AACjC,0CAAwB,IAAI;;AAEhC,oBAAI,QAAQ,YAAY,SAAS,QAAQ,aAAc;AACnD,iCAAe,UAAU,YAAY,OAAO;;AAEhD,6BAAa,KAAK;;YAE1B,CAAC;AACD,gBAAI,QAAQ,YAAY,SAAS,GAAG;AAChC,sCAAwB,IAAI;;AAEhC,uBAAW,WAAW,SAAS,GAAG,CAAC;;AAIvC,gBAAM,oBAA0B,IAAI,KAAI;AACxC,4BAAkB,OAAO;AACzB,4BAAkB,iBAAiB,MAAM,KAAK;AAC9C,4BAAkB,iBAAiB,MAAM,KAAK;AAC9C,4BAAkB,iBAAiB,MAAM,KAAK;AAC9C,4BAAkB,iBAAiB,MAAM,KAAK;AAC9C,0BAAgB,WAAW,mBAAmB,GAAG,CAAC;AAGlD,gBAAM,eAAe,OAAO,cAAc,QAAQ,SAAS;AAC3D,gBAAM,oBAA0B,IAAI,KAAI;AACxC,4BAAkB,OAAO;AACzB,4BAAkB,QAAQ;AAC1B,4BAAkB,oBAAoB,QAAQ;AAC9C,4BAAkB,iBAAiB,IAAI,GAAG,KAAK;AAC/C,4BAAkB,iBAAiB,IAAI,GAAG,KAAK;AAC/C,4BAAkB,iBAAiB,IAAI,GAAG,KAAK;AAC/C,4BAAkB,oBAAoB,KAAK,KAAK;AAChD,4BAAkB,oBAAoB,KAAK,KAAK;AAChD,4BAAkB,oBAAoB,KAAK,KAAK;AAChD,4BAAkB,WAAW,mBAAmB,GAAG,CAAC;AAEpD,mBAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAC9C,kBAAMC,aAAuB,IAAI,UAAS;AAC1C,YAAAA,WAAU,OAAO,iBAAiB,CAAC;AACnC,YAAAA,WAAU,QAAQ;AAClB,YAAAA,WAAU,WAAW;AACrB,8BAAkB,WAAWA,YAAW,GAAG,CAAC;;AAIhD,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,QAAQ,aAAa,IAAI,KAAK,SAAQ;AAC9C,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,QAAQ,QAAQ,IAAI;AACpB,sBAAQ,OAAO;;AAEnB,sBAAU,SAAS,GAAG;AACtB,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,wBAAU,SAAS,GAAG;;UAE9B,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAE1C,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,QAAQ,aAAa,IAAI,KAAK,SAAQ;AAC9C,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,QAAQ,QAAQ,IAAI;AACpB,sBAAQ,OAAO;;AAEnB,sBAAU,SAAS,GAAG;AACtB,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,wBAAU,SAAS,GAAG;;UAE9B,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAE1C,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,QAAQ,aAAa,IAAI,KAAK,SAAQ;AAC9C,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,QAAQ,QAAQ,IAAI;AACpB,sBAAQ,OAAO;;AAEnB,sBAAU,SAAS,GAAG;AACtB,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,wBAAU,SAAS,GAAG;;UAE9B,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAE1C,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,OAAO,aAAa,EAAE,SAAQ;AACtC,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,WAAW,QAAQ,IAAI,KAAK,KAAK,QAAQ,QAAQ,IAAI;AACrD,sBAAQ,OAAO;AACf,0BAAY,SAAS,GAAG;;AAE5B,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,0BAAY,SAAS,GAAG;;UAEhC,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAE1C,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,OAAO,aAAa,EAAE,SAAQ;AACtC,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,WAAW,QAAQ,IAAI,KAAK,KAAK,QAAQ,QAAQ,IAAI;AACrD,sBAAQ,OAAO;AACf,0BAAY,SAAS,GAAG;;AAE5B,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,0BAAY,SAAS,GAAG;;UAEhC,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAE1C,gBAAM,UAAU,IAAI,UAAS;AAC7B,kBAAQ,QAAQ;AAChB,kBAAQ,SAAS;AACjB,kBAAQ,OAAO;AACf,kBAAQ,WAAW;AACnB,kBAAQ,OAAO,aAAa,EAAE,SAAQ;AACtC,kBAAQ,QAAQ;AAChB,kBAAQ,aAAa;AACrB,kBAAQ,kBAAkB,IAAI,MAAK;AAC/B,0BAAc,QAAQ;AACtB,sBAAU,QAAQ;AAClB,yBAAa,KAAK;UACtB,CAAC;AACD,kBAAQ,iBAAiB,IAAI,MAAK;AAC9B,gBAAI,WAAW,QAAQ,IAAI,KAAK,KAAK,QAAQ,QAAQ,IAAI;AACrD,sBAAQ,OAAO;AACf,0BAAY,SAAS,GAAG;;AAE5B,gBAAI,eAAe,QAAQ,MAAM;AAC7B,4BAAc;;UAEtB,CAAC;AACD,kBAAQ,wBAAwB,IAAI,MAAK;AACrC,gBAAI,eAAe,QAAQ,MAAM;AAC7B,0BAAY,SAAS,GAAG;;UAEhC,CAAC;AACD,4BAAkB,WAAW,SAAS,GAAG,CAAC;AAG1C,gBAAM,mBAAyB,IAAI,KAAI;AACvC,2BAAiB,OAAO;AACxB,2BAAiB,QAAQ;AACzB,2BAAiB,iBAAiB,GAAK,KAAK;AAC5C,2BAAiB,oBAAoB,KAAK,KAAK;AAC/C,2BAAiB,oBAAoB,KAAK,KAAK;AAC/C,4BAAkB,WAAW,kBAAkB,GAAG,CAAC;AAEnD,gBAAM,YAAuB,IAAI,UAAS;AAC1C,oBAAU,OAAO;AACjB,oBAAU,QAAQ;AAClB,oBAAU,WAAW;AACrB,2BAAiB,WAAW,WAAW,GAAG,CAAC;AAE3C,gBAAM,SAAS,IAAI,UAAS;AAC5B,iBAAO,QAAQ;AACf,iBAAO,SAAS;AAChB,iBAAO,OAAO;AACd,iBAAO,sBAAsB,QAAQ;AACrC,iBAAO,WAAW;AAClB,gBAAM,aAAa,QAAQ,UAAU,MAAM,GAAG;AAC9C,iBAAO,OAAO,WAAW,CAAC;AAC1B,iBAAO,QAAQ;AACf,iBAAO,aAAa;AACpB,iBAAO,kBAAkB,IAAI,MAAK;AAC9B,0BAAc,OAAO;AACrB,sBAAU,OAAO;AACjB,yBAAa,KAAK;UACtB,CAAC;AACD,iBAAO,iBAAiB,IAAI,MAAK;AAC7B,gBAAI,OAAO,KAAK,UAAU,GAAG;AACzB,oBAAM,MAAM,OAAO,KAAK,MAAM,EAAE;AAChC,qBAAO,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;;AAEpE,gBAAI,OAAO,QAAQ,IAAI;AACnB,qBAAO,OAAO;AACd,2BAAa,OAAO,cAAc,OAAO,IAAI,GAAG,GAAG;;AAEvD,gBAAI,eAAe,OAAO,MAAM;AAC5B,4BAAc;;UAEtB,CAAC;AACD,iBAAO,wBAAwB,IAAI,MAAK;AACpC,gBAAI,cAAsB,OAAO;AACjC,kBAAM,WAAoB,aAAa,KAAK,WAAW;AACvD,iBAAK,OAAO,KAAK,SAAS,KAAK,aAAa,eAAe,OAAO,MAAM;AACpE,qBAAO,OAAO;mBACX;AACH,kBAAI,OAAO,KAAK,SAAS,GAAG;AACxB,sBAAM,cAAsB,IAAI,OAAO,KAAK;AAC5C,yBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AAClC,gCAAc,MAAM;;;AAG5B,kBAAI,OAAO,KAAK,UAAU,GAAG;AACzB,sBAAM,MAAgB,OAAO,KAAK,MAAM,EAAE;AAC1C,8BAAc,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;;AAEpE,4BAAc,MAAM;AACpB,kBAAI,eAAe,OAAO,MAAM;AAC5B,0BAAU,OAAO;AACjB,6BAAa,OAAO,cAAc,WAAW,GAAG,OAAO,IAAI;;;UAGvE,CAAC;AACD,2BAAiB,WAAW,QAAQ,GAAG,CAAC;AAExC,cAAI,QAAQ,eAAe,QAAQ,YAAY,SAAS,GAAG;AACvD,2BAAe,IAAI,OAAQ;;AAU/B,mBAAS,aAAa,OAAe,YAAkB;AACnD,0BAAc;AACd,kBAAM,cAAsB,MAAM,YAAW;AAC7C,sBAAU,aAAa;AACvB,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG,EAAE,SAAQ;;AAErD,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG,EAAE,SAAQ;;AAErD,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG,EAAE,SAAQ;;AAErD,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,MAAM,EAAE,SAAQ;;AAEnC,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,MAAM,EAAE,SAAQ;;AAEnC,gBAAI,QAAQ,QAAQ,aAAa;AAC7B,sBAAQ,OAAO,MAAM,EAAE,SAAQ;;AAEnC,gBAAI,OAAO,QAAQ,aAAa;AAC5B,oBAAMC,cAAuB,YAAY,MAAM,GAAG;AAClD,qBAAO,OAAOA,YAAW,CAAC;;AAE9B,gBAAI,OAAO,QAAQ,aAAa;AAC5B,qBAAO,QAAQ;;UAEvB;AAGA,mBAAS,UAAU,OAAkB,SAAe;AAChD,gBAAI,WAAmB,MAAM;AAC7B,kBAAM,WAAoB,UAAU,KAAK,QAAQ;AACjD,gBAAI,UAAU;AACV,oBAAM,OAAO;AACb;mBACG;AACH,kBAAI,YAAY,IAAI;AAChB,oBAAI,KAAK,MAAM,SAAS,QAAQ,CAAC,IAAI,GAAG;AACpC,6BAAW;2BACJ,KAAK,MAAM,SAAS,QAAQ,CAAC,IAAI,KAAK;AAC7C,6BAAW;2BACJ,MAAM,SAAS,QAAQ,CAAC,GAAG;AAClC,6BAAW;;;AAGnB,kBAAI,eAAe,MAAM,MAAM;AAC3B,0BAAU;;;AAGlB,gBAAI,YAAY,IAAI;AAChB,yBAAW,SAAS,QAAQ,EAAE,SAAQ;AACtC,oBAAM,OAAO;AACb,oBAAM,eAAuB,OAAO,cAAc,UAAU,UAAU;AACtE,kBAAI,eAAe,MAAM,MAAM;AAC3B,oBAAI,WAAW,KAAK;AAChB,+BAAa,IAAI,OAAO,SAAS,QAAQ,IAAI,KAAK,aAAa,GAAG,aAAa,CAAC,GAAG,MAAM,IAAI;2BACtF,WAAW,KAAK;AACvB,+BAAa,IAAI,OAAO,aAAa,GAAG,SAAS,QAAQ,IAAI,KAAK,aAAa,CAAC,GAAG,MAAM,IAAI;uBAC1F;AACH,+BAAa,IAAI,OAAO,aAAa,GAAG,aAAa,GAAG,SAAS,QAAQ,IAAI,GAAG,GAAG,MAAM,IAAI;;;;UAI7G;AAGA,mBAAS,YAAY,OAAkB,SAAe;AAClD,gBAAI,WAAmB,MAAM;AAC7B,kBAAM,WAAoB,WAAW,KAAK,QAAQ;AAClD,gBAAI,UAAU;AACV,oBAAM,OAAO;AACb;mBACG;AACH,kBAAI,YAAY,MAAM,YAAY,OAAO,WAAW,QAAQ,KAAK,GAAG;AAChE,oBAAI,WAAW,QAAQ,IAAI,GAAK;AAC5B,6BAAW;2BACJ,WAAW,QAAQ,IAAI,GAAK;AACnC,6BAAW;2BACJ,MAAM,WAAW,QAAQ,CAAC,GAAG;AACpC,6BAAW;;;AAGnB,kBAAI,eAAe,MAAM,MAAM;AAC3B,0BAAU;;;AAGlB,gBAAI,YAAY,MAAM,YAAY,OAAO,WAAW,QAAQ,KAAK,GAAG;AAChE,yBAAW,WAAW,QAAQ,EAAE,SAAQ;AACxC,oBAAM,OAAO;mBACV;AACH,yBAAW;;AAEf,kBAAM,eAAe,OAAO,cAAc,UAAU,UAAU;AAC9D,gBAAI,eAAe,MAAM,MAAM;AAC3B,kBAAI,WAAW,KAAK;AAChB,6BAAa,IAAI,OAAO,WAAW,QAAQ,GAAG,aAAa,GAAG,aAAa,CAAC,GAAG,MAAM,IAAI;yBAClF,WAAW,KAAK;AACvB,6BAAa,IAAI,OAAO,aAAa,GAAG,WAAW,QAAQ,GAAG,aAAa,CAAC,GAAG,MAAM,IAAI;qBACtF;AACH,6BAAa,IAAI,OAAO,aAAa,GAAG,aAAa,GAAG,WAAW,QAAQ,CAAC,GAAG,MAAM,IAAI;;;UAGrG;AAGA,mBAAS,aAAa,OAAa;AAC/B,gBAAI,QAAQ,aAAa;AACrB,sBAAQ,YAAY,OAAO,OAAO,CAAC;;AAEvC,gBAAI,QAAQ,eAAe,QAAQ,YAAY,UAAU,GAAG;AACxD,sCAAwB,KAAK;AAC7B,+BAAiB;;UAEzB;AAGA,mBAAS,eAAY;AACjB,gBAAI,QAAQ,eAAe,QAAQ,YAAY,YAAY,GAAG;AAC1D,kBAAI;AACJ,kBAAI,gBAAgB;AAChB,uBAAO;qBACJ;AACH,uBAAO;;AAEX,oBAAM,SAAiB,OAAO,mBAAmB,YAAY,cAAc,IAAI;AAC/E,qBAAO,aAAa;AACpB,oBAAM,cAAsB,OAAO,cAAc,QAAQ,YAAY,YAAY,CAAC;AAClF,oBAAM,kBAA0B,YAAY,IAAI,YAAY,IAAI,YAAY;AAG5E,kBAAI,kBAAkB,gBAAgB;AAClC,uBAAO,QAAQ;qBACZ;AACH,uBAAO,QAAQ;;AAEnB,qBAAO,WAAW,KAAK,MAAM,aAAa,GAAG;AAC7C,qBAAO,UAAW,oBAAoB,QAAQ;AAC9C,qBAAO,SAAS,OAAO,QAAQ,WAAW,SAAQ,IAAK;AACvD,qBAAO,aAAa,QAAQ,YAAY,YAAY;AACpD,qBAAO,YAAY;AACnB,oBAAM,WAAW;AACjB,qBAAO,uBAAuB,MAAK;AAC/B,uBAAO,YAAY;cACvB;AACA,qBAAO,qBAAqB,MAAK;AAC7B,uBAAO,YAAY;cACvB;AACA,qBAAO,wBAAwB,MAAK;AAChC,uBAAO,YAAY;cACvB;AACA,qBAAO,sBAAsB,MAAK;AAC9B,uBAAO,YAAY;cACvB;AACA,qBAAO,yBAAyB,IAAI,MAAK;AACrC,oBAAI,CAAC,gBAAgB;AACjB,sBAAI,QAAQ,aAAa;AACrB,iCAAa,OAAO,cAAc,QAAQ,YAAY,QAAQ,CAAC,GAAG,OAAO,IAAK;;uBAE/E;AACH,+BAAa,QAAQ;AACrB,iCAAe,IAAI,OAAO;;cAElC,CAAC;AACD,qBAAO;mBACJ;AACH,qBAAO;;UAEf;AAGA,mBAAS,aAAa,MAAc;AAChC,gBAAI,SAAS,QAAW;AACpB,+BAAiB;;AAErB,gBAAI;AACJ,gBAAI,gBAAgB;AAChB,uBAAS,IAAI,GAAG,IAAI,aAAa,SAAS,QAAQ,KAAK;AACnD,6BAAa,aAAa,SAAS,CAAC;AACpC,2BAAW,UAAW,OAAO;;AAEjC,kBAAI,YAAY,QAAW;AACvB,wBAAQ,UAAW,OAAO;;mBAE3B;AACH,uBAAS,IAAI,GAAG,IAAI,aAAa,SAAS,QAAQ,KAAK;AACnD,6BAAa,aAAa,SAAS,CAAC;AACpC,2BAAW,UAAW,OAAO;;AAEjC,kBAAI,YAAY,QAAW;AACvB,wBAAQ,UAAW,OAAO;;;UAGtC;AAUA,mBAAS,eAAe,OAAe,QAAc;AACjD,gBAAI,QAAQ,aAAa;AACrB,kBAAI,SAAS,IAAI;AACb,wBAAQ,YAAY,KAAK,KAAK;;AAElC,6BAAe;AACf,2BAAa,cAAa;AAC1B,oBAAM,WAAmB,KAAK,KAAK,QAAQ,YAAY,SAAS,QAAQ,kBAAmB;AAC3F,kBAAI;AACJ,kBAAI,YAAY,GAAG;AACf,8BAAc;qBACX;AACH,8BAAc,WAAW;;AAE7B,kBAAI,aAAa,YAAY,WAAW,aAAa;AACjD,sBAAM,cAAsB,aAAa;AACzC,yBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AAClC,+BAAa,oBAAoB,CAAC;;AAEtC,yBAAS,IAAI,GAAG,IAAI,WAAW,aAAa,KAAK;AAC7C,sBAAI,IAAI,GAAG;AACP,iCAAa,iBAAiB,YAAY,IAAI;yBAC3C;AACH,iCAAa,iBAAiB,YAAY,IAAI;;;;AAI1D,2BAAa,UAAU,aAAa,WAAW,cAAc,YAAY,SAAQ,IAAK;AAEtF,uBAAS,IAAI,GAAG,UAAU,GAAG,IAAI,WAAW,aAAa,KAAK,GAAG,WAAW;AAExE,oBAAI;AACJ,oBAAI,QAAQ,YAAY,SAAS,UAAU,QAAQ,oBAAqB;AACpE,wCAAsB,QAAQ;uBAC3B;AACH,wCAAsB,QAAQ,YAAY,UAAU,UAAU,KAAK,QAAQ;;AAE/E,sBAAM,mBAA2B,KAAK,IAAI,KAAK,IAAI,qBAAqB,CAAC,GAAG,QAAQ,kBAAmB;AACvG,yBAAS,IAAI,GAAG,IAAI,GAAG,IAAI,kBAAkB,KAAK;AAC9C,sBAAI,IAAI,QAAQ,oBAAqB;AACjC;;AAEJ,wBAAM,SAAwB,aAAY;AAC1C,sBAAI,UAAU,MAAM;AAChB,iCAAa,WAAW,QAAQ,GAAG,CAAC;AACpC,yBAAK;AACL;yBACG;AACH;;;;AAIZ,kBAAI,QAAQ,YAAY,UAAU,QAAQ,aAAc;AACpD,8BAAc,QAAQ,IAAI;qBACvB;AACH,8BAAc,QAAQ,KAAK;;;UAGvC;AAGA,mBAAS,wBAAwB,cAAqB;AAClD,gBAAI,cAAc;AACd,wBAAU,OAAO,mBAAmB,WAAW,MAAM;AACrD,sBAAQ,QAAQ;AAChB,sBAAQ,SAAS;AACjB,sBAAQ,OAAO,KAAK,MAAM,SAAS,WAAW,IAAI,GAAG,EAAE,SAAQ,IAAK;AACpE,sBAAQ,OAAO,WAAW,QAAQ,IAAI,IAAI,IAAI,SAAQ,IAAK;AAC3D,sBAAQ,oBAAoB,QAAQ;AACpC,sBAAQ,sBAAsB,QAAQ;AACtC,sBAAQ,YAAY;AACpB,sBAAQ,QAAQ;AAChB,sBAAQ,WAAW;AACnB,sBAAQ,aAAa;AACrB,sBAAQ,yBAAyB,IAAI,MAAK;AACtC,wBAAQ,aAAa;cACzB,CAAC;AACD,sBAAQ,uBAAuB,IAAI,MAAK;AACpC,wBAAQ,aAAa;cACzB,CAAC;AACD,sBAAQ,uBAAuB,MAAK;AAChC,wBAAQ,aAAa;cACzB;AACA,sBAAQ,qBAAqB,MAAK;AAC9B,wBAAQ,aAAa;cACzB;AACA,sBAAQ,yBAAyB,IAAI,MAAK;AACtC,oBAAI,gBAAgB;AAChB,mCAAiB;uBACd;AACH,mCAAiB;;AAErB,6BAAY;cAChB,CAAC;AACD,yBAAW,WAAW,SAAS,GAAG,CAAC;mBAChC;AACH,yBAAW,cAAc,OAAO;;UAExC;AAGA,mBAAS,cAAc,QAAgB,UAAiB;AACpD,gBAAI,UAAU;AACV,qBAAO,QAAQ;AACf,qBAAO,aAAa;mBACjB;AACH,qBAAO,QAAQ;AACf,qBAAO,aAAa;;UAE5B;AAGA,mBAAS,YAAY,OAAa;AAC9B,gBAAI,QAAQ,eAAe,QAAQ,YAAY,SAAS,GAAG;AACvD,sBAAQ;gBACJ,aAAa,QAAQ;gBACrB,aAAa;eAChB;mBACE;AACH,sBAAQ;gBACJ,aAAa;eAChB;;AAEL,4BAAgB,cAAc,eAAe;UACjD;QACJ,CAAC;MACL;;AAz9Ce,gBAAA,WAAW;AA0B1B,eAAA;MADC,UAAS;;AAoDV,eAAA;MADC,UAAS;;AAyBV,eAAA;MADC,UAAS;;AAuBV,eAAA;MADC,UAAS;;AAi2Cd,kBAAc,2BAA2B,WAAW;;;;;ICv+CvC;;;;AARb;AACA;AAEA;AACA;AAIM,IAAO,UAAP,cAAuB,UAAS;;MAKlC,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AArBX,aAAA,aAAa;MAuBrB;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,WAAW,SAAgC;AACjD,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,gBAAQ,YACJ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,GACzD,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS,GACzD,KAAK,gBAAgB,QAAQ,IAAI,KAAK,aAAa,GACnD,KAAK,gBAAgB,SAAS,IAAI,KAAK,aAAa,GACpD,OAAO;AAGX,YAAI,KAAK,uBAAuB,KAAK,aAAa;AAC9C,kBAAQ,YAAY,KAAK,oBAAoB,OAAO;AAEpD,kBAAQ,KAAI;;AAGhB,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAG5B,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,OAAO;AACZ,oBAAQ,cAAc,KAAK;;AAE/B,kBAAQ,YAAY,KAAK;AAEzB,kBAAQ,OAAM;;AAGlB,gBAAQ,QAAO;MACnB;MAEU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,oBAAoB,SAAS,IAAI,KAAK;AAC3C,aAAK,oBAAoB,UAAU,IAAI,KAAK;AAC5C,aAAK,oBAAoB,QAAQ,KAAK;AACtC,aAAK,oBAAoB,OAAO,KAAK;MACzC;MAEU,iBAAiB,SAAgC;AACvD,gBAAQ,YACJ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,GACzD,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS,GACzD,KAAK,gBAAgB,QAAQ,GAC7B,KAAK,gBAAgB,SAAS,GAC9B,OAAO;AAGX,gBAAQ,KAAI;MAChB;MAEO,yBAAyB,SAAgC;AAC5D,gBAAQ,YACJ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,GACzD,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS,GACzD,KAAK,gBAAgB,QAAQ,IAAI,KAAK,sBAAsB,GAC5D,KAAK,gBAAgB,SAAS,IAAI,KAAK,sBAAsB,GAC7D,OAAO;AAEX,gBAAQ,OAAM;MAClB;;AAjGA,eAAA;MADC,UAAS;;AAoGd,kBAAc,uBAAuB,OAAO;;;;;AC7G5C,IAYa;AAZb;;;AAEA;AAGA;AAOM,IAAO,kBAAP,cAA+B,OAAM;MAavC,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAXZ,aAAA,eAAiC;AAChC,aAAA,aAAa;AACb,aAAA,kBAAoC;AAGrC,aAAA,oBAAoB,IAAI,WAAU;AAElC,aAAA,mBAAmB,IAAI,WAAU;AAEjC,aAAA,qCAAqC,IAAI,WAAU;AAKtD,aAAK,kBAAkB,KAAK;MAChC;;MAGO,SAAM;AACT,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa;AAClB,cAAI,KAAK,gBAAgB,KAAK,mBAAmB,MAAM;AAEnD,iBAAK,QAAQ,KAAK;;AAEtB,eAAK,iBAAiB,gBAAgB,IAAI;;MAElD;;MAGO,UAAO;AACV,aAAK,aAAa;AAElB,YAAI,KAAK,cAAc;AAEnB,eAAK,kBAAkB,KAAK;AAC5B,eAAK,QAAQ,KAAK;;AAEtB,aAAK,kBAAkB,gBAAgB,IAAI;MAC/C;;;;;MAMO,iBAAc;AACjB,eAAO;MACX;;;;MAKO,QAAK;AACR,aAAK,MAAM,mBAAmB,IAAI;MACtC;;;;MAKO,OAAI;AACP,aAAK,MAAM,iBAAiB;MAChC;;;;;MAMO,gBAAgB,KAAmB;AACtC,aAAK,mCAAmC,gBAAgB,KAAK,IAAI,IAAI;MACzE;;;;MAKO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,KAAK,YAAY;AAElB,eAAK,MAAK;;AAGd,eAAO,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE;MAC/E;;MAGO,WAAQ;AACX,cAAM,QAAO;AAEb,aAAK,iBAAiB,MAAK;AAC3B,aAAK,kBAAkB,MAAK;AAC5B,aAAK,mCAAmC,MAAK;MACjD;;AAEJ,kBAAc,+BAA+B,eAAe;;;;;AC7G5D;AAAA;AAAA;AAAA;;;ICmBa;;;;AAlBb;AAGA;AACA;AAEA;AAEA;AAKA;AAKM,IAAO,gBAAP,cAA6B,UAAS;;;;MAqCxC,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAEJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAEJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAc;AACvC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;MAEA,IAAW,OAAO,OAAsB;AACpC,aAAK,0BAA0B;AAE/B,YAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,MAAM,OAAO;AAC7C;;AAGJ,YAAI,KAAK,QAAQ,WAAW,KAAK,GAAG;AAChC,eAAK,aAAY;;AAGrB,aAAK,qBAAqB;MAC9B;MAGA,IAAW,YAAS;AAChB,eAAO,KAAK,WAAW,SAAS,KAAK,KAAK;MAC9C;;MAGA,IAAW,oBAAiB;AACxB,eAAO,KAAK,WAAW,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;MACvF;MAEA,IAAW,UAAU,OAAsB;AACvC,YAAI,KAAK,WAAW,SAAS,KAAK,KAAK,MAAM,OAAO;AAChD;;AAGJ,YAAI,KAAK,WAAW,WAAW,KAAK,GAAG;AACnC,eAAK,aAAY;;MAEzB;;;;;;MAOA,YAAmBC,OAAe,OAAe,IAAE;AAC/C,cAAMA,KAAI;AADK,aAAA,OAAAA;AA3HX,aAAA,2BAA2B,QAAQ;AACnC,aAAA,yBAAyB,QAAQ;AAGjC,aAAA,eAA6B,IAAI,aAAa,CAAC;AAC/C,aAAA,gBAAwB;AACxB,aAAA,gBAAwB;AACxB,aAAA,aAAa,IAAI,aAAa,GAAG,aAAa,qBAAqB,KAAK;AAWzE,aAAA,yBAAyB,IAAI,WAAU;AA4G1C,aAAK,OAAO;AAEZ,aAAK,mBAAmB;AAExB,aAAK,uBAAuB,IAAI,MAAM,KAAK,sBAAqB,CAAE;AAElE,aAAK,uBAAuB;UACxB,mBAAmB;UACnB,2BAA2B;UAC3B,kBAAkB;;AAGtB,aAAK,cAAc;UACf,kBAAkB;UAClB,gBAAgB;UAChB,kBAAkB;UAClB,oBAAoB;UACpB,kBAAkB;;MAE1B;MAEU,eAAY;AAClB,eAAO;MACX;;;;;MAMO,gBAAgB,KAAmB;AAEtC,aAAK,sBAAsB,IAAI,MAAM,IAAI,KAAK,GAAG;AAEjD,aAAK,mCAAmC,gBAAgB,GAAG;MAC/D;;;;;;;;;MAUO,sBAAsB,MAAc,KAAc,KAAoB;AAEzE,YAAI,QAAQ,IAAI,WAAW,IAAI,aAAa,SAAS,UAAU,SAAS,UAAU,SAAS,SAAS;AAChG;;AAIJ,gBAAQ,MAAM;UACV,KAAK;AACD,gBAAI,QAAQ,IAAI,WAAW,IAAI,UAAU;AACrC,mBAAK,eAAc;AACnB,kBAAI,eAAc;AAClB;;AAEJ;UACJ,KAAK;AACD,gBAAI,OAAO,IAAI,UAAU;AACrB,kBAAI,eAAc;;AAEtB;UACJ,KAAK;AACD,gBAAI,CAAC,KAAK,sBAAsB,KAAK,YAAY,mBAAmB,GAAG;AACnE,mBAAK,YAAY,iBAAiB,KAAK,YAAY;AACnD,mBAAK,YAAY;;AAGrB,iBAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,cAAc;AAE/F,iBAAK,YAAY,iBAAiB,KAAK,YAAY;AAEnD,gBAAI,KAAK;AACL,kBAAI,eAAc;;AAGtB,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAE1B,iBAAK,gBAAe;AACpB;UACJ,KAAK;AACD,gBAAI,CAAC,KAAK,sBAAsB,KAAK,YAAY,iBAAiB,KAAK,KAAK,QAAQ;AAChF,mBAAK,YAAY,iBAAiB,KAAK,YAAY,mBAAmB;;AAG1E,iBAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,cAAc;AAE/F,iBAAK,YAAY,iBAAiB,KAAK,YAAY;AAEnD,gBAAI,KAAK;AACL,kBAAI,eAAc;;AAGtB,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAE1B,iBAAK,gBAAe;AACpB;UACJ,KAAK;AACD,iBAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,gBAAgB,IAAI;AACrG,iBAAK,YAAY;AACjB,iBAAK,YAAY,iBAAiB,KAAK,YAAY;AAEnD,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAE1B,iBAAK,gBAAe;AACpB;UACJ,KAAK;AACD,iBAAK,YAAY,mBAAmB,KAAK,KAAK;AAC9C,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAC1B,iBAAK,aAAY;AACjB;UACJ,KAAK;AACD,iBAAK,YAAY,mBAAmB;AACpC,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAC1B,iBAAK,aAAY;AACjB;UACJ,KAAK;AACD,iBAAK,aAAY;AAEjB,gBAAI,OAAO,IAAI,UAAU;AAErB,kBAAI,IAAI,WAAW,IAAI,SAAS;AAE5B,qBAAK,YAAY,oBAAoB,KAAK,YAAY;AACtD,qBAAK,YAAY,iBAAiB,KAAK,qBAAqB;;AAGhE,kBAAI,CAAC,KAAK,oBAAoB;AAC1B,qBAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,qBAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAC/D,qBAAK,qBAAqB,4BAA4B,KAAK,YAAY;AAEvE,qBAAK,YAAY,iBAAiB,KAAK,YAAY;AACnD,qBAAK,YAAY;AACjB,qBAAK,qBAAqB;qBACvB;AACH,oBAAI,KAAK,YAAY,iBAAiB,KAAK,qBAAqB,mBAAmB;AAC/E,uBAAK,YAAY;uBACd;AACH,uBAAK,YAAY;;;AAGzB,mBAAK,eAAe;AACpB,kBAAI,eAAc;AAClB;;AAGJ,gBAAI,KAAK,oBAAoB;AACzB,mBAAK,YAAY,iBAAiB,KAAK,YAAY;uBAC5C,QAAQ,IAAI,WAAW,IAAI,UAAU;AAE5C,mBAAK,YAAY,oBAAoB,KAAK,YAAY;AACtD,kBAAI,eAAc;uBACX,KAAK,YAAY,mBAAmB,GAAG;AAC9C,mBAAK,YAAY;;AAIrB,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAC1B;UACJ,KAAK;AACD,iBAAK,aAAY;AAEjB,gBAAI,OAAO,IAAI,UAAU;AAErB,kBAAI,IAAI,WAAW,IAAI,SAAS;AAC5B,sBAAM,aAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,YAAY,mBAAmB;AACpH,qBAAK,YAAY,kBAAkB;AACnC,qBAAK,YAAY,mBAAmB,KAAK,qBAAqB;;AAGlE,kBAAI,CAAC,KAAK,oBAAoB;AAC1B,qBAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,qBAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAC/D,qBAAK,qBAAqB,4BAA4B,KAAK,YAAY;AAEvE,qBAAK,YAAY,iBAAiB,KAAK,YAAY;AACnD,qBAAK,YAAY;AACjB,qBAAK,qBAAqB;qBACvB;AACH,oBAAI,KAAK,YAAY,mBAAmB,KAAK,qBAAqB,mBAAmB;AACjF,uBAAK,YAAY;uBACd;AACH,uBAAK,YAAY;;;AAGzB,mBAAK,eAAe;AACpB,kBAAI,eAAc;AAClB;;AAEJ,gBAAI,KAAK,oBAAoB;AACzB,mBAAK,YAAY,mBAAmB,KAAK,YAAY;uBAC9C,QAAQ,IAAI,WAAW,IAAI,UAAU;AAE5C,oBAAM,aAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,YAAY;AACjG,mBAAK,YAAY,oBAAoB;uBAC9B,KAAK,YAAY,mBAAmB,KAAK,KAAK,QAAQ;AAC7D,mBAAK,YAAY;;AAIrB,iBAAK,eAAe;AACpB,iBAAK,qBAAqB;AAC1B;UACJ,KAAK;AAED,iBAAK,eAAe;AAEpB,gBAAI,KAAK;AACL,kBAAI,IAAI,UAAU;AACd,oBAAI,CAAC,KAAK,oBAAoB;AAC1B,uBAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,uBAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAC/D,uBAAK,qBAAqB,4BAA4B,KAAK,YAAY;;AAE3E,qBAAK,qBAAqB;AAC1B,qBAAK,eAAe;qBACjB;AACH,qBAAK,qBAAqB;;AAE9B,kBAAI,eAAc;;AAGtB,gBAAI,KAAK,YAAY,qBAAqB,GAAG;AAEzC,mBAAK,YAAY,mBAAmB;mBACjC;AACH,oBAAM,cAAc,KAAK,OAAO,KAAK,YAAY,gBAAgB;AACjE,oBAAM,YAAY,KAAK,OAAO,KAAK,YAAY,mBAAmB,CAAC;AAEnE,kBAAI,WAAW;AACf,kBAAI,gBAAgB;AACpB,kBAAI,CAAC,KAAK,sBAAsB,KAAK,YAAY,mBAAmB,KAAK,qBAAqB,kBAAkB;AAC5G,2BAAW,KAAK,YAAY;AAC5B,gCAAgB,KAAK,YAAY;qBAC9B;AACH,2BAAW,KAAK,YAAY;AAC5B,gCAAgB,KAAK,YAAY;;AAGrC,oBAAM,cAAc,YAAY,KAAK,OAAO,GAAG,aAAa;AAC5D,oBAAM,eAAe,KAAK,sBAAsB,YAAY,WAAW,EAAE;AAEzE,kBAAI,aAAa;AACjB,kBAAI,gBAAgB;AAEpB,0BAAY;AACZ,0BAAY,UAAU,KAAK,SAAS,UAAU,WAAW;AACzD,kBAAI,yBAAyB;AAE7B,qBAAO,aAAa,gBAAgB,yBAAyB,UAAU,KAAK,QAAQ;AAChF;AACA;AACA,gCAAgB,KAAK,IAAI,eAAe,UAAU;AAClD,6BAAa,KAAK,sBAAsB,YAAY,UAAU,KAAK,OAAO,GAAG,sBAAsB,CAAC,EAAE;;AAI1G,kBAAI,KAAK,IAAI,eAAe,UAAU,IAAI,iBAAiB,yBAAyB,GAAG;AACnF;;AAGJ,kBAAI,CAAC,KAAK,oBAAoB;AAC1B,qBAAK,YAAY,mBAAmB;yBAC7B,KAAK,YAAY,oBAAoB,KAAK,qBAAqB,kBAAkB;AACxF,qBAAK,YAAY,mBAAmB;AACpC,qBAAK,YAAY,iBAAiB,KAAK,qBAAqB;AAC5D,qBAAK,YAAY,mBAAmB,KAAK,qBAAqB;qBAC3D;AACH,qBAAK,YAAY,iBAAiB;;;AAI1C,iBAAK,aAAY;AACjB;UACJ,KAAK;AAED,iBAAK,eAAe;AAEpB,gBAAI,KAAK;AACL,kBAAI,IAAI,UAAU;AACd,oBAAI,CAAC,KAAK,oBAAoB;AAC1B,uBAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,uBAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAC/D,uBAAK,qBAAqB,4BAA4B,KAAK,YAAY;;AAG3E,qBAAK,qBAAqB;AAC1B,qBAAK,eAAe;qBACjB;AACH,qBAAK,qBAAqB;;AAE9B,kBAAI,eAAc;;AAGtB,gBAAI,KAAK,YAAY,qBAAqB,KAAK,OAAO,SAAS,GAAG;AAE9D,mBAAK,YAAY,mBAAmB,KAAK,KAAK;mBAC3C;AACH,oBAAM,cAAc,KAAK,OAAO,KAAK,YAAY,gBAAgB;AACjE,oBAAM,YAAY,KAAK,OAAO,KAAK,YAAY,mBAAmB,CAAC;AAEnE,kBAAI,WAAW;AACf,kBAAI,gBAAgB;AACpB,kBAAI,CAAC,KAAK,sBAAsB,KAAK,YAAY,mBAAmB,KAAK,qBAAqB,kBAAkB;AAC5G,2BAAW,KAAK,YAAY;AAC5B,gCAAgB,KAAK,YAAY;qBAC9B;AACH,2BAAW,KAAK,YAAY;AAC5B,gCAAgB,KAAK,YAAY;;AAGrC,oBAAM,cAAc,YAAY,KAAK,OAAO,GAAG,aAAa;AAC5D,oBAAM,eAAe,KAAK,sBAAsB,YAAY,WAAW,EAAE;AAEzE,kBAAI,aAAa;AACjB,kBAAI,gBAAgB;AAEpB,0BAAY,YAAY,KAAK,SAAS,gBAAgB,YAAY,WAAW;AAC7E,kBAAI,yBAAyB;AAE7B,qBAAO,aAAa,gBAAgB,yBAAyB,UAAU,KAAK,QAAQ;AAChF;AACA;AACA,gCAAgB,KAAK,IAAI,eAAe,UAAU;AAClD,6BAAa,KAAK,sBAAsB,YAAY,UAAU,KAAK,OAAO,GAAG,sBAAsB,CAAC,EAAE;;AAI1G,kBAAI,KAAK,IAAI,eAAe,UAAU,IAAI,iBAAiB,yBAAyB,GAAG;AACnF;;AAGJ,kBAAI,CAAC,KAAK,oBAAoB;AAC1B,qBAAK,YAAY,mBAAmB;yBAC7B,KAAK,YAAY,mBAAmB,KAAK,qBAAqB,kBAAkB;AACvF,qBAAK,YAAY,mBAAmB;AACpC,oBAAI,KAAK,YAAY,mBAAmB,KAAK,YAAY,gBAAgB;AACrE,uBAAK,YAAY,kBAAkB,KAAK,YAAY;AACpD,uBAAK,YAAY,mBAAmB,KAAK,YAAY,iBAAiB,KAAK,YAAY;AACvF,uBAAK,YAAY,kBAAkB,KAAK,YAAY;;qBAErD;AACH,qBAAK,YAAY,iBAAiB;AAClC,qBAAK,YAAY,mBAAmB,KAAK,qBAAqB;;;AAItE,iBAAK,aAAY;AACjB;;AAIR,aAAI,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,YAAW,GAAG;AACnB,kBAAG,QAAH,QAAG,SAAA,SAAH,IAAK,eAAc;AACnB,eAAK,cAAc;AACnB,eAAK,yBAAyB,gBAAgB,IAAI;AAClD,gBAAM,KAAK;AACX,cAAI,KAAK,SAAS;AACd,iBAAK,qBAAqB;AAC1B,iBAAK,eAAe;AAEpB,iBAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,gBAAgB,GAAG;AACpG,iBAAK,YAAY,oBAAoB,IAAI;AACzC,iBAAK,YAAY,iBAAiB,KAAK,YAAY;AAEnD,iBAAK,gBAAe;;;MAGhC;MAEU,mBAAmB,OAAe,IAAI,OAAe,SAAgC;AAC3F,cAAM,QAAQ,CAAA;AACd,cAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,YAAI,YAAY;AAEhB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAM,WAAW,IAAI,IAAI,OAAO,MAAM,MAAM,CAAC,IAAI,MAAM,CAAC;AACxD,gBAAM,UAAU,QAAQ,YAAY,QAAQ;AAC5C,gBAAM,YAAY,QAAQ;AAC1B,cAAI,YAAY,OAAO;AACnB,gBAAI,IAAI,GAAG;AAEP,0BAAY,QAAQ,YAAY,IAAI,EAAE;AACtC,oBAAM,KAAK,EAAE,MAAM,MAAM,OAAO,WAAW,YAAY,IAAG,CAAE;;AAGhE,mBAAO,MAAM,CAAC;AAEd,gBAAI,cAAc;AAElB,iBAAK,MAAM,EAAE,EAAE,IAAI,CAAC,SAAQ;AACxB,kBAAI,QAAQ,YAAY,cAAc,IAAI,EAAE,QAAQ,OAAO;AACvD,sBAAM,KAAK,EAAE,MAAM,aAAa,OAAO,QAAQ,YAAY,WAAW,EAAE,OAAO,YAAY,KAAI,CAAE;AACjG,8BAAc;;AAElB,6BAAe;YACnB,CAAC;AAED,mBAAO;AAEP,wBAAY,QAAQ,YAAY,IAAI,EAAE;iBACnC;AACH,wBAAY;AACZ,mBAAO;;;AAGf,cAAM,KAAK,EAAE,MAAM,MAAM,OAAO,WAAW,YAAY,IAAG,CAAE;AAE5D,eAAO;MACX;MAEU,YAAY,UAAkB,SAAgC;AACpE,cAAM,QAA+D,CAAA;AACrE,cAAM,SAAS,KAAK,KAAK,MAAM,IAAI;AAEnC,YAAI,KAAK,aAAa;AAClB,qBAAW,SAAS,QAAQ;AACxB,kBAAM,KAAK,GAAG,KAAK,mBAAmB,OAAO,UAAU,OAAO,CAAC;;eAEhE;AACH,qBAAW,SAAS,QAAQ;AACxB,kBAAM,KAAK,KAAK,WAAW,OAAO,OAAO,CAAC;;;AAIlD,cAAM,MAAM,SAAS,CAAC,EAAE,aAAa;AAErC,eAAO;MACX;MAEU,WAAW,OAAe,IAAI,SAAgC;AACpE,eAAO,EAAE,MAAM,MAAM,OAAO,QAAQ,YAAY,IAAI,EAAE,OAAO,YAAY,IAAG;MAChF;;;;;;;;MASU,YAAY,eAAwB,SAAgC;AAC1E,YAAI,CAAC,KAAK,eAAe,KAAK,WAAW;AACrC,eAAK,cAAc,QAAQ,eAAe,QAAQ,IAAI;;AAG1D,YAAI,OAAO,KAAK,kBAAkB,KAAK,YAAY,EAAE;AAGrD,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,QAAQ,KAAK,kBAAkB;AACzD,iBAAO,KAAK;AAEZ,cAAI,KAAK,mBAAmB;AACxB,oBAAQ,YAAY,KAAK;;;AAKjC,aAAK,aAAa,QAAQ,YAAY,IAAI,EAAE;AAE5C,cAAM,cAAc,KAAK,QAAQ,gBAAgB,KAAK,OAAO,cAAc,KAAK,IAAI;AAEpF,YAAI,KAAK,mBAAmB;AACxB,gBAAM,WAAW,KAAK,MAAM,IAAI;AAChC,gBAAM,eAAe,SAAS,OAAO,CAAC,KAAa,QAAe;AAC9D,kBAAM,cAAc,QAAQ,YAAY,GAAG,EAAE;AAC7C,kBAAM,YAAY,QAAQ,YAAY,GAAG,EAAE;AAC3C,mBAAO,cAAc,YAAY,MAAM;UAC3C,GAAG,EAAE;AAEL,gBAAM,oBAAoB,QAAQ,YAAY,YAAY,EAAE;AAC5D,eAAK,QAAQ,KAAK,IAAI,KAAK,UAAU,gBAAgB,KAAK,OAAO,cAAc,KAAK,GAAG,oBAAoB,WAAW,IAAI;AAE1H,eAAK,mBAAmB;;AAG5B,aAAK,kBAAkB,KAAK,OAAO,gBAAgB,KAAK,OAAO,cAAc,KAAK,IAAI;AAGtF,aAAK,SAAS,KAAK,YAAY,KAAK,iBAAiB,OAAO;AAE5D,aAAK,wBAAwB;AAE7B,YAAI,KAAK,oBAAoB;AACzB,gBAAM,aAAa,KAAK,OAAO,SAAS,KAAK,YAAY;AACzD,gBAAM,cAAc,aAAa,KAAK,QAAQ,gBAAgB,KAAK,OAAO,cAAc,MAAM,IAAI;AAClG,eAAK,SAAS,KAAK,IAAI,KAAK,WAAW,gBAAgB,KAAK,OAAO,cAAc,MAAM,GAAG,WAAW,IAAI;AAEzG,eAAK,qBAAqB;;AAG9B,aAAK,mBAAmB,KAAK,QAAQ,gBAAgB,KAAK,OAAO,cAAc,MAAM,IAAI;AAEzF,YAAI,KAAK,YAAY;AACjB,eAAK,YAAY,mBAAmB;AAEpC,cAAI,aAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,WAAW;AACxI,cAAI,YAAY;AAEhB,iBAAO,YAAY,cAAc,KAAK,YAAY,kBAAkB;AAChE,yBAAa;AAEb,gBAAI,KAAK,YAAY,mBAAmB,KAAK,OAAO,SAAS,GAAG;AAC5D,mBAAK,YAAY;AACjB,2BAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,WAAW;;;;MAIpJ;MAEQ,iBAAc;AAClB,aAAK,gBAAgB,KAAK,gBAAgB,OAAO,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;AACzH,aAAK,eAAe,KAAK,gBAAgB,MAAM,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;AAExH,YAAI,KAAK,cAAc,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,QAAQ,KAAK,iBAAiB;AAChG,gBAAM,WAAW,KAAK,gBAAgB,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,QAAQ,KAAK;AAElG,cAAI,CAAC,KAAK,aAAa;AACnB,iBAAK,cAAc;;eAEpB;AACH,eAAK,cAAc,KAAK;;AAG5B,YAAI,KAAK,cAAc,CAAC,KAAK,oBAAoB;AAC7C,gBAAM,kBAAkB,KAAK,YAAY,mBAAmB,KAAK,KAAK,YAAY;AAClF,gBAAM,UAAU,KAAK,eAAe;AAEpC,cAAI,CAAC,KAAK,YAAY;AAClB,iBAAK,aAAa;;eAEnB;AACH,eAAK,aAAa,KAAK;;MAE/B;;;;;;MAOU,wBAAqB;AAE3B,aAAK,kBAAkB;AAEvB,aAAK,uBAAuB,gBAAgB,IAAI;MACpD;MAEQ,UAAU,MAAc,WAAmB,GAAW,SAAgC;AAC1F,cAAM,QAAQ,KAAK,gBAAgB;AACnC,YAAI,IAAI,KAAK;AACb,gBAAQ,KAAK,0BAA0B;UACnC,KAAK,QAAQ;AACT,iBAAK;AACL;UACJ,KAAK,QAAQ;AACT,iBAAK,QAAQ;AACb;UACJ,KAAK,QAAQ;AACT,kBAAM,QAAQ,aAAa;AAC3B;;AAGR,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,YAAI,KAAK,cAAc;AACnB,kBAAQ,WAAW,MAAM,KAAK,gBAAgB,OAAO,GAAG,CAAC;;AAE7D,gBAAQ,SAAS,MAAM,GAAG,CAAC;MAC/B;;;;;;;MAQU,YAAY,IAAkB;AACpC,aAAK,qBAAqB;AAE1B,YAAI;AACA,aAAG,iBAAiB,GAAG,cAAc,QAAQ,cAAc,KAAK,gBAAgB;iBAClF,IAAM;QAAA;AACR,aAAK,MAAM,gBAAgB,KAAK;MACpC;;;;;;;MAQU,WAAW,IAAkB;AACnC,YAAI,CAAC,KAAK,kBAAkB;AACxB;;AAGJ,YAAI;AACA,aAAG,iBAAiB,GAAG,cAAc,QAAQ,cAAc,KAAK,gBAAgB;iBAClF,IAAM;QAAA;AAER,aAAK,MAAM,gBAAgB,KAAK;AAEhC,aAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,cAAc;AAE/F,aAAK,gBAAe;MACxB;;;;;;;MAQU,aAAa,IAAkB;AACrC,YAAI,OAAe;AACnB,YAAI,GAAG,iBAAiB,GAAG,cAAc,MAAM,QAAQ,YAAY,MAAM,IAAI;AACzE,iBAAO,GAAG,cAAc,QAAQ,YAAY;eACzC;AAEH,iBAAO,KAAK,MAAM;;AAGtB,aAAK,qBAAqB;AAE1B,aAAK,aAAa,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,gBAAgB,IAAI;AAErG,cAAM,aAAa,KAAK,UAAU,KAAK,YAAY,iBAAiB,KAAK,YAAY;AAErF,aAAK,YAAY,oBAAoB;AACrC,aAAK,YAAY,iBAAiB,KAAK,YAAY;AAEnD,aAAK,gBAAe;MACxB;MAEO,MAAM,SAAgC;;AACzC,aAAK,eAAc;AAEnB,aAAK,eAAc,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI;AACvC,aAAK,cAAa,KAAA,KAAK,gBAAU,QAAA,OAAA,SAAA,KAAI;AAErC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAIjC,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,oBAAoB;AACzB,oBAAQ,YAAY,KAAK,aAAa,KAAK,qBAAqB,KAAK;AAErE,oBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;mBAE1H,KAAK,aAAa;AACzB,kBAAQ,YAAY,KAAK,aAAa,KAAK,cAAc,KAAK;AAE9D,kBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;AAGjI,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAI5B,YAAI,KAAK,OAAO;AACZ,kBAAQ,YAAY,KAAK;;AAG7B,cAAM,SAAS,KAAK,gBAAgB;AACpC,cAAM,QAAQ,KAAK,gBAAgB;AACnC,YAAI,QAAQ;AAEZ,gBAAQ,KAAK,wBAAwB;UACjC,KAAK,QAAQ;AACT,oBAAQ,KAAK,YAAY;AACzB;UACJ,KAAK,QAAQ;AACT,oBAAQ,SAAS,KAAK,YAAY,UAAU,KAAK,OAAO,SAAS,KAAK,KAAK,YAAY;AACvF;UACJ,KAAK,QAAQ;AACT,oBAAQ,KAAK,YAAY,UAAU,SAAS,KAAK,YAAY,SAAS,KAAK,OAAO,UAAU;AAC5F;;AAGR,gBAAQ,KAAI;AACZ,gBAAQ,UAAS;AACjB,gBAAQ,YAAY,KAAK;AAGzB,gBAAQ,KAAK,KAAK,eAAe,KAAK,cAAc,KAAK,kBAAkB,GAAG,KAAK,mBAAmB,CAAC;AACvG,gBAAQ,KAAI;AAGZ,iBAAS,KAAK;AAEd,iBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,gBAAM,OAAO,KAAK,OAAO,CAAC;AAE1B,cAAI,MAAM,KAAK,KAAK,aAAa,kBAAkB,GAAG;AAClD,gBAAI,KAAK,aAAa,SAAS;AAC3B,uBAAS,KAAK,aAAa,SAAS,KAAK,KAAK;mBAC3C;AACH,sBAAQ,QAAQ,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI,KAAK,QAAQ,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,MAAM;;;AAI1I,eAAK,UAAU,KAAK,MAAM,KAAK,OAAO,OAAO,OAAO;AACpD,mBAAS,KAAK,YAAY;;AAG9B,gBAAQ,QAAO;AAGf,YAAI,KAAK,YAAY;AAEjB,cAAI,CAAC,KAAK,gBAAgB,KAAK,oBAAoB;AAC/C,gBAAI,aAAa,KAAK,cAAc,QAAQ,YAAY,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,OAAO,GAAG,KAAK,YAAY,kBAAkB,CAAC,EAAE;AAE5J,gBAAI,aAAa,KAAK,eAAe;AACjC,mBAAK,eAAe,KAAK,gBAAgB;AACzC,2BAAa,KAAK;AAClB,mBAAK,aAAY;uBACV,aAAa,KAAK,gBAAgB,KAAK,iBAAiB;AAC/D,mBAAK,eAAe,KAAK,gBAAgB,KAAK,kBAAkB;AAChE,2BAAa,KAAK,gBAAgB,KAAK;AACvC,mBAAK,aAAY;;AAGrB,gBAAI,YAAY,KAAK,aAAa,KAAK,YAAY,mBAAmB,KAAK,YAAY;AAEvF,gBAAI,YAAY,KAAK,cAAc;AAC/B,mBAAK,cAAc,KAAK,eAAe;AACvC,0BAAY,KAAK;AACjB,mBAAK,aAAY;uBACV,YAAY,KAAK,YAAY,SAAS,KAAK,eAAe,KAAK,kBAAkB;AACxF,mBAAK,cAAc,KAAK,eAAe,KAAK,mBAAmB,YAAY,KAAK,YAAY;AAC5F,0BAAY,KAAK,eAAe,KAAK,mBAAmB,KAAK,YAAY;AACzE,mBAAK,aAAY;;AAGrB,gBAAI,CAAC,KAAK,oBAAoB;AAC1B,sBAAQ,SAAS,YAAY,WAAW,GAAG,KAAK,YAAY,MAAM;;;AAI1E,eAAK,eAAc;AAGnB,cAAI,KAAK,oBAAoB;AACzB,yBAAa,KAAK,aAAa;AAE/B,iBAAK,mBAAmB,KAAK,KAAK,UAAU,KAAK,YAAY,kBAAkB,KAAK,YAAY,cAAc;AAE9G,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,YAAY,KAAK;AAEzB,kBAAM,iBAAiB,KAAK,IAAI,KAAK,YAAY,kBAAkB,KAAK,qBAAqB,gBAAgB;AAC7G,kBAAM,eAAe,KAAK,IAAI,KAAK,YAAY,kBAAkB,KAAK,qBAAqB,gBAAgB;AAE3G,gBAAI,iBAAiB,KAAK,aAAa,iBAAiB,KAAK,YAAY;AAEzE,qBAAS,IAAI,gBAAgB,KAAK,cAAc,KAAK;AACjD,oBAAM,OAAO,KAAK,OAAO,CAAC;AAE1B,kBAAI,iBAAiB,KAAK;AAC1B,sBAAQ,KAAK,0BAA0B;gBACnC,KAAK,QAAQ;AACT,oCAAkB;AAClB;gBACJ,KAAK,QAAQ;AACT,oCAAkB,QAAQ,KAAK;AAC/B;gBACJ,KAAK,QAAQ;AACT,qCAAmB,QAAQ,KAAK,SAAS;AACzC;;AAGR,oBAAM,QAAQ,MAAM,iBAAiB,KAAK,YAAY,qBAAqB;AAC3E,oBAAM,MAAM,MAAM,eAAe,KAAK,YAAY,mBAAmB,KAAK,KAAK;AAE/E,oBAAM,kBAAkB,QAAQ,YAAY,KAAK,KAAK,OAAO,GAAG,KAAK,CAAC,EAAE;AACxE,oBAAM,eAAe,KAAK,KAAK,UAAU,OAAO,GAAG;AACnD,oBAAM,kBAAkB,QAAQ,YAAY,YAAY,EAAE;AAE1D,sBAAQ,SAAS,iBAAiB,iBAAiB,gBAAgB,iBAAiB,KAAK,YAAY,MAAM;AAE3G,gCAAkB,KAAK,YAAY;;AAGvC,gBAAI,KAAK,YAAY,mBAAmB,KAAK,YAAY,kBAAkB;AACvE,mBAAK,eAAc;;;;AAK/B,gBAAQ,QAAO;AAGf,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,YAAY;AACjB,gBAAI,KAAK,cAAc;AACnB,sBAAQ,cAAc,KAAK;;iBAE5B;AACH,gBAAI,KAAK,OAAO;AACZ,sBAAQ,cAAc,KAAK;;;AAInC,kBAAQ,YAAY,KAAK;AAEzB,kBAAQ,WACJ,KAAK,gBAAgB,OAAO,KAAK,aAAa,GAC9C,KAAK,gBAAgB,MAAM,KAAK,aAAa,GAC7C,KAAK,gBAAgB,QAAQ,KAAK,YAClC,KAAK,gBAAgB,SAAS,KAAK,UAAU;;MAGzD;MAEQ,iBAAc;AAClB,qBAAa,KAAK,aAAa;AAC/B,aAAK,gBAAqB,WAAW,MAAK;AACtC,eAAK,eAAe,CAAC,KAAK;AAC1B,eAAK,aAAY;QACrB,GAAG,GAAG;MACV;MAEU,aAAa,SAAgC;AACnD,cAAM,aAAa,OAAO;AAC1B,YAAI,KAAK,cAAc;AACnB,kBAAQ,YAAY,KAAK;AACzB,kBAAQ,cAAc,KAAK;;MAEnC;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,aAAK,sBAAsB,YAAY;AACvC,aAAK,sBAAsB,YAAY;AAEvC,aAAK,qBAAqB;AAC1B,aAAK,mBAAmB;AACxB,aAAK,iBAAiB;AACtB,aAAK,MAAM,kBAAkB,SAAS,IAAI;AAC1C,YAAI,KAAK,MAAM,mBAAmB,MAAM;AAEpC,uBAAa,KAAK,aAAa;AAC/B,eAAK,aAAY;AACjB,iBAAO;;AAEX,YAAI,CAAC,KAAK,YAAY;AAClB,iBAAO;;AAEX,aAAK,MAAM,iBAAiB;AAE5B,eAAO;MACX;;MAGO,eAAe,QAAiB,aAAsB,WAAmB,IAAmB;AAE/F,YAAI,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,cAAc,GAAG;AACtD;;AAGJ,YAAI,KAAK,MAAM,mBAAmB,QAAQ,KAAK,gBAAgB;AAC3D,eAAK,sBAAsB,YAAY;AACvC,eAAK,sBAAsB,YAAY;AAEvC,cAAI,CAAC,KAAK,oBAAoB;AAC1B,iBAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,iBAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAC/D,iBAAK,qBAAqB,4BAA4B,KAAK,YAAY;AAEvE,iBAAK,qBAAqB;;AAG9B,eAAK,aAAY;;AAErB,cAAM,eAAe,QAAQ,aAAa,WAAW,EAAE;MAC3D;;;;MAKQ,wBAAqB;;AACzB,YAAI,CAAC,KAAK,YAAY;AAClB;;AAGJ,YAAI,KAAK,uBAAuB,KAAK,qBAAqB;AACtD,cAAI,CAAC,KAAK,oBAAoB;AAC1B,iBAAK,cAAc;cACf,kBAAkB;cAClB,gBAAgB;cAChB,oBAAoB;cACpB,kBAAkB;cAClB,kBAAkB;;;AAI1B,cAAI,cAAc;AAClB,cAAI,gBAAgB;AAEpB,gBAAM,yBAAyB,KAAK,sBAAuB,KAAK;AAEhE,gBAAM,sBAAsB,KAAK,MAAM,yBAAyB,KAAK,YAAY,MAAM;AACvF,eAAK,YAAY,mBAAmB,KAAK,IAAI,KAAK,IAAI,qBAAqB,CAAC,GAAG,KAAK,OAAO,SAAS,CAAC;AAErG,cAAI,cAAc;AAElB,gBAAM,oBAAoB,KAAK,wBAAuB,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,KAAI;AAE1E,cAAI,eAAe;AAEnB,mBAAS,QAAQ,GAAG,QAAQ,KAAK,YAAY,kBAAkB,SAAS;AACpE,kBAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,2BAAe,KAAK,KAAK,SAAS,KAAK,WAAW;;AAGtD,iBAAO,cAAc,qBAAqB,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,eAAe;AAClH;AACA,2BAAe,KAAK,IAAI,oBAAoB,WAAW;AACvD,0BAAc,KAAK,sBAAsB,YAAY,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,OAAO,GAAG,aAAa,CAAC,EAAE;;AAIvI,cAAI,KAAK,IAAI,oBAAoB,WAAW,IAAI,gBAAgB,gBAAgB,GAAG;AAC/E;;AAGJ,yBAAe;AAEf,cAAI,CAAC,KAAK,oBAAoB;AAC1B,iBAAK,YAAY,mBAAmB;AACpC,iBAAK,YAAY,qBAAqB;AACtC,iBAAK,YAAY,iBAAiB,KAAK,YAAY;AACnD,iBAAK,YAAY,mBAAmB,KAAK,YAAY;iBAClD;AACH,gBAAI,cAAc,KAAK,qBAAqB,mBAAmB;AAC3D,mBAAK,YAAY,mBAAmB;AACpC,mBAAK,YAAY,qBAAqB;AACtC,mBAAK,YAAY,iBAAiB,KAAK,qBAAqB;AAC5D,mBAAK,YAAY,mBAAmB,KAAK,qBAAqB;mBAC3D;AACH,mBAAK,YAAY,mBAAmB,KAAK,qBAAqB;AAC9D,mBAAK,YAAY,qBAAqB,KAAK,qBAAqB;AAChE,mBAAK,YAAY,iBAAiB;AAClC,mBAAK,YAAY,mBAAmB;;;AAK5C,eAAK,eAAe,KAAK;AACzB,eAAK,sBAAsB;AAC3B,eAAK,sBAAsB;eACxB;AAEH,eAAK,YAAY,qBAAqB;AACtC,eAAK,YAAY,mBAAmB;AAEpC,cAAI,aAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,WAAW;AACxI,cAAI,YAAY;AAEhB,iBAAO,YAAY,cAAc,KAAK,YAAY,kBAAkB;AAChE,yBAAa;AAEb,gBAAI,KAAK,YAAY,mBAAmB,KAAK,OAAO,SAAS,GAAG;AAC5D,mBAAK,YAAY;AACjB,2BAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,WAAW;;;AAI5I,eAAK,YAAY,qBAAqB,KAAK,YAAY,mBAAmB;AAE1E,cAAI,KAAK,qBAAqB,sBAAsB,MAAM,KAAK,YAAY,oBAAoB,KAAK,qBAAqB,mBAAmB;AAExI,mBAAO,YAAY,cAAc,KAAK,YAAY,gBAAgB;AAC9D,2BAAa;AAEb,kBAAI,KAAK,YAAY,mBAAmB,KAAK,OAAO,SAAS,GAAG;AAC5D,qBAAK,YAAY;AACjB,6BAAa,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO,KAAK,YAAY,gBAAgB,EAAE,WAAW;;;AAI5I,iBAAK,YAAY,mBAAmB,KAAK,YAAY,iBAAiB;qBAC/D,CAAC,KAAK,oBAAoB;AACjC,iBAAK,YAAY,mBAAmB,KAAK,YAAY;AACrD,iBAAK,YAAY,iBAAiB,KAAK,YAAY;;;MAG/D;;;;;;;;MASU,4BAA4B,QAAc;MAEpD;;;;;;;MAQU,iBAAiB,MAAiB;AAExC,YAAI,UAAU;AACd,WAAG;AACC,qBAAW,KAAK,YAAY,mBAAmB,KAAK,KAAK,aAAa,OAAO,KAAK,YAAY,mBAAmB,CAAC,IAAI,EAAE,KAAK,YAAY,mBAAmB;AAC5J,sBACI,KAAK,YAAY,iBAAiB,KAAK,aAAa,UAAU,KAAK,aAAa,OAAO,KAAK,YAAY,cAAc,IAAI,EAAE,KAAK,YAAY,iBAAiB;iBAC7J,YAAY;AAErB,aAAK,qBAAqB,mBAAmB,KAAK,YAAY;AAC9D,aAAK,qBAAqB,oBAAoB,KAAK,YAAY;AAE/D,aAAK,0BAA0B,gBAAgB,IAAI;AAEnD,aAAK,qBAAqB;AAC1B,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;MAGU,iBAAc;AACpB,aAAK,qBAAqB;AAC1B,aAAK,eAAe;AAEpB,aAAK,uBAAuB;UACxB,mBAAmB;UACnB,2BAA2B;UAC3B,kBAAkB;;AAGtB,aAAK,cAAc;UACf,kBAAkB;UAClB,gBAAgB,KAAK,aAAa;UAClC,kBAAkB,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,KAAK;UAC3D,oBAAoB;UACpB,kBAAkB,KAAK,OAAO,SAAS;;AAG3C,aAAK,aAAY;MACrB;MAEO,SAAM;AACT,cAAM,QAAO;AAEb,aAAK,uBAAuB,MAAK;MACrC;;AAhnCA,eAAA;MADC,UAAS;;AA6BV,eAAA;MADC,UAAS;;AAulCd,kBAAc,6BAA6B,aAAa;;;;;AC7sCxD,IAOa;AAPb;;;AACA;AACA;AAKM,IAAO,gBAAP,cAA6B,UAAS;MAC9B,eAAY;AAClB,eAAO;MACX;MAEU,kBAAkB,aAAwB;AAChD,cAAM,iBAAiB,IAAI,YAAW;AACtC,YAAI,MAAM;AACV,iBAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,iBAAO;;AAEX,uBAAe,OAAO;AACtB,eAAO;MACX;;AAEJ,kBAAc,6BAA6B,aAAa;;;;;ICR3C;;;;AAZb;AACA;AAGA;AACA;AAEA;AACA;AAIM,IAAO,OAAP,cAAoB,QAAO;;MAgB7B,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;MAEA,IAAW,KAAK,OAAoB;AAChC,YAAI,KAAK,UAAU,OAAO;AACtB;;AAGJ,aAAK,QAAQ;AACb,aAAK,aAAY;MACrB;;MAGA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAc;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,YAAI,KAAK,kCAAkC,KAAK,mBAAmB;AAC/D,eAAK,kBAAkB,kBAAkB,OAAO,KAAK,8BAA8B;AACnF,eAAK,iCAAiC;;AAG1C,YAAI,OAAO;AACP,eAAK,iCAAiC,MAAM,kBAAkB,IAAI,MAAM,KAAK,aAAY,CAAE;;AAG/F,aAAK,oBAAoB;AACzB,aAAK,aAAY;MACrB;;MAIA,IAAW,KAAE;AACT,eAAO,KAAK,IAAI,SAAS,KAAK,KAAK;MACvC;MAEA,IAAW,GAAG,OAAsB;AAChC,YAAI,KAAK,IAAI,SAAS,KAAK,KAAK,MAAM,OAAO;AACzC;;AAGJ,YAAI,KAAK,IAAI,WAAW,KAAK,GAAG;AAC5B,eAAK,aAAY;;MAEzB;;MAIA,IAAW,KAAE;AACT,eAAO,KAAK,IAAI,SAAS,KAAK,KAAK;MACvC;MAEA,IAAW,GAAG,OAAsB;AAChC,YAAI,KAAK,IAAI,SAAS,KAAK,KAAK,MAAM,OAAO;AACzC;;AAGJ,YAAI,KAAK,IAAI,WAAW,KAAK,GAAG;AAC5B,eAAK,aAAY;;MAEzB;;MAIA,IAAW,KAAE;AACT,eAAO,KAAK,IAAI,SAAS,KAAK,KAAK;MACvC;MAEA,IAAW,GAAG,OAAsB;AAChC,YAAI,KAAK,IAAI,SAAS,KAAK,KAAK,MAAM,OAAO;AACzC;;AAGJ,YAAI,KAAK,IAAI,WAAW,KAAK,GAAG;AAC5B,eAAK,aAAY;;MAEzB;;MAIA,IAAW,KAAE;AACT,eAAO,KAAK,IAAI,SAAS,KAAK,KAAK;MACvC;MAEA,IAAW,GAAG,OAAsB;AAChC,YAAI,KAAK,IAAI,SAAS,KAAK,KAAK,MAAM,OAAO;AACzC;;AAGJ,YAAI,KAAK,IAAI,WAAW,KAAK,GAAG;AAC5B,eAAK,aAAY;;MAEzB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;MAGA,IAAW,oBAAoB,OAAa;AACxC;MACJ;;MAGA,IAAW,kBAAkB,OAAa;AACtC;MACJ;;MAGA,IAAW,eAAY;AACnB,gBAAQ,KAAK,oBAAoB,KAAK,kBAAkB,UAAU,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;MACvG;;MAGA,IAAW,eAAY;AACnB,gBAAQ,KAAK,oBAAoB,KAAK,kBAAkB,UAAU,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;MACvG;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AA1JX,aAAA,aAAa;AAEd,aAAA,MAAM,IAAI,aAAa,CAAC;AAExB,aAAA,MAAM,IAAI,aAAa,CAAC;AAExB,aAAA,MAAM,IAAI,aAAa,CAAC;AAExB,aAAA,MAAM,IAAI,aAAa,CAAC;AACvB,aAAA,QAAQ,IAAI,MAAK;AAoJrB,aAAK,iBAAiB;AAEtB,aAAK,mBAAmB;AACxB,aAAK,uBAAuB,QAAQ;AACpC,aAAK,qBAAqB,QAAQ;MACtC;MAEU,eAAY;AAClB,eAAO;MACX;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,aAAK,aAAa,OAAO;AACzB,gBAAQ,cAAc,KAAK,UAAU,OAAO;AAC5C,gBAAQ,YAAY,KAAK;AACzB,gBAAQ,YAAY,KAAK,KAAK;AAE9B,gBAAQ,UAAS;AACjB,gBAAQ,OAAO,KAAK,qBAAqB,OAAO,KAAK,IAAI,SAAS,KAAK,KAAK,GAAG,KAAK,qBAAqB,MAAM,KAAK,IAAI,SAAS,KAAK,KAAK,CAAC;AAE5I,gBAAQ,OAAO,KAAK,qBAAqB,OAAO,KAAK,cAAc,KAAK,qBAAqB,MAAM,KAAK,YAAY;AACpH,gBAAQ,OAAM;AAEd,gBAAQ,QAAO;MACnB;MAEO,WAAQ;AAEX,aAAK,gBAAgB,QAAQ,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,KAAK,IAAI,KAAK,YAAY,IAAI,KAAK;AAChG,aAAK,gBAAgB,SAAS,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,KAAK,IAAI,KAAK,YAAY,IAAI,KAAK;MACrG;MAEU,kBAAkB,eAAsB;AAC9C,aAAK,gBAAgB,OAAO,cAAc,OAAO,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,KAAK,GAAG,KAAK,YAAY,IAAI,KAAK,aAAa;AAChI,aAAK,gBAAgB,MAAM,cAAc,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,KAAK,KAAK,GAAG,KAAK,YAAY,IAAI,KAAK,aAAa;MAClI;;;;;;;MAQO,cAAc,UAAmB,OAAc,MAAe,OAAK;AACtE,YAAI,CAAC,KAAK,SAAS,KAAK,WAAW,KAAK,MAAM,gBAAgB;AAC1D,gBAAM,MAAM,wEAAwE;AACpF;;AAGJ,cAAM,iBAAiB,KAAK,MAAM,mBAAkB;AACpD,cAAM,oBAAoB,QAAQ,QAAQ,UAAU,OAAO,kBAAkB,MAAM,mBAAkB,GAAI,cAAc;AAEvH,aAAK,yBAAyB,mBAAmB,GAAG;AAEpD,YAAI,kBAAkB,IAAI,KAAK,kBAAkB,IAAI,GAAG;AACpD,eAAK,gBAAgB;AACrB;;AAEJ,aAAK,gBAAgB;MACzB;;;;;;MAOO,yBAAyB,mBAA4B,MAAe,OAAK;AAC5E,cAAM,IAAY,kBAAkB,IAAI,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI;AACjF,cAAM,IAAY,kBAAkB,IAAI,KAAK,aAAa,SAAS,KAAK,KAAK,IAAI;AAEjF,YAAI,KAAK;AACL,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,IAAI,wBAAwB;AACjC,eAAK,IAAI,wBAAwB;eAC9B;AACH,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,IAAI,wBAAwB;AACjC,eAAK,IAAI,wBAAwB;;MAEzC;;AAxOA,eAAA;MADC,UAAS;;AAuCV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAiBV,eAAA;MADC,UAAS;;AAqId,kBAAc,oBAAoB,IAAI;;;;;ACtQtC,IAaa;AAbb;;;AACA;AAKA;AAOM,IAAO,iBAAP,MAAqB;;;;;MAkBvB,YAAY,WAAoB;AAC5B,aAAK,aAAa;AAElB,aAAK,KAAK,IAAI,aAAa,CAAC;AAC5B,aAAK,KAAK,IAAI,aAAa,CAAC;AAE5B,aAAK,SAAS,IAAI,QAAQ,GAAG,GAAG,CAAC;MACrC;;MAGA,IAAW,IAAC;AACR,eAAO,KAAK,GAAG,SAAS,KAAK,WAAW,KAAK;MACjD;MAEA,IAAW,EAAE,OAAsB;AAC/B,YAAI,KAAK,GAAG,SAAS,KAAK,WAAW,KAAK,MAAM,OAAO;AACnD;;AAGJ,YAAI,KAAK,GAAG,WAAW,KAAK,GAAG;AAC3B,eAAK,WAAW,aAAY;;MAEpC;;MAGA,IAAW,IAAC;AACR,eAAO,KAAK,GAAG,SAAS,KAAK,WAAW,KAAK;MACjD;MAEA,IAAW,EAAE,OAAsB;AAC/B,YAAI,KAAK,GAAG,SAAS,KAAK,WAAW,KAAK,MAAM,OAAO;AACnD;;AAGJ,YAAI,KAAK,GAAG,WAAW,KAAK,GAAG;AAC3B,eAAK,WAAW,aAAY;;MAEpC;;MAGA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAwB;AACvC,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,YAAI,KAAK,YAAY,KAAK,kBAAkB;AACxC,eAAK,SAAS,kBAAkB,OAAO,KAAK,gBAAgB;AAE5D,eAAK,mBAAmB;;AAG5B,aAAK,WAAW;AAEhB,YAAI,KAAK,UAAU;AACf,eAAK,mBAAmB,KAAK,SAAS,kBAAkB,IAAI,KAAK,WAAW,aAAa;;AAG7F,aAAK,WAAW,aAAY;MAChC;;MAGA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;MAEA,IAAW,KAAK,OAA6B;AACzC,YAAI,KAAK,UAAU,OAAO;AACtB;;AAGJ,YAAI,KAAK,SAAS,KAAK,eAAe;AAClC,eAAK,MAAM,SAAQ,EAAG,8BAA8B,OAAO,KAAK,aAAa;;AAGjF,aAAK,QAAQ;AAEb,YAAI,KAAK,OAAO;AACZ,eAAK,gBAAgB,KAAK,MAAM,SAAQ,EAAG,8BAA8B,IAAI,KAAK,WAAW,aAAa;;AAG9G,aAAK,WAAW,aAAY;MAChC;;MAGO,aAAU;AACb,aAAK,UAAU;AACf,aAAK,OAAO;MAChB;;;;;MAMO,YAAS;AACZ,aAAK,SAAS,KAAK,gBAAe;AAElC,eAAO,KAAK;MAChB;MAEQ,kBAAe;AACnB,YAAI,KAAK,SAAS,MAAM;AACpB,iBAAO,KAAK,WAAW,MAAM,0BAA0B,KAAK,MAAM,gBAAe,EAAG,eAAe,QAAQ,KAAK,MAAM,eAAc,CAAE;mBAC/H,KAAK,YAAY,MAAM;AAC9B,iBAAO,IAAI,QAAQ,KAAK,SAAS,SAAS,KAAK,SAAS,SAAS,IAAI,OAAO;eACzE;AACH,gBAAM,OAAY,KAAK,WAAW;AAElC,gBAAM,SAAiB,KAAK,GAAG,gBAAgB,MAAM,OAAO,KAAK,QAAQ,KAAK,CAAC;AAC/E,gBAAM,SAAiB,KAAK,GAAG,gBAAgB,MAAM,OAAO,KAAK,QAAQ,MAAM,CAAC;AAEhF,iBAAO,IAAI,QAAQ,QAAQ,QAAQ,IAAI,OAAO;;MAEtD;;MAGO,UAAO;AACV,aAAK,WAAU;MACnB;;;;;;IC7IS;;;;AAZb;AAEA;AACA;AACA;AAEA;AAMM,IAAO,YAAP,cAAyB,QAAO;;;;;MAclC,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAbX,aAAA,aAAqB;AAsDtB,aAAA,gBAAgB,MAAW;AAC9B,eAAK,aAAY;QACrB;AAxCI,aAAK,iBAAiB;AACtB,aAAK,mBAAmB;AACxB,aAAK,uBAAuB,QAAQ;AACpC,aAAK,qBAAqB,QAAQ;AAElC,aAAK,QAAQ,CAAA;AACb,aAAK,UAAU,CAAA;MACnB;;MAIA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;MAEA,IAAW,KAAK,OAAoB;AAChC,YAAI,KAAK,UAAU,OAAO;AACtB;;AAGJ,aAAK,QAAQ;AACb,aAAK,aAAY;MACrB;;;;;;MAOO,MAAM,OAAa;AACtB,YAAI,CAAC,KAAK,QAAQ,KAAK,GAAG;AACtB,eAAK,QAAQ,KAAK,IAAI,IAAI,eAAe,IAAI;;AAGjD,eAAO,KAAK,QAAQ,KAAK;MAC7B;;;;;;MAYO,OAAO,OAA8E;AACxF,eAAO,MAAM,IAAI,CAAC,SAAS,KAAK,KAAK,IAAI,CAAC;MAC9C;;;;;;MAOO,KAAK,MAA0E;AAClF,cAAM,QAAwB,KAAK,MAAM,KAAK,QAAQ,MAAM;AAE5D,YAAI,QAAQ,MAAM;AACd,iBAAO;;AAGX,YAAI,gBAAgB,cAAc;AAC9B,gBAAM,OAAO;mBACN,gBAAgB,SAAS;AAChC,gBAAM,UAAU;mBACT,KAAK,KAAK,QAAQ,KAAK,KAAK,MAAM;AACzC,gBAAM,IAAI,KAAK;AACf,gBAAM,IAAI,KAAK;;AAGnB,eAAO;MACX;;;;;MAMO,OAAO,OAA8B;AACxC,YAAI;AAEJ,YAAI,iBAAiB,gBAAgB;AACjC,kBAAQ,KAAK,QAAQ,QAAQ,KAAK;AAElC,cAAI,UAAU,IAAI;AACd;;eAED;AACH,kBAAQ;;AAGZ,cAAM,QAAkC,KAAK,QAAQ,KAAK;AAE1D,YAAI,CAAC,OAAO;AACR;;AAGJ,cAAM,QAAO;AAEb,aAAK,QAAQ,OAAO,OAAO,CAAC;MAChC;;;;MAKO,QAAK;AACR,eAAO,KAAK,QAAQ,SAAS,GAAG;AAC5B,eAAK,OAAO,KAAK,QAAQ,SAAS,CAAC;;MAE3C;;;;MAKO,aAAU;AACb,aAAK,QAAQ,QAAQ,CAAC,UAAS;AAC3B,cAAI,SAAS,MAAM;AACf,kBAAM,WAAU;;QAExB,CAAC;MACL;;MAGA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;MAEA,IAAW,oBAAoB,OAAa;AACxC;MACJ;MAEA,IAAW,kBAAkB,OAAa;AACtC;MACJ;MAEU,eAAY;AAClB,eAAO;MACX;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,aAAK,aAAa,OAAO;AAEzB,gBAAQ,cAAc,KAAK;AAC3B,gBAAQ,YAAY,KAAK;AACzB,gBAAQ,YAAY,KAAK,KAAK;AAE9B,gBAAQ,UAAS;AAEjB,YAAI,QAAiB;AACrB,YAAI;AAEJ,aAAK,QAAQ,QAAQ,CAAC,UAAS;AAC3B,cAAI,CAAC,OAAO;AACR;;AAGJ,cAAI,OAAO;AACP,oBAAQ,OAAO,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC;AAE7C,oBAAQ;iBACL;AACH,gBAAI,MAAM,OAAO,IAAI,KAAK,cAAc,IAAI,GAAG;AAC3C,sBAAQ,OAAO,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC;mBAC1C;AACH,sBAAQ,OAAO,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC;;;AAGrD,0BAAgB,MAAM;QAC1B,CAAC;AAED,gBAAQ,OAAM;AAEd,gBAAQ,QAAO;MACnB;MAEU,wBAAqB;AAC3B,aAAK,QAAQ;AACb,aAAK,QAAQ;AACb,aAAK,QAAQ;AACb,aAAK,QAAQ;AAEb,aAAK,QAAQ,QAAQ,CAAC,UAAS;AAC3B,cAAI,CAAC,OAAO;AACR;;AAGJ,gBAAM,UAAS;AAEf,cAAI,KAAK,SAAS,QAAQ,MAAM,OAAO,IAAI,KAAK,OAAO;AACnD,iBAAK,QAAQ,MAAM,OAAO;;AAE9B,cAAI,KAAK,SAAS,QAAQ,MAAM,OAAO,IAAI,KAAK,OAAO;AACnD,iBAAK,QAAQ,MAAM,OAAO;;AAE9B,cAAI,KAAK,SAAS,QAAQ,MAAM,OAAO,IAAI,KAAK,OAAO;AACnD,iBAAK,QAAQ,MAAM,OAAO;;AAE9B,cAAI,KAAK,SAAS,QAAQ,MAAM,OAAO,IAAI,KAAK,OAAO;AACnD,iBAAK,QAAQ,MAAM,OAAO;;QAElC,CAAC;AAED,YAAI,KAAK,SAAS,MAAM;AACpB,eAAK,QAAQ;;AAEjB,YAAI,KAAK,SAAS,MAAM;AACpB,eAAK,QAAQ;;AAEjB,YAAI,KAAK,SAAS,MAAM;AACpB,eAAK,QAAQ;;AAEjB,YAAI,KAAK,SAAS,MAAM;AACpB,eAAK,QAAQ;;MAErB;MAEO,WAAQ;AACX,YAAI,KAAK,SAAS,QAAQ,KAAK,SAAS,QAAQ,KAAK,SAAS,QAAQ,KAAK,SAAS,MAAM;AACtF;;AAGJ,aAAK,gBAAgB,QAAQ,KAAK,IAAI,KAAK,QAAQ,KAAK,KAAK,IAAI,KAAK;AACtE,aAAK,gBAAgB,SAAS,KAAK,IAAI,KAAK,QAAQ,KAAK,KAAK,IAAI,KAAK;MAC3E;MAEU,oBAAiB;AACvB,YAAI,KAAK,SAAS,QAAQ,KAAK,SAAS,MAAM;AAC1C;;AAGJ,aAAK,gBAAgB,OAAO,KAAK,QAAQ,KAAK,aAAa;AAC3D,aAAK,gBAAgB,MAAM,KAAK,QAAQ,KAAK,aAAa;MAC9D;MAEO,UAAO;AACV,aAAK,MAAK;AAEV,cAAM,QAAO;MACjB;;AAtPA,eAAA;MADC,UAAS;;AAyPd,kBAAc,yBAAyB,SAAS;;;;;ICnRnC;;;;AAdb;AAGA;AACA;AACA;AACA;AAEA;AAMM,IAAO,cAAP,MAAO,qBAAoB,QAAO;;MAQpC,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;MACrB;;MAWA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,gBAAQ,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG,CAAC;AAEtC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AACvB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAc;AAC/B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,aAAY;AAEjB,aAAK,6BAA6B,gBAAgB,KAAK;AAEvD,YAAI,KAAK,cAAc,KAAK,OAAO;AAE/B,eAAK,MAAM,qBAAqB,CAAC,YAAW;AACxC,gBAAI,YAAY,MAAM;AAClB;;AAGJ,gBAAU,QAAS,UAAU,QAAW;AACpC;;AAEJ,kBAAM,aAA0B;AAChC,gBAAI,WAAW,UAAU,KAAK,OAAO;AACjC,yBAAW,YAAY;;UAE/B,CAAC;;MAET;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAjGX,aAAA,aAAa;AACb,aAAA,cAAc;AACd,aAAA,kBAAkB;AAClB,aAAA,aAAa;AAmBd,aAAA,QAAQ;AAGR,aAAA,+BAA+B,IAAI,WAAU;AA2EhD,aAAK,mBAAmB;MAC5B;MAEU,eAAY;AAClB,eAAO;MACX;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,cAAM,cAAc,KAAK,gBAAgB,QAAQ,KAAK;AACtD,cAAM,eAAe,KAAK,gBAAgB,SAAS,KAAK;AAExD,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAIjC,gBAAQ,YACJ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,GACzD,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS,GACzD,KAAK,gBAAgB,QAAQ,IAAI,KAAK,aAAa,GACnD,KAAK,gBAAgB,SAAS,IAAI,KAAK,aAAa,GACpD,OAAO;AAGX,gBAAQ,YAAY,KAAK,aAAa,KAAK,cAAc,KAAK;AAC9D,gBAAQ,KAAI;AAEZ,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAG5B,gBAAQ,cAAc,KAAK;AAC3B,gBAAQ,YAAY,KAAK;AAEzB,gBAAQ,OAAM;AAGd,YAAI,KAAK,YAAY;AACjB,kBAAQ,YAAY,KAAK,aAAa,KAAK,QAAQ,KAAK;AACxD,gBAAM,cAAc,cAAc,KAAK;AACvC,gBAAM,cAAc,eAAe,KAAK;AAExC,kBAAQ,YACJ,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ,GACzD,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS,GACzD,cAAc,IAAI,KAAK,aAAa,GACpC,cAAc,IAAI,KAAK,aAAa,GACpC,OAAO;AAGX,kBAAQ,KAAI;;AAEhB,gBAAQ,QAAO;MACnB;;MAGO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,YAAI,CAAC,KAAK,WAAW;AACjB,eAAK,YAAY;;AAGrB,eAAO;MACX;;;;;;;;;MAUO,OAAO,yBAAyB,OAAe,OAAe,WAAoB,gBAA6D;AAClJ,cAAM,QAAQ,IAAI,WAAU;AAC5B,cAAM,aAAa;AACnB,cAAM,SAAS;AAEf,cAAM,QAAQ,IAAI,aAAW;AAC7B,cAAM,QAAQ;AACd,cAAM,SAAS;AACf,cAAM,YAAY;AAClB,cAAM,QAAQ;AACd,cAAM,QAAQ;AACd,cAAM,6BAA6B,IAAI,CAAC,UAAU,eAAe,OAAO,KAAK,CAAC;AAC9E,cAAM,WAAW,KAAK;AAEtB,cAAM,SAAS,IAAI,UAAS;AAC5B,eAAO,OAAO;AACd,eAAO,QAAQ;AACf,eAAO,cAAc;AACrB,eAAO,0BAA0B,QAAQ;AACzC,eAAO,QAAQ;AACf,cAAM,WAAW,MAAM;AAEvB,eAAO;MACX;;AA5MA,eAAA;MADC,UAAS;;AAgBH,eAAA;MADN,UAAS;;AAQV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAyJd,kBAAc,2BAA2B,WAAW;;;;;ICzNvC;;;;AAXb;AAGA;AACA;AAEA;AAKM,IAAO,aAAP,cAA0B,QAAO;;MA4BnC,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;MAEA,IAAW,aAAa,OAAc;AAClC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAGJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;MAIA,IAAW,OAAI;AACX,eAAO,KAAK;MAChB;MAEA,IAAW,KAAK,OAAa;AACzB,YAAI,KAAK,UAAU,OAAO;AACtB;;AAGJ,aAAK,QAAQ;AACb,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK,WAAW,SAAS,KAAK,KAAK;MAC9C;;MAGA,IAAW,oBAAiB;AACxB,eAAO,KAAK,WAAW,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACtF;MAEA,IAAW,UAAU,OAAsB;AACvC,YAAI,KAAK,WAAW,SAAS,KAAK,KAAK,MAAM,OAAO;AAChD;;AAGJ,YAAI,KAAK,WAAW,WAAW,KAAK,GAAG;AACnC,eAAK,aAAY;;MAEzB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK,YAAY,SAAS,KAAK,KAAK;MAC/C;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK,YAAY,gBAAgB,KAAK,OAAO,KAAK,qBAAqB,KAAK;MACvF;MAEA,IAAW,WAAW,OAAsB;AACxC,YAAI,KAAK,YAAY,SAAS,KAAK,KAAK,MAAM,OAAO;AACjD;;AAGJ,YAAI,KAAK,YAAY,WAAW,KAAK,GAAG;AACpC,eAAK,aAAY;;MAEzB;;MAIA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAa;AAC5B,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,aAAK,WAAW;AAChB,aAAK,aAAY;AAEjB,aAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK,QAAQ,GAAG,KAAK,QAAQ;MAC5E;;MAIA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAa;AAC5B,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,aAAK,WAAW;AAChB,aAAK,aAAY;AAEjB,aAAK,QAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,OAAO,KAAK,QAAQ,GAAG,KAAK,QAAQ;MAC5E;;MAIA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MAEA,IAAW,MAAM,OAAa;AAC1B,gBAAQ,KAAK,IAAI,KAAK,IAAI,OAAO,KAAK,QAAQ,GAAG,KAAK,QAAQ;AAE9D,YAAI,KAAK,WAAW,OAAO;AACvB;;AAGJ,aAAK,SAAS;AACd,aAAK,aAAY;AACjB,aAAK,yBAAyB,gBAAgB,KAAK,MAAM;MAC7D;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAc;AAChC,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAc;AACpC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AACvB,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAvLT,aAAA,cAAc,IAAI,aAAa,IAAI,aAAa,gBAAgB,KAAK;AACvE,aAAA,WAAW;AACX,aAAA,WAAW;AACX,aAAA,SAAS;AACT,aAAA,cAAc;AACZ,aAAA,aAAa,IAAI,aAAa,GAAG,aAAa,gBAAgB,KAAK;AACrE,aAAA,kBAAkB;AAChB,aAAA,gBAAgB;AAClB,aAAA,QAAQ;AAER,aAAA,qBAAqB;AAGnB,aAAA,sBAAsB;AAUzB,aAAA,2BAA2B,IAAI,WAAU;AAqPxC,aAAA,iBAAiB;AAlFrB,aAAK,mBAAmB;MAC5B;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,oBAAiB;AACvB,YAAI,KAAK,YAAY;AACjB,kBAAS,KAAK,UAAU,KAAK,UAAU,KAAK,UAAU,KAAK,WAAY,KAAK;;AAGhF,gBAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU,KAAK,WAAY,KAAK;MAChF;MAEU,mBAAmB,MAAY;AACrC,YAAI,iBAAiB;AACrB,gBAAQ,MAAM;UACV,KAAK;AACD,gBAAI,KAAK,YAAY,SAAS;AAC1B,+BAAiB,KAAK,IAAI,KAAK,YAAY,SAAS,KAAK,KAAK,GAAG,KAAK,uBAAuB;mBAC1F;AACH,+BAAiB,KAAK,0BAA0B,KAAK,YAAY,SAAS,KAAK,KAAK;;AAExF;UACJ,KAAK;AACD,gBAAI,KAAK,YAAY,SAAS;AAC1B,+BAAiB,KAAK,IAAI,KAAK,YAAY,SAAS,KAAK,KAAK,GAAG,KAAK,uBAAuB;mBAC1F;AACH,+BAAiB,KAAK,0BAA0B,KAAK,YAAY,SAAS,KAAK,KAAK;;;AAGhG,eAAO;MACX;MAEU,sBAAsB,MAAY;AAExC,aAAK,sBAAsB;AAC3B,aAAK,cAAc,KAAK,gBAAgB;AACxC,aAAK,aAAa,KAAK,gBAAgB;AACvC,aAAK,eAAe,KAAK,gBAAgB;AACzC,aAAK,gBAAgB,KAAK,gBAAgB;AAE1C,aAAK,uBAAuB,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC5F,aAAK,0BAA0B,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAC/F,aAAK,2BAA2B,KAAK,mBAAmB,IAAI;AAE5D,YAAI,KAAK,cAAc;AACnB,eAAK,wBAAwB,KAAK;;AAGtC,YAAI,KAAK,cAAc,KAAK,gBAAgB,SAAS,KAAK,gBAAgB,OAAO;AAC7E,kBAAQ,MAAM,qCAAqC;AACnD;;AAEJ,YAAI,KAAK,WAAW,SAAS;AACzB,eAAK,sBAAsB,KAAK,IAAI,KAAK,WAAW,SAAS,KAAK,KAAK,GAAG,KAAK,uBAAuB;eACnG;AACH,eAAK,sBAAsB,KAAK,0BAA0B,KAAK,WAAW,SAAS,KAAK,KAAK;;AAGjG,aAAK,2BAA2B,KAAK,sBAAsB;AAE3D,YAAI,KAAK,YAAY;AACjB,eAAK,eAAe,KAAK;AACzB,cAAI,CAAC,KAAK,kBAAkB,KAAK,cAAc;AAC3C,iBAAK,cAAc,KAAK,2BAA2B;;AAGvD,eAAK,gBAAgB,KAAK;AAC1B,eAAK,eAAe,KAAK;eACtB;AACH,eAAK,cAAc,KAAK;AACxB,cAAI,CAAC,KAAK,kBAAkB,KAAK,cAAc;AAC3C,iBAAK,eAAe,KAAK,2BAA2B;;AAExD,eAAK,gBAAgB,KAAK;AAC1B,eAAK,eAAe,KAAK;;MAEjC;;;;MAQU,wBAAwB,GAAW,GAAS;AAClD,YAAI,KAAK,YAAY,GAAG;AACpB,eAAK,uBAAuB,qBAAqB,GAAG,GAAG,KAAK,oBAAoB;AAChF,cAAI,KAAK,qBAAqB;AAC9B,cAAI,KAAK,qBAAqB;;AAGlC,YAAI;AACJ,YAAI,KAAK,aAAa;AAClB,kBAAQ,KAAK,YAAY,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,WAAW,KAAK,WAAW,KAAK;eAChH;AACH,kBAAQ,KAAK,YAAa,IAAI,KAAK,gBAAgB,QAAQ,KAAK,gBAAgB,SAAU,KAAK,WAAW,KAAK;;AAEnH,aAAK,QAAQ,KAAK,QAAQ,KAAK,MAAM,QAAQ,KAAK,KAAK,IAAI,KAAK,QAAQ;MAC5E;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,aAAK,iBAAiB;AAEtB,aAAK,wBAAwB,YAAY,GAAG,YAAY,CAAC;AACzD,aAAK,MAAM,kBAAkB,SAAS,IAAI;AAC1C,aAAK,qBAAqB;AAC1B,eAAO;MACX;MAEO,eAAe,QAAiB,aAAsB,WAAmB,IAAmB;AAE/F,YAAI,aAAa,KAAK,oBAAoB;AACtC;;AAGJ,YAAI,KAAK,kBAAkB,CAAC,KAAK,YAAY;AACzC,eAAK,wBAAwB,YAAY,GAAG,YAAY,CAAC;;AAG7D,cAAM,eAAe,QAAQ,aAAa,WAAW,EAAE;MAC3D;MAEO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAoB;AACnH,aAAK,iBAAiB;AAEtB,eAAO,KAAK,MAAM,kBAAkB,SAAS;AAC7C,cAAM,aAAa,QAAQ,aAAa,WAAW,aAAa,WAAW;MAC/E;MAEO,gBAAa;AAChB,aAAK,gBAAe;AACpB,cAAM,cAAa;MACvB;;AA9SA,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AAsBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAkBV,eAAA;MADC,UAAS;;AAmBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;;;;;ICrKD;;;;AAZb;AACA;AACA;AAKA;AAKM,IAAO,SAAP,cAAsB,WAAU;;MAUlC,IAAW,kBAAe;AACtB,eAAO,KAAK;MAChB;MAEA,IAAW,gBAAgB,OAAc;AACrC,YAAI,KAAK,qBAAqB,OAAO;AACjC;;AAGJ,aAAK,mBAAmB;AACxB,aAAK,aAAY;MACrB;;MAIA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAA6B;AACvD,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAGJ,aAAK,sBAAsB;AAC3B,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAc;AACnC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AApGX,aAAA,cAAc;AACd,aAAA,eAAe;AACf,aAAA,cAAc;AACd,aAAA,iBAAiB;AACf,aAAA,mBAAmB;AACrB,aAAA,sBAA8C;MAiGtD;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,oBAAoB,SAAgC;AAC1D,eAAO,KAAK,sBAAsB,KAAK,oBAAoB,kBAAkB,OAAO,IAAI,KAAK;MACjG;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,aAAK,sBAAsB,KAAK,gBAAgB,WAAW,WAAW;AACtE,YAAI,OAAO,KAAK;AAChB,YAAI,MAAM,KAAK;AACf,cAAM,QAAQ,KAAK;AACnB,cAAM,SAAS,KAAK;AAEpB,YAAI,SAAS;AAEb,YAAI,KAAK,kBAAkB,KAAK,eAAe;AAC3C,cAAI,KAAK,YAAY;AACjB,mBAAO,KAAK,2BAA2B;iBACpC;AACH,oBAAQ,KAAK,2BAA2B;;AAG5C,mBAAS,KAAK,0BAA0B;eACrC;AACH,oBAAU,KAAK,2BAA2B,KAAK,uBAAuB;;AAG1E,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,cAAc,KAAK;AAC3B,kBAAQ,aAAa,KAAK;AAC1B,kBAAQ,gBAAgB,KAAK;AAC7B,kBAAQ,gBAAgB,KAAK;;AAGjC,cAAM,gBAAgB,KAAK,kBAAiB;AAC5C,gBAAQ,YAAY,KAAK,oBAAoB,OAAO;AAEpD,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,gBAAgB;AACrB,gBAAI,KAAK,eAAe;AACpB,sBAAQ,UAAS;AACjB,sBAAQ,IAAI,OAAO,KAAK,0BAA0B,GAAG,KAAK,QAAQ,KAAK,IAAI,IAAI,KAAK,EAAE;AACtF,sBAAQ,KAAI;AACZ,sBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;mBACtC;AACH,sBAAQ,SAAS,MAAM,KAAK,OAAO,SAAS,KAAK,wBAAwB;;iBAE1E;AACH,oBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;;eAE1C;AACH,cAAI,KAAK,gBAAgB;AACrB,gBAAI,KAAK,eAAe;AACpB,sBAAQ,UAAS;AACjB,sBAAQ,IAAI,OAAO,KAAK,sBAAsB,MAAM,KAAK,0BAA0B,GAAG,QAAQ,GAAG,IAAI,KAAK,EAAE;AAC5G,sBAAQ,KAAI;AACZ,sBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;mBACtC;AACH,sBAAQ,SAAS,MAAM,KAAK,QAAQ,KAAK,0BAA0B,MAAM;;iBAE1E;AACH,oBAAQ,SAAS,MAAM,KAAK,OAAO,MAAM;;;AAIjD,YAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,kBAAQ,aAAa;AACrB,kBAAQ,gBAAgB;AACxB,kBAAQ,gBAAgB;;AAI5B,gBAAQ,YAAY,KAAK,UAAU,OAAO;AAC1C,YAAI,KAAK,kBAAkB;AACvB,cAAI,KAAK,YAAY;AACjB,gBAAI,KAAK,gBAAgB;AACrB,kBAAI,KAAK,eAAe;AACpB,wBAAQ,UAAS;AACjB,wBAAQ,IAAI,OAAO,KAAK,0BAA0B,GAAG,MAAM,KAAK,sBAAsB,QAAQ,GAAG,IAAI,KAAK,EAAE;AAC5G,wBAAQ,KAAI;AACZ,wBAAQ,SAAS,MAAM,MAAM,eAAe,OAAO,SAAS,aAAa;qBACtE;AACH,wBAAQ,SAAS,MAAM,MAAM,eAAe,OAAO,SAAS,gBAAgB,KAAK,wBAAwB;;mBAE1G;AACH,sBAAQ,SAAS,MAAM,MAAM,eAAe,OAAO,SAAS,aAAa;;iBAE1E;AACH,gBAAI,KAAK,gBAAgB;AACrB,kBAAI,KAAK,eAAe;AACpB,wBAAQ,UAAS;AACjB,wBAAQ,IAAI,MAAM,MAAM,KAAK,0BAA0B,GAAG,QAAQ,GAAG,IAAI,KAAK,EAAE;AAChF,wBAAQ,KAAI;AACZ,wBAAQ,SAAS,MAAM,KAAK,eAAe,MAAM;qBAC9C;AACH,wBAAQ,SAAS,MAAM,KAAK,eAAe,MAAM;;mBAElD;AACH,sBAAQ,SAAS,MAAM,KAAK,eAAe,MAAM;;;;AAM7D,gBAAQ,YAAY,KAAK,eAAe,KAAK,UAAU,OAAO;AAC9D,YAAI,KAAK,cAAc;AACnB,cAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,aAAa,KAAK;AAC1B,oBAAQ,gBAAgB,KAAK;AAC7B,oBAAQ,gBAAgB,KAAK;;AAEjC,cAAI,KAAK,gBAAgB;AACrB,oBAAQ,UAAS;AACjB,gBAAI,KAAK,YAAY;AACjB,sBAAQ,IAAI,OAAO,KAAK,0BAA0B,GAAG,MAAM,eAAe,QAAQ,GAAG,IAAI,KAAK,EAAE;mBAC7F;AACH,sBAAQ,IAAI,OAAO,eAAe,MAAM,KAAK,0BAA0B,GAAG,QAAQ,GAAG,IAAI,KAAK,EAAE;;AAEpG,oBAAQ,KAAI;AACZ,gBAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,sBAAQ,aAAa;AACrB,sBAAQ,gBAAgB;AACxB,sBAAQ,gBAAgB;;AAE5B,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,OAAM;iBACX;AACH,gBAAI,KAAK,YAAY;AACjB,sBAAQ,SAAS,OAAO,KAAK,qBAAqB,KAAK,gBAAgB,MAAM,eAAe,KAAK,gBAAgB,OAAO,KAAK,wBAAwB;mBAClJ;AACH,sBAAQ,SAAS,KAAK,gBAAgB,OAAO,eAAe,KAAK,gBAAgB,KAAK,KAAK,0BAA0B,KAAK,gBAAgB,MAAM;;AAEpJ,gBAAI,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AAC7D,sBAAQ,aAAa;AACrB,sBAAQ,gBAAgB;AACxB,sBAAQ,gBAAgB;;AAE5B,oBAAQ,cAAc,KAAK;AAC3B,gBAAI,KAAK,YAAY;AACjB,sBAAQ,WAAW,OAAO,KAAK,qBAAqB,KAAK,gBAAgB,MAAM,eAAe,KAAK,gBAAgB,OAAO,KAAK,wBAAwB;mBACpJ;AACH,sBAAQ,WAAW,KAAK,gBAAgB,OAAO,eAAe,KAAK,gBAAgB,KAAK,KAAK,0BAA0B,KAAK,gBAAgB,MAAM;;;;AAI9J,gBAAQ,QAAO;MACnB;MAEO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AAEnC,YAAI,KAAK,oBAAoB;AACzB,8BAAoB,qBAAqB,CAAA;AACzC,eAAK,mBAAmB,UAAU,oBAAoB,kBAAkB;;MAEhF;;MAGO,kBAAkB,kBAAuB,MAA4B;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAE9C,YAAI,iBAAiB,oBAAoB;AACrC,gBAAM,YAAY,MAAM,YAAY,iBAAiB,iBAAiB,mBAAmB,SAAS;AAClG,eAAK,qBAAqB,IAAI,UAAS;AACvC,eAAK,mBAAoB,MAAM,iBAAiB,kBAAkB;;MAE1E;;AA3QA,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AA8BV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAoMd,kBAAc,sBAAsB,MAAM;;;;;ACnS1C,IAYa,eAkFA,eAmEA,YAwEA,aA0FA;AAnUb;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKM,IAAO,gBAAP,MAAoB;;;;;MAStB,YAEWC,OAAY;AAAZ,aAAA,OAAAA;AAVH,aAAA,cAAc,IAAI,WAAU;AAC5B,aAAA,aAA2B,IAAI,MAAK;AAWxC,aAAK,YAAY,oBAAoB,QAAQ;AAC7C,aAAK,YAAY,sBAAsB,QAAQ;AAC/C,aAAK,eAAe,KAAK,gBAAgBA,KAAI;MACjD;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;;MAGA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;;MAGA,IAAW,SAAM;AACb,eAAO,KAAK,aAAa;MAC7B;MAEA,IAAW,OAAO,OAAa;AAC3B,YAAI,KAAK,aAAa,SAAS,SAAS;AACpC;;AAGJ,aAAK,aAAa,OAAO;MAC7B;;;;MAKQ,gBAAgB,MAAY;AAChC,cAAM,eAAe,IAAI,UAAU,aAAa,IAAI;AACpD,qBAAa,QAAQ;AACrB,qBAAa,SAAS;AACtB,qBAAa,eAAe;AAC5B,qBAAa,QAAQ;AACrB,qBAAa,sBAAsB,QAAQ;AAC3C,qBAAa,0BAA0B,QAAQ;AAC/C,qBAAa,OAAO;AACpB,aAAK,YAAY,WAAW,YAAY;AACxC,eAAO;MACX;;;;MAKO,aAAa,YAAkB;AAClC,YAAI,aAAa,KAAK,cAAc,KAAK,WAAW,QAAQ;AACxD;;AAEJ,eAAO,KAAK,WAAW,UAAU;MACrC;;;;MAKO,eAAe,YAAkB;AACpC,YAAI,aAAa,KAAK,cAAc,KAAK,WAAW,QAAQ;AACxD;;AAEJ,aAAK,YAAY,cAAc,KAAK,WAAW,UAAU,CAAC;AAC1D,aAAK,WAAW,OAAO,YAAY,CAAC;MACxC;;AAME,IAAO,gBAAP,cAA6B,cAAa;;;;;;;MAOrC,YAAY,MAAc,OAAO,CAAC,MAAc;MAAE,GAAG,UAAmB,OAAK;AAChF,kBAAU,WAAW;AACrB,cAAM,SAAS,IAAI,SAAQ;AAC3B,eAAO,QAAQ;AACf,eAAO,SAAS;AAChB,eAAO,QAAQ;AACf,eAAO,aAAa;AACpB,eAAO,sBAAsB,QAAQ;AAErC,eAAO,6BAA6B,IAAI,SAAU,OAAK;AACnD,eAAK,KAAK;QACd,CAAC;AAED,cAAM,YAAY,QAAQ,UAAU,QAAQ,MAAM,SAAS,EAAE,cAAc,MAAM,cAAc,KAAI,CAAE;AACrG,kBAAU,SAAS;AACnB,kBAAU,sBAAsB,QAAQ;AACxC,kBAAU,OAAO;AAEjB,aAAK,WAAW,WAAW,SAAS;AACpC,aAAK,UAAU,KAAK,SAAS;AAC7B,eAAO,YAAY;AAEnB,YAAI,KAAK,WAAW,UAAU,KAAK,WAAW,OAAO,QAAQ;AACzD,iBAAO,QAAyB,KAAK,WAAW,OAAO,OAAQ;AAC/D,iBAAO,aAA8B,KAAK,WAAW,OAAO,OAAQ;;MAE5E;;;;MAKO,kBAAkB,YAAoB,OAAa;AAC1C,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,OAAO;MAC/D;;;;MAKO,uBAAuB,YAAoB,OAAa;AAC/C,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,QAAQ;MAChE;;;;MAKO,wBAAwB,YAAoB,OAAa;AAC5D,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAE,QAAQ;MACnD;;;;MAKO,6BAA6B,YAAoB,OAAa;AACtD,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,aAAa;MACpE;;AAME,IAAO,aAAP,cAA0B,cAAa;MAA7C,cAAA;;AACY,aAAA,YAAY;MAkExB;;;;;;;MA1DW,SAAS,OAAe,OAAO,CAAC,MAAa;MAAE,GAAG,UAAU,OAAK;AACpE,cAAM,KAAK,KAAK;AAChB,cAAM,SAAS,IAAI,YAAW;AAC9B,eAAO,OAAO;AACd,eAAO,QAAQ;AACf,eAAO,SAAS;AAChB,eAAO,QAAQ;AACf,eAAO,aAAa;AACpB,eAAO,QAAQ,KAAK;AACpB,eAAO,sBAAsB,QAAQ;AAErC,eAAO,6BAA6B,IAAI,SAAU,OAAK;AACnD,cAAI,OAAO;AACP,iBAAK,EAAE;;QAEf,CAAC;AAED,cAAM,YAAY,QAAQ,UAAU,QAAQ,OAAO,SAAS,EAAE,cAAc,MAAM,cAAc,KAAI,CAAE;AACtG,kBAAU,SAAS;AACnB,kBAAU,sBAAsB,QAAQ;AACxC,kBAAU,OAAO;AACjB,aAAK,WAAW,WAAW,SAAS;AACpC,aAAK,UAAU,KAAK,SAAS;AAC7B,eAAO,YAAY;AAEnB,YAAI,KAAK,WAAW,UAAU,KAAK,WAAW,OAAO,QAAQ;AACzD,iBAAO,QAAyB,KAAK,WAAW,OAAO,OAAQ;AAC/D,iBAAO,aAA8B,KAAK,WAAW,OAAO,OAAQ;;MAE5E;;;;MAKO,kBAAkB,YAAoB,OAAa;AAC1C,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,OAAO;MAC/D;;;;MAKO,uBAAuB,YAAoB,OAAa;AAC/C,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,QAAQ;MAChE;;;;MAKO,wBAAwB,YAAoB,OAAa;AAC5D,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAE,QAAQ;MACnD;;;;MAKO,6BAA6B,YAAoB,OAAa;AACnD,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,aAAa;MACvE;;AAME,IAAO,cAAP,cAA2B,cAAa;;;;;;;;;;;MAWnC,UACH,OAEA,OAAO,CAAC,MAAa;MAAE,GACvB,OAAe,SACf,MAAc,GACd,MAAc,GACd,QAAgB,GAChB,gBAAgB,CAAC,MAAa;AAC1B,eAAO,IAAI;MACf,GAAC;AAED,cAAM,SAAS,IAAI,OAAM;AACzB,eAAO,OAAO;AACd,eAAO,QAAQ;AACf,eAAO,UAAU;AACjB,eAAO,UAAU;AACjB,eAAO,QAAQ;AACf,eAAO,SAAS;AAChB,eAAO,QAAQ;AACf,eAAO,aAAa;AACpB,eAAO,cAAc;AACrB,eAAO,sBAAsB,QAAQ;AACrC,eAAO,OAAO;AACd,eAAO,gBAAgB;AAEvB,eAAO,yBAAyB,IAAI,SAAUC,QAAK;AACnC,iBAAO,OAAQ,SAAS,CAAC,EAAG,OAAO,OAAO,OAAQ,SAAS,CAAC,EAAE,OAAO,OAAO,cAAcA,MAAK,IAAI,MAAM,OAAO;AAC5H,eAAKA,MAAK;QACd,CAAC;AAED,cAAM,YAAY,QAAQ,UAAU,QAAQ,QAAQ,OAAO,cAAc,KAAK,IAAI,MAAM,MAAM,QAAQ,EAAE,cAAc,OAAO,cAAc,MAAK,CAAE;AAClJ,kBAAU,SAAS;AACnB,kBAAU,sBAAsB,QAAQ;AACxC,kBAAU,OAAO;AACjB,kBAAU,SAAS,CAAC,EAAE,OAAO;AAC7B,aAAK,WAAW,WAAW,SAAS;AACpC,aAAK,UAAU,KAAK,SAAS;AAE7B,YAAI,KAAK,WAAW,UAAU,KAAK,WAAW,OAAO,QAAQ;AACzD,iBAAO,QAAyB,KAAK,WAAW,OAAO,OAAQ;AAC/D,iBAAO,aAA8B,KAAK,WAAW,OAAO,OAAQ;;MAE5E;;;;MAKO,kBAAkB,YAAoB,OAAa;AACtD,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAE,OAAO;AAClC,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,OAChD,QAAQ,OAAgB,KAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,QAAQ,MAAM,KAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAE;MAC7H;;;;MAKO,uBAAuB,YAAoB,OAAa;AAC/C,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,QAAQ;MAChE;;;;MAKO,wBAAwB,YAAoB,OAAa;AAC5D,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAE,QAAQ;MACnD;;;;MAKO,6BAA6B,YAAoB,OAAa;AACxD,aAAK,UAAU,UAAU,EAAE,SAAS,CAAC,EAAG,aAAa;MAClE;;AAME,IAAO,iBAAP,cAA8B,UAAS;;;;;;MAiBzC,YAEWD,OAEA,SAA0B,CAAA,GAAE;AAEnC,cAAMA,KAAI;AAJH,aAAA,OAAAA;AAEA,aAAA,SAAA;AAnBH,aAAA,eAAuB;AACvB,aAAA,oBAA4B;AAC5B,aAAA,eAAuB;AACvB,aAAA,YAAoB;AACpB,aAAA,aAAqB;AACrB,aAAA,gBAAwB;AAGxB,aAAA,QAAe,IAAI,MAAK;AAc5B,aAAK,UAAU;AACf,aAAK,YAAY;AACjB,aAAK,SAAS,IAAI,WAAU;AAC5B,aAAK,OAAO,oBAAoB,QAAQ;AACxC,aAAK,OAAO,sBAAsB,QAAQ;AAC1C,aAAK,OAAO,MAAM;AAClB,aAAK,OAAO,OAAO;AACnB,aAAK,OAAO,QAAQ;AACpB,YAAI,OAAO,SAAS,GAAG;AACnB,mBAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,KAAK;AACxC,iBAAK,OAAO,WAAW,OAAO,CAAC,EAAE,UAAU;AAC3C,iBAAK,WAAU;;AAEnB,eAAK,OAAO,WAAW,OAAO,OAAO,SAAS,CAAC,EAAE,UAAU;;AAE/D,aAAK,WAAW,KAAK,MAAM;MAC/B;MAEU,eAAY;AAClB,eAAO;MACX;;MAGA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,aAAK,eAAe;AACpB,aAAK,gBAAe;MACxB;MAEQ,kBAAe;AACnB,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,eAAK,QAAQ,CAAC,EAAE,WAAW,SAAS,CAAC,EAAE,QAAQ,KAAK;;MAE5D;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AACpB,aAAK,gBAAe;MACxB;MAEQ,kBAAe;AACnB,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,CAAC,EAAE,UAAU,QAAQ,KAAK;AACZ,iBAAK,QAAQ,CAAC,EAAG,wBAAwB,GAAG,KAAK,YAAY;;;MAGpH;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAEJ,aAAK,cAAc;AACnB,aAAK,eAAc;MACvB;MAEQ,iBAAc;AAClB,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,CAAC,EAAE,UAAU,QAAQ,KAAK;AACZ,iBAAK,QAAQ,CAAC,EAAG,uBAAuB,GAAG,KAAK,WAAW;;;MAGlH;;MAGA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,aAAK,qBAAoB;MAC7B;MAEQ,uBAAoB;AACxB,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,CAAC,EAAE,UAAU,QAAQ,KAAK;AACZ,iBAAK,QAAQ,CAAC,EAAG,6BAA6B,GAAG,KAAK,iBAAiB;;;MAG9H;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAa;AAC7B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AACjB,aAAK,aAAY;MACrB;MAEQ,eAAY;AAChB,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,eAAK,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE,aAAa,KAAK;;MAEpD;;MAGA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,cAAa;MACtB;MAEQ,gBAAa;AACjB,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,eAAK,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE,SAAS,KAAK;;MAEhD;;MAGA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;MAEA,IAAW,aAAa,OAAa;AACjC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAGJ,aAAK,gBAAgB;AACrB,aAAK,iBAAgB;MACzB;MAEQ,mBAAgB;AACpB,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,eAAK,MAAM,CAAC,EAAE,SAAS,KAAK;;MAEpC;;MAGQ,aAAU;AACd,cAAM,YAAY,IAAI,UAAS;AAC/B,kBAAU,QAAQ;AAClB,kBAAU,SAAS,KAAK;AACxB,kBAAU,sBAAsB,QAAQ;AAExC,cAAM,MAAM,IAAI,UAAS;AACzB,YAAI,QAAQ;AACZ,YAAI,SAAS,KAAK;AAClB,YAAI,sBAAsB,QAAQ;AAClC,YAAI,oBAAoB,QAAQ;AAChC,YAAI,aAAa,KAAK;AACtB,YAAI,QAAQ;AACZ,kBAAU,WAAW,GAAG;AAExB,aAAK,OAAO,WAAW,SAAS;AAChC,aAAK,MAAM,KAAK,SAAS;MAC7B;;;;MAKO,SAAS,OAAoB;AAChC,YAAI,KAAK,QAAQ,SAAS,GAAG;AACzB,eAAK,WAAU;;AAEnB,aAAK,OAAO,WAAW,MAAM,UAAU;AACvC,aAAK,QAAQ,KAAK,KAAK;AACvB,cAAM,WAAW,SAAS,CAAC,EAAE,QAAQ,KAAK;AAC1C,iBAAS,IAAI,GAAG,IAAI,MAAM,UAAU,QAAQ,KAAK;AACF,gBAAO,wBAAwB,GAAG,KAAK,YAAY;AACnD,gBAAO,6BAA6B,GAAG,KAAK,iBAAiB;;MAEhH;;;;MAKO,YAAY,SAAe;AAC9B,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AAClC,aAAK,OAAO,cAAc,MAAM,UAAU;AAC1C,aAAK,QAAQ,OAAO,SAAS,CAAC;AAC9B,YAAI,UAAU,KAAK,MAAM,QAAQ;AAC7B,eAAK,OAAO,cAAc,KAAK,MAAM,OAAO,CAAC;AAC7C,eAAK,MAAM,OAAO,SAAS,CAAC;;MAEpC;;;;;MAMO,cAAc,OAAe,SAAe;AAC/C,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AACtB,cAAM,WAAW,SAAS,CAAC,EAAG,OAAO;MACrD;;;;;;MAOO,QAAQ,OAAe,SAAiB,YAAkB;AAC7D,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AAClC,YAAI,aAAa,KAAK,cAAc,MAAM,UAAU,QAAQ;AACxD;;AAEuC,cAAO,kBAAkB,YAAY,KAAK;MACzF;;;;;MAMO,wBAAwB,SAAiB,YAAkB;AAC9D,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AAClC,YAAI,aAAa,KAAK,cAAc,MAAM,UAAU,QAAQ;AACxD;;AAEJ,cAAM,eAAe,UAAU;MACnC;;;;;;;MAQO,mBAAmB,SAAiB,OAAe,OAAO,MAAK;MAAE,GAAG,UAAmB,OAAK;AAC/F,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AAClB,cAAO,YAAY,OAAO,MAAM,OAAO;MAC3D;;;;;;;MAQO,gBAAgB,SAAiB,OAAe,OAAO,MAAK;MAAE,GAAG,UAAmB,OAAK;AAC5F,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AACrB,cAAO,SAAS,OAAO,MAAM,OAAO;MACrD;;;;;;;;;;;;MAaO,iBACH,SACA,OACA,OAAO,MAAK;MAAE,GACd,OAAe,SACf,MAAc,GACd,MAAc,GACd,QAAgB,GAChB,QAAQ,CAAC,MAAa;AAClB,eAAO,IAAI;MACf,GAAC;AAED,YAAI,UAAU,KAAK,WAAW,KAAK,QAAQ,QAAQ;AAC/C;;AAEJ,cAAM,QAAQ,KAAK,QAAQ,OAAO;AACpB,cAAO,UAAU,OAAO,MAAM,MAAM,KAAK,KAAK,OAAO,KAAK;MAC5E;;;;;;AC7pBJ,IAUa;AAVb;;;AACA;AACA;AACA;AAOM,IAAO,sBAAP,cAAmC,UAAS;MAS9C,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAc;AACpC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,YAAI,CAAC,OAAO;AACR,eAAK,iBAAgB;;AAIzB,aAAK,kBAAkB;AAEvB,cAAM,cAAc,KAAK,KAAK,QAAO;AACrC,cAAM,cAAc,YAAY;AAChC,cAAM,eAAe,YAAY;AAEjC,cAAM,UAAU,KAAK,KAAK,WAAU;AAEpC,cAAM,UAAU,IAAI,QAAQ,GAAG,GAAG,aAAa,YAAY;AAE3D,aAAK,KAAK,kBAAkB;AAE5B,aAAK,KAAK,eAAe,QAAQ,SAAS,OAAO;AAGjD,YAAI,OAAO;AACP,eAAK,gBAAe;AACpB,cAAI,KAAK,YAAW,GAAI;AACpB,iBAAK,aAAY;;;AAIzB,aAAK,kBAAkB;AAEvB,aAAK,KAAK,YAAW;MACzB;MAOA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAY;AACnB,eAAO,KAAK;MAChB;MAEO,eAAe,OAAe,QAAc;AAC/C,aAAK,eAAe;AACpB,aAAK,gBAAgB;AAErB,YAAI,KAAK,YAAW,GAAI;AACpB,cAAI,KAAK,iBAAiB;AACtB,iBAAK,aAAY;;eAElB;AACH,eAAK,WAAW,CAAA;;MAExB;MAEQ,cAAW;AACf,eAAO,KAAK,eAAe,KAAK,KAAK,gBAAgB;MACzD;MAEQ,eAAY;AAChB,aAAK,WAAW,CAAA;AAChB,aAAK,aAAa,KAAK,KAAK,KAAK,gBAAgB,KAAK,YAAY;AAClE,aAAK,mBAAmB,KAAK,SAAS;AACtC,aAAK,WAAW;AAChB,aAAK,UAAU;MACnB;MAEQ,mBAAmB,UAAmB;AAC1C,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,gBAAM,QAAQ,SAAS,CAAC;AAExB,gBAAM,UAAU,KAAK,IAAI,GAAG,KAAK,OAAO,MAAM,YAAY,YAAY,KAAK,YAAY,YAAY,KAAK,YAAY,CAAC,GACjH,QAAQ,KAAK,OAAO,MAAM,YAAY,YAAY,KAAK,YAAY,WAAW,MAAM,gBAAgB,QAAQ,KAAK,KAAK,YAAY,GAClI,QAAQ,KAAK,OAAO,MAAM,YAAY,WAAW,KAAK,YAAY,UAAU,MAAM,gBAAgB,SAAS,KAAK,KAAK,aAAa;AACtI,cAAI,UAAU,KAAK,IAAI,GAAG,KAAK,OAAO,MAAM,YAAY,WAAW,KAAK,YAAY,WAAW,KAAK,aAAa,CAAC;AAElH,iBAAO,WAAW,OAAO;AACrB,qBAAS,IAAI,SAAS,KAAK,OAAO,EAAE,GAAG;AACnC,oBAAM,SAAS,UAAU,KAAK,aAAa;AAC3C,kBAAI,OAAO,KAAK,SAAS,MAAM;AAE/B,kBAAI,CAAC,MAAM;AACP,uBAAO,CAAA;AACP,qBAAK,SAAS,MAAM,IAAI;;AAG5B,mBAAK,KAAK,KAAK;;AAEnB;;AAGJ,cAAI,iBAAiB,aAAa,MAAM,UAAU,SAAS,GAAG;AAC1D,iBAAK,mBAAmB,MAAM,SAAS;;;MAGnD;;MAGQ,kBAAe;AACnB,cAAM,OAAO,KAAK,eAAe,GAC7B,MAAM,KAAK,cAAc;AAE7B,aAAK,oBAAoB,QAAQ;AACjC,aAAK,oBAAoB,OAAO;AAChC,aAAK,gBAAgB,QAAQ;AAC7B,aAAK,gBAAgB,OAAO;AAE5B,aAAK,YAAY,sBAAsB,KAAK,oBAAoB;AAChE,aAAK,YAAY,qBAAqB,KAAK,oBAAoB;AAC/D,aAAK,YAAY,WAAW,KAAK,gBAAgB;AACjD,aAAK,YAAY,UAAU,KAAK,gBAAgB;AAEhD,aAAK,wBAAwB,KAAK,WAAW,MAAM,GAAG;MAC1D;MAEQ,wBAAwB,UAAqB,MAAc,KAAW;AAC1E,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,gBAAM,QAAQ,SAAS,CAAC;AAExB,gBAAM,gBAAgB,QAAQ;AAC9B,gBAAM,gBAAgB,OAAO;AAE7B,gBAAM,YAAY,YAAY,MAAM,gBAAgB;AACpD,gBAAM,YAAY,WAAW,MAAM,gBAAgB;AAEnD,cAAI,iBAAiB,aAAa,MAAM,UAAU,SAAS,GAAG;AAC1D,iBAAK,wBAAwB,MAAM,WAAW,MAAM,GAAG;;;MAGnE;MAEQ,mBAAgB;AACpB,cAAM,OAAO,KAAK,eAAe,GAC7B,MAAM,KAAK,cAAc;AAE7B,aAAK,oBAAoB,OAAO,KAAK,YAAY,sBAAsB;AACvE,aAAK,oBAAoB,MAAM,KAAK,YAAY,qBAAqB;AACrE,aAAK,gBAAgB,OAAO,KAAK,YAAY,WAAW;AACxD,aAAK,gBAAgB,MAAM,KAAK,YAAY,UAAU;MAC1D;;;;;MAMA,YAAYE,OAAa;AACrB,cAAMA,KAAI;AAnKN,aAAA,kBAAkB;AA8ClB,aAAA,eAAuB;AACvB,aAAA,gBAAwB;AACxB,aAAA,WAA8C,CAAA;MAoHtD;MAEU,eAAY;AAClB,eAAO;MACX;;;;MAKU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,iBAAiB;AAEtB,aAAK,oBAAoB,OAAO,KAAK,gBAAgB;AACrD,aAAK,oBAAoB,MAAM,KAAK,gBAAgB;AAEpD,aAAK,oBAAoB,QAAQ,cAAc;AAC/C,aAAK,oBAAoB,SAAS,cAAc;MACpD;;;;MAKO,QAAQ,eAAwB,SAAgC;AACnE,YAAI,KAAK,iBAAiB;AACtB,eAAK,eAAc;AACnB,iBAAO;;AAGX,eAAO,MAAM,QAAQ,eAAe,OAAO;MAC/C;MAEQ,gBAAgB,UAAqB,MAAc,KAAW;AAClE,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,gBAAM,QAAQ,SAAS,CAAC;AAExB,gBAAM,gBAAgB,OAAO,MAAM,YAAY,YAAY;AAC3D,gBAAM,gBAAgB,MAAM,MAAM,YAAY,WAAW;AACzD,gBAAM,aAAa;AAEnB,cAAI,iBAAiB,aAAa,MAAM,UAAU,SAAS,GAAG;AAC1D,iBAAK,gBAAgB,MAAM,WAAW,MAAM,GAAG;;;MAG3D;MAEQ,2BAA2B,MAAc,KAAa,YAAoB,WAAiB;AAC/F,cAAM,UAAU,KAAK,IAAI,GAAG,KAAK,MAAM,CAAC,OAAO,KAAK,YAAY,CAAC,GAC7D,QAAQ,KAAK,OAAO,CAAC,OAAO,KAAK,eAAe,QAAQ,KAAK,KAAK,YAAY,GAC9E,QAAQ,KAAK,OAAO,CAAC,MAAM,KAAK,eAAe,SAAS,KAAK,KAAK,aAAa;AACnF,YAAI,UAAU,KAAK,IAAI,GAAG,KAAK,MAAM,CAAC,MAAM,KAAK,aAAa,CAAC;AAE/D,eAAO,WAAW,OAAO;AACrB,mBAAS,IAAI,SAAS,KAAK,OAAO,EAAE,GAAG;AACnC,kBAAM,SAAS,UAAU,KAAK,aAAa,GACvC,OAAO,KAAK,SAAS,MAAM;AAE/B,gBAAI,MAAM;AACN,uBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAClC,sBAAM,QAAQ,KAAK,CAAC;AACpB,sBAAM,gBAAgB,OAAO,MAAM,YAAY,YAAY;AAC3D,sBAAM,gBAAgB,MAAM,MAAM,YAAY,WAAW;AACzD,sBAAM,aAAa;;;;AAI/B;;MAER;;;;MAKO,MAAM,SAAkC,sBAA8B;AACzE,YAAI,CAAC,KAAK,iBAAiB;AACvB,gBAAM,MAAM,SAAS,oBAAoB;AACzC;;AAGJ,aAAK,WAAW,OAAO;AAEvB,YAAI,KAAK,cAAc;AACnB,eAAK,iBAAiB,OAAO;;AAGjC,cAAM,OAAO,KAAK,eAAe,GAC7B,MAAM,KAAK,cAAc;AAE7B,YAAI,KAAK,YAAW,GAAI;AACpB,cAAI,KAAK,aAAa,QAAQ,KAAK,YAAY,MAAM;AACjD,iBAAK,2BAA2B,KAAK,UAAU,KAAK,SAAS,MAAM,GAAG;AACtE,iBAAK,2BAA2B,MAAM,KAAK,MAAM,GAAG;iBACjD;AACH,iBAAK,gBAAgB,KAAK,WAAW,MAAM,GAAG;;eAE/C;AACH,eAAK,gBAAgB,KAAK,WAAW,MAAM,GAAG;;AAGlD,aAAK,WAAW;AAChB,aAAK,UAAU;AAEf,mBAAW,SAAS,KAAK,WAAW;AAChC,cAAI,CAAC,MAAM,gBAAgB,KAAK,cAAc,GAAG;AAC7C;;AAEJ,gBAAM,QAAQ,SAAS,KAAK,cAAc;;MAElD;MAEU,eAAY;AAClB,YAAI,KAAK,iBAAiB;AACtB,gBAAM,aAAY;AAClB;;AAGJ,YAAI,WAAW,KAAK;AACpB,YAAI,YAAY,KAAK;AACrB,mBAAW,SAAS,KAAK,UAAU;AAC/B,cAAI,CAAC,MAAM,aAAa,MAAM,eAAe;AACzC;;AAGJ,cAAI,MAAM,wBAAwB,QAAQ,6BAA6B;AACnE,kBAAM,YAAY,KAAK,gBAAgB,OAAO,MAAM,gBAAgB,IAAI;;AAG5E,cAAI,MAAM,sBAAsB,QAAQ,2BAA2B;AAC/D,kBAAM,WAAW,KAAK,gBAAgB,MAAM,MAAM,gBAAgB,GAAG;;AAGzE,qBAAW,KAAK,IAAI,UAAU,MAAM,gBAAgB,OAAO,KAAK,gBAAgB,OAAO,MAAM,gBAAgB,QAAQ,MAAM,oBAAoB;AAC/I,sBAAY,KAAK,IAAI,WAAW,MAAM,gBAAgB,MAAM,KAAK,gBAAgB,MAAM,MAAM,gBAAgB,SAAS,MAAM,qBAAqB;;AAGrJ,YAAI,KAAK,gBAAgB,UAAU,UAAU;AACzC,eAAK,OAAO,cAAc,UAAU,aAAa,cAAc;AAC/D,eAAK,gBAAgB,QAAQ;AAC7B,eAAK,iBAAiB;AACtB,eAAK,WAAW;;AAGpB,YAAI,KAAK,gBAAgB,WAAW,WAAW;AAC3C,eAAK,QAAQ,cAAc,WAAW,aAAa,cAAc;AACjE,eAAK,gBAAgB,SAAS;AAC9B,eAAK,iBAAiB;AACtB,eAAK,WAAW;;AAGpB,cAAM,aAAY;MACtB;;;;;;ICzTS;;;;AAfb;AAEA;AAEA;AAKA;AACA;AAKM,IAAO,YAAP,cAAyB,WAAU;;MASrC,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AACpB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAA6B;AACvD,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAGJ,aAAK,sBAAsB;AAC3B,aAAK,aAAY;MACrB;;MAIA,IAAW,wBAAqB;AAC5B,eAAO,KAAK;MAChB;MAEA,IAAW,sBAAsB,QAAe;AAC5C,aAAK,yBAAyB;MAClC;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAhEX,aAAA,cAAc;AACd,aAAA,eAAe;AACf,aAAA,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AACrC,aAAA,yBAAyB;AACzB,aAAA,sBAA8C;MA8DtD;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,qBAAkB;AACxB,YAAI,iBAAiB;AACrB,YAAI,KAAK,YAAY,SAAS;AAC1B,2BAAiB,KAAK,YAAY,SAAS,KAAK,KAAK;eAClD;AACH,2BAAiB,KAAK,0BAA0B,KAAK,YAAY,SAAS,KAAK,KAAK;;AAExF,eAAO;MACX;MAEQ,oBAAoB,SAAgC;AACxD,eAAO,KAAK,sBAAsB,KAAK,oBAAoB,kBAAkB,OAAO,IAAI,KAAK;MACjG;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AACzB,aAAK,sBAAsB,WAAW;AACtC,cAAM,OAAO,KAAK;AAElB,cAAM,gBAAgB,KAAK,kBAAiB;AAC5C,gBAAQ,YAAY,KAAK,oBAAoB,OAAO;AAEpD,gBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;AAG7H,gBAAQ,YAAY,KAAK,UAAU,OAAO;AAG1C,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa,OAAO,OAAO,KAAK;AACrC,eAAK,aAAa,MAAM,KAAK,gBAAgB,MAAM;AACnD,eAAK,aAAa,QAAQ,KAAK,gBAAgB;AAC/C,eAAK,aAAa,SAAS,KAAK;eAC7B;AACH,eAAK,aAAa,OAAO,KAAK,gBAAgB,OAAO;AACrD,eAAK,aAAa,MAAM,KAAK,gBAAgB;AAC7C,eAAK,aAAa,QAAQ,KAAK;AAC/B,eAAK,aAAa,SAAS,KAAK,gBAAgB;;AAGpD,gBAAQ,SAAS,KAAK,aAAa,MAAM,KAAK,aAAa,KAAK,KAAK,aAAa,OAAO,KAAK,aAAa,MAAM;AAEjH,gBAAQ,QAAO;MACnB;;;;MASU,wBAAwB,GAAW,GAAS;AAClD,YAAI,KAAK,YAAY,GAAG;AACpB,eAAK,uBAAuB,qBAAqB,GAAG,GAAG,KAAK,oBAAoB;AAChF,cAAI,KAAK,qBAAqB;AAC9B,cAAI,KAAK,qBAAqB;;AAGlC,cAAM,OAAO,KAAK,yBAAyB,KAAK;AAEhD,YAAI,KAAK,QAAQ;AACb,eAAK,SAAS;AACd,eAAK,WAAW;AAChB,eAAK,WAAW;AAGhB,cACI,IAAI,KAAK,aAAa,QACtB,IAAI,KAAK,aAAa,OAAO,KAAK,aAAa,SAC/C,IAAI,KAAK,aAAa,OACtB,IAAI,KAAK,aAAa,MAAM,KAAK,aAAa,QAChD;AACE,gBAAI,KAAK,YAAY;AACjB,mBAAK,QAAQ,KAAK,WAAW,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,WAAW,KAAK,UAAU,KAAK;mBACnH;AACH,mBAAK,QAAQ,KAAK,WAAY,IAAI,KAAK,gBAAgB,QAAQ,KAAK,gBAAgB,SAAU,KAAK,UAAU,KAAK;;;;AAM9H,YAAI,QAAQ;AACZ,YAAI,KAAK,YAAY;AACjB,kBAAQ,GAAG,IAAI,KAAK,aAAa,KAAK,gBAAgB,SAAS,KAAK;eACjE;AACH,mBAAS,IAAI,KAAK,aAAa,KAAK,gBAAgB,QAAQ,KAAK;;AAGrE,aAAK,SAAS,OAAO,SAAS,KAAK,UAAU,KAAK;AAElD,aAAK,WAAW;AAChB,aAAK,WAAW;MACpB;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,aAAK,SAAS;AAEd,eAAO,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE;MAC/E;MAEO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AAEnC,YAAI,KAAK,oBAAoB;AACzB,8BAAoB,qBAAqB,CAAA;AACzC,eAAK,mBAAmB,UAAU,oBAAoB,kBAAkB;;MAEhF;MAEO,kBAAkB,qBAA0B,MAA4B;AAC3E,cAAM,kBAAkB,qBAAqB,IAAI;AAEjD,YAAI,oBAAoB,oBAAoB;AACxC,gBAAM,YAAY,MAAM,YAAY,iBAAiB,oBAAoB,mBAAmB,SAAS;AACrG,eAAK,qBAAqB,IAAI,UAAS;AACvC,eAAK,mBAAoB,MAAM,oBAAoB,kBAAkB;;MAE7E;;AAxLA,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AA8BV,eAAA;MADC,UAAS;;AA+Id,kBAAc,yBAAyB,SAAS;;;;;ICvMnC;;;;AAXb;AAGA;AAEA;AAMM,IAAO,iBAAP,cAA8B,WAAU;;MAiB1C,IAAW,wBAAqB;AAC5B,eAAO,KAAK;MAChB;MAEA,IAAW,sBAAsB,QAAe;AAC5C,aAAK,yBAAyB;MAClC;;;;MAKA,IAAW,kBAAe;AACtB,eAAO,KAAK;MAChB;MAEA,IAAW,gBAAgB,OAAY;AACnC,YAAI,KAAK,yBAAyB,OAAO;AACrC;;AAGJ,aAAK,uBAAuB;AAE5B,YAAI,KAAK,cAAc,KAAK,gCAAgC,GAAG;AAC3D,cAAI,CAAC,MAAM,UAAU;AACjB,kBAAM,wBAAwB,QAAQ,MAAK;AACvC,oBAAM,eAAe,MAAM,UAAU,KAAK,6BAA6B,IAAI;AAC3E,mBAAK,mBAAmB;AACxB,kBAAI,CAAC,aAAa,UAAU;AACxB,6BAAa,wBAAwB,QAAQ,MAAK;AAC9C,uBAAK,aAAY;gBACrB,CAAC;;AAEL,mBAAK,aAAY;YACrB,CAAC;iBACE;AACH,iBAAK,mBAAmB,MAAM,UAAU,KAAK,6BAA6B,IAAI;AAC9E,iBAAK,aAAY;;eAElB;AACH,eAAK,mBAAmB;AACxB,cAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,kBAAM,wBAAwB,QAAQ,MAAK;AACvC,mBAAK,aAAY;YACrB,CAAC;;AAGL,eAAK,aAAY;;MAEzB;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAY;AAC9B,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AAEvB,YAAI,KAAK,cAAc,KAAK,gCAAgC,GAAG;AAC3D,cAAI,CAAC,MAAM,UAAU;AACjB,kBAAM,wBAAwB,QAAQ,MAAK;AACvC,oBAAM,eAAe,MAAM,UAAU,CAAC,KAAK,6BAA6B,IAAI;AAC5E,mBAAK,cAAc;AACnB,kBAAI,CAAC,aAAa,UAAU;AACxB,6BAAa,wBAAwB,QAAQ,MAAK;AAC9C,uBAAK,aAAY;gBACrB,CAAC;;AAEL,mBAAK,aAAY;YACrB,CAAC;iBACE;AACH,iBAAK,cAAc,MAAM,UAAU,CAAC,KAAK,6BAA6B,IAAI;AAC1E,iBAAK,aAAY;;eAElB;AACH,eAAK,cAAc;AACnB,cAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,kBAAM,wBAAwB,QAAQ,MAAK;AACvC,mBAAK,aAAY;YACrB,CAAC;;AAGL,eAAK,aAAY;;MAEzB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AAEpB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAGJ,aAAK,eAAe;AAEpB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,aAAK,kBAAkB;AAEvB,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AA/JX,aAAA,eAAuB;AACvB,aAAA,eAAuB;AACvB,aAAA,kBAA0B;AAC1B,aAAA,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AACrC,aAAA,yBAAyB;AAI1B,aAAA,8BAA8B;MAyJrC;MAEU,eAAY;AAClB,eAAO;MACX;MAEU,qBAAkB;AACxB,YAAI,iBAAiB;AACrB,YAAI,KAAK,YAAY,SAAS;AAC1B,2BAAiB,KAAK,YAAY,SAAS,KAAK,KAAK;eAClD;AACH,2BAAiB,KAAK,0BAA0B,KAAK,YAAY,SAAS,KAAK,KAAK;;AAExF,eAAO;MACX;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAEzB,aAAK,sBAAsB,WAAW;AACtC,cAAM,gBAAgB,KAAK,kBAAiB;AAC5C,cAAM,OAAO,KAAK;AAClB,cAAM,MAAM,KAAK;AACjB,cAAM,QAAQ,KAAK;AACnB,cAAM,SAAS,KAAK;AAGpB,YAAI,KAAK,kBAAkB;AACvB,eAAK,aAAa,eAAe,MAAM,KAAK,OAAO,MAAM;AACzD,cAAI,KAAK,YAAY;AACjB,iBAAK,aAAa,eAAe,OAAO,SAAS,IAAI,KAAK,mBAAmB,KAAK,KAAK,gBAAgB,KAAK,QAAQ,KAAK,iBAAiB,MAAM;AAChJ,iBAAK,aAAa,UAAU,KAAK;AACjC,iBAAK,iBAAiB,gBAAgB,SAAS,KAAK,YAAY;iBAC7D;AACH,iBAAK,aAAa,eAAe,KAAK,gBAAgB,MAAM,MAAM,UAAU,IAAI,KAAK,mBAAmB,KAAK,OAAO,SAAS,KAAK,eAAe;AACjJ,iBAAK,aAAa,SAAS,KAAK;AAChC,iBAAK,iBAAiB,gBAAgB,SAAS,KAAK,YAAY;;AAEpE,eAAK,iBAAiB,MAAM,OAAO;;AAIvC,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa,eACd,OAAO,KAAK,sBAAsB,KAAK,gBAAgB,SAAS,IAAI,KAAK,gBAAgB,KACzF,KAAK,gBAAgB,MAAM,eAC3B,KAAK,gBAAgB,QAAQ,KAAK,cAClC,KAAK,wBAAwB;eAE9B;AACH,eAAK,aAAa,eACd,KAAK,gBAAgB,OAAO,eAC5B,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,UAAU,IAAI,KAAK,gBAAgB,KACnF,KAAK,0BACL,KAAK,gBAAgB,SAAS,KAAK,YAAY;;AAIvD,YAAI,KAAK,aAAa;AAClB,eAAK,YAAY,gBAAgB,SAAS,KAAK,YAAY;AAC3D,eAAK,YAAY,MAAM,OAAO;;AAGlC,gBAAQ,QAAO;MACnB;;;;MASU,wBAAwB,GAAW,GAAS;AAClD,YAAI,KAAK,YAAY,GAAG;AACpB,eAAK,uBAAuB,qBAAqB,GAAG,GAAG,KAAK,oBAAoB;AAChF,cAAI,KAAK,qBAAqB;AAC9B,cAAI,KAAK,qBAAqB;;AAGlC,cAAM,OAAO,KAAK,yBAAyB,KAAK;AAEhD,YAAI,KAAK,QAAQ;AACb,eAAK,SAAS;AACd,eAAK,WAAW;AAChB,eAAK,WAAW;AAGhB,cACI,IAAI,KAAK,aAAa,QACtB,IAAI,KAAK,aAAa,OAAO,KAAK,aAAa,SAC/C,IAAI,KAAK,aAAa,OACtB,IAAI,KAAK,aAAa,MAAM,KAAK,aAAa,QAChD;AACE,gBAAI,KAAK,YAAY;AACjB,mBAAK,QAAQ,KAAK,WAAW,KAAK,IAAI,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,WAAW,KAAK,UAAU,KAAK;mBACnH;AACH,mBAAK,QAAQ,KAAK,WAAY,IAAI,KAAK,gBAAgB,QAAQ,KAAK,gBAAgB,SAAU,KAAK,UAAU,KAAK;;;;AAM9H,YAAI,QAAQ;AACZ,YAAI,KAAK,YAAY;AACjB,kBAAQ,GAAG,IAAI,KAAK,aAAa,KAAK,gBAAgB,SAAS,KAAK;eACjE;AACH,mBAAS,IAAI,KAAK,aAAa,KAAK,gBAAgB,QAAQ,KAAK;;AAGrE,aAAK,SAAS,OAAO,SAAS,KAAK,UAAU,KAAK;AAElD,aAAK,WAAW;AAChB,aAAK,WAAW;MACpB;MAEO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,aAAK,SAAS;AAEd,eAAO,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE;MAC/E;;AAnRO,eAAA;MADN,UAAS;;AAKV,eAAA;MADC,UAAS;;;;;;ICRD;;;;AAjBb;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAKM,IAAO,eAAP,cAA4B,UAAS;;;;MAkCvC,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;;;;;;MAOO,WAAW,SAA0B;AACxC,YAAI,CAAC,SAAS;AACV,iBAAO;;AAGX,aAAK,QAAQ,WAAW,OAAO;AAE/B,eAAO;MACX;;;;;;MAOO,cAAc,SAAgB;AACjC,aAAK,QAAQ,cAAc,OAAO;AAClC,eAAO;MACX;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK,QAAQ;MACxB;MAEO,gCAA6B;AAChC,mBAAW,SAAS,KAAK,WAAW;AAChC,gBAAM,mBAAkB;;MAEhC;;;;;;MAOA,IAAW,iBAAc;AACrB,eAAO,KAAK,QAAQ;MACxB;MAEA,IAAW,eAAe,OAAc;AACpC,aAAK,QAAQ,iBAAiB;MAClC;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK,QAAQ;MACxB;;MAGA,IAAW,eAAY;AACnB,eAAO,KAAK,QAAQ;MACxB;;;;;;;;;;;;MAaO,eAAe,OAAe,QAAc;AAC/C,aAAK,QAAQ,eAAe,OAAO,MAAM;MAC7C;;;;MAQA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAc;AACxC,aAAK,MAAM,iBAAiB,GAAG,QAAQ,KAAK,WAAW,GAAG,IAAI;AAC9D,aAAK,eAAe,YAAY;AAChC,aAAK,sBAAsB;MAC/B;;;;MAKA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAc;AACtC,aAAK,MAAM,oBAAoB,GAAG,QAAQ,KAAK,WAAW,GAAG,IAAI;AACjE,aAAK,aAAa,YAAY;AAC9B,aAAK,oBAAoB;MAC7B;;;;;;MAOA,YAAYC,OAAe,cAAsB;AAC7C,cAAMA,KAAI;AA3IN,aAAA,WAAmB;AAEnB,aAAA,iBAA0B;AAC1B,aAAA,kBAA0B;AAK1B,aAAA,eAAuB;AACvB,aAAA,eAAuB;AACvB,aAAA,kBAA0B;AAC1B,aAAA,4BAAoC;AACpC,aAAA,0BAAkC;AAClC,aAAA,0BAAkC;AAClC,aAAA,2BAAmC;AA0FnC,aAAA,sBAA+B;AAC/B,aAAA,oBAA6B;AAoCjC,aAAK,eAAe,eAAe,eAAe;AAElD,aAAK,kBAAkB,IAAI,MAAK;AAC5B,eAAK,oBAAoB,QAAQ,KAAK;AACtC,eAAK,kBAAkB,QAAQ,KAAK;AACpC,eAAK,WAAW,QAAQ,KAAK;QACjC,CAAC;AAED,aAAK,yBAAyB,IAAI,MAAK;AACnC,eAAK,iBAAiB;QAC1B,CAAC;AAED,aAAK,uBAAuB,IAAI,MAAK;AACjC,eAAK,iBAAiB;QAC1B,CAAC;AAED,aAAK,QAAQ,IAAI,KAAI;AACrB,YAAI,KAAK,cAAc;AACnB,eAAK,iBAAiB,IAAI,eAAc;AACxC,eAAK,eAAe,IAAI,eAAc;eACnC;AACH,eAAK,iBAAiB,IAAI,UAAS;AACnC,eAAK,eAAe,IAAI,UAAS;;AAGrC,aAAK,UAAU,IAAI,oBAAoB,qBAAqB;AAC5D,aAAK,QAAQ,sBAAsB,QAAQ;AAC3C,aAAK,QAAQ,oBAAoB,QAAQ;AAEzC,aAAK,MAAM,oBAAoB,CAAC;AAChC,aAAK,MAAM,oBAAoB,GAAG,IAAI;AACtC,aAAK,MAAM,iBAAiB,CAAC;AAC7B,aAAK,MAAM,iBAAiB,GAAG,IAAI;AAEnC,cAAM,WAAW,KAAK,KAAK;AAC3B,aAAK,MAAM,WAAW,KAAK,SAAS,GAAG,CAAC;AAExC,aAAK,oBAAoB,IAAI,UAAS;AACtC,aAAK,kBAAkB,sBAAsB,QAAQ;AACrD,aAAK,kBAAkB,oBAAoB,QAAQ;AACnD,aAAK,kBAAkB,YAAY;AACnC,aAAK,MAAM,WAAW,KAAK,mBAAmB,GAAG,CAAC;AAClD,aAAK,QAAQ,KAAK,cAAc,KAAK,mBAAmB,MAAM,KAAK,EAAE;AAErE,aAAK,sBAAsB,IAAI,UAAS;AACxC,aAAK,oBAAoB,sBAAsB,QAAQ;AACvD,aAAK,oBAAoB,oBAAoB,QAAQ;AACrD,aAAK,oBAAoB,YAAY;AACrC,aAAK,MAAM,WAAW,KAAK,qBAAqB,GAAG,CAAC;AACpD,aAAK,QAAQ,KAAK,gBAAgB,KAAK,qBAAqB,OAAO,CAAC;AAEpE,aAAK,aAAa,IAAI,UAAS;AAC/B,aAAK,WAAW,YAAY;AAC5B,aAAK,MAAM,WAAW,KAAK,YAAY,GAAG,CAAC;AAG3C,YAAI,CAAC,KAAK,cAAc;AACpB,eAAK,WAAW;AAChB,eAAK,gBAAgB;;MAE7B;;MAGO,cAAW;AACd,aAAK,QAAQ,QAAQ;AACrB,aAAK,QAAQ,SAAS;MAC1B;MAEU,eAAY;AAClB,eAAO;MACX;MAEQ,oBAAiB;AACrB,cAAM,QAAQ,KAAK,KAAK;AAExB,aAAK,QAAQ,oBAAoB,KAAK,gBAAgB,SAAS,KAAK,aAAa,aAAa,KAAK,mBAAmB,KAAK,WAAW,QAAQ,KAAK,IAAI,KAAK;AAC5J,aAAK,QAAQ,qBAAqB,KAAK,gBAAgB,UAAU,KAAK,eAAe,aAAa,KAAK,qBAAqB,KAAK,WAAW,QAAQ,KAAK,IAAI,KAAK;AAElK,aAAK,eAAe,KAAK,QAAQ;AACjC,aAAK,gBAAgB,KAAK,QAAQ;MACtC;MAEU,sBAAsB,eAAwB,SAAgC;AACpF,cAAM,sBAAsB,eAAe,OAAO;AAElD,aAAK,kBAAiB;MAC1B;MAEU,eAAY;AAClB,cAAM,aAAY;AAElB,aAAK,gBAAe;AAEpB,aAAK,mBAAmB,KAAK;MACjC;;;;;MAOA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAGJ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAGZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAGZ,aAAK,kBAAkB;MAC3B;;MAIA,IAAW,mBAAgB;AACvB,eAAO,KAAK,oBAAoB;MACpC;MAEA,IAAW,iBAAiB,OAAa;AACrC,YAAI,KAAK,oBAAoB,eAAe,OAAO;AAC/C;;AAEJ,aAAK,oBAAoB,aAAa;AACtC,aAAK,kBAAkB,aAAa;MACxC;;MAIA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAa;AAC7B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AACjB,aAAK,eAAe,QAAQ;AAC5B,aAAK,aAAa,QAAQ;MAC9B;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAY;AAC9B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AACjB,cAAM,KAAqB,KAAK;AAChC,cAAM,KAAqB,KAAK;AAChC,WAAG,aAAa;AAChB,WAAG,aAAa;MACpB;;MAGA,IAAW,uBAAoB;AAC3B,eAAO,KAAK;MAChB;MAEA,IAAW,qBAAqB,OAAY;AACxC,YAAI,KAAK,wBAAwB,OAAO;AACpC;;AAGJ,aAAK,sBAAsB;AAC3B,cAAM,KAAqB,KAAK;AAChC,WAAG,aAAa;MACpB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAY;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAGJ,aAAK,oBAAoB;AACzB,cAAM,KAAqB,KAAK;AAChC,WAAG,aAAa;MACpB;;MAIA,IAAW,UAAO;AACd,eAAO,KAAK;MAChB;MAEA,IAAW,QAAQ,OAAa;AAC5B,YAAI,KAAK,aAAa,OAAO;AACzB;;AAGJ,aAAK,WAAW;AAChB,aAAK,aAAY;AAEjB,YAAI,KAAK,eAAe,WAAW;AAC/B,eAAK,MAAM,iBAAiB,GAAG,KAAK,UAAU,IAAI;;AAEtD,YAAI,KAAK,aAAa,WAAW;AAC7B,eAAK,MAAM,oBAAoB,GAAG,KAAK,UAAU,IAAI;;MAE7D;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,YAAI,SAAS,GAAG;AACZ,kBAAQ;;AAEZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAEZ,aAAK,eAAe;AACpB,cAAM,KAAqB,KAAK;AAChC,cAAM,KAAqB,KAAK;AAChC,WAAG,cAAc;AACjB,WAAG,cAAc;AACjB,aAAK,aAAY;MACrB;;MAGA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MAEA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,YAAI,SAAS,GAAG;AACZ,kBAAQ;;AAEZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAEZ,aAAK,eAAe;AACpB,cAAM,KAAqB,KAAK;AAChC,cAAM,KAAqB,KAAK;AAChC,WAAG,cAAc;AACjB,WAAG,cAAc;AACjB,aAAK,aAAY;MACrB;;MAGA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,YAAI,KAAK,oBAAoB,OAAO;AAChC;;AAEJ,YAAI,SAAS,GAAG;AACZ,kBAAQ;;AAEZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAEZ,aAAK,kBAAkB;AACvB,cAAM,KAAqB,KAAK;AAChC,cAAM,KAAqB,KAAK;AAChC,WAAG,iBAAiB;AACpB,WAAG,iBAAiB;AACpB,aAAK,aAAY;MACrB;;MAGA,IAAW,2BAAwB;AAC/B,eAAO,KAAK;MAChB;MAEA,IAAW,yBAAyB,OAAa;AAC7C,YAAI,KAAK,8BAA8B,OAAO;AAC1C;;AAEJ,YAAI,SAAS,GAAG;AACZ,kBAAQ;;AAEZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAEZ,aAAK,4BAA4B;AACjC,cAAM,KAAqB,KAAK;AAChC,WAAG,iBAAiB;AACpB,aAAK,aAAY;MACrB;;MAGA,IAAW,yBAAsB;AAC7B,eAAO,KAAK;MAChB;MAEA,IAAW,uBAAuB,OAAa;AAC3C,YAAI,KAAK,4BAA4B,OAAO;AACxC;;AAEJ,YAAI,SAAS,GAAG;AACZ,kBAAQ;;AAEZ,YAAI,QAAQ,GAAG;AACX,kBAAQ;;AAEZ,aAAK,0BAA0B;AAC/B,cAAM,KAAqB,KAAK;AAChC,WAAG,iBAAiB;AACpB,aAAK,aAAY;MACrB;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAa;AAClC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AACtB,cAAM,KAAgB,KAAK;AAC3B,cAAM,KAAgB,KAAK;AAC3B,WAAG,aAAa;AAChB,WAAG,aAAa;AAChB,aAAK,WAAW,aAAa;MACjC;;MAGA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MAEA,IAAW,SAAS,OAAY;AAC5B,aAAK,sBAAsB;AAC3B,cAAM,KAAqB,KAAK;AAChC,cAAM,KAAqB,KAAK;AAChC,WAAG,kBAAkB;AACrB,WAAG,kBAAkB;MACzB;;MAGA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAY;AACtC,aAAK,gCAAgC;AACrC,cAAM,KAAqB,KAAK;AAChC,WAAG,kBAAkB;MACzB;;MAGA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MAEA,IAAW,iBAAiB,OAAY;AACpC,aAAK,8BAA8B;AACnC,cAAM,KAAqB,KAAK;AAChC,WAAG,kBAAkB;MACzB;MAEQ,mBAAmB,QAAQ,MAAI;AACnC,cAAM,QAAQ,KAAK,KAAK;AACxB,cAAM,sBAAsB,KAAK,QAAQ,gBAAgB;AACzD,cAAM,uBAAuB,KAAK,QAAQ,gBAAgB;AAE1D,YAAI,CAAC,SAAS,KAAK,4BAA4B,uBAAuB,KAAK,6BAA6B,sBAAsB;AAC1H;;AAGJ,aAAK,0BAA0B;AAC/B,aAAK,2BAA2B;AAEhC,cAAM,WAAW,KAAK,eAAe;AACrC,cAAM,UAAU,KAAK,gBAAgB;AAErC,cAAM,UAAW,KAAK,eAAe,QAAQ,QAAS,WAAW;AACjE,cAAM,SAAU,KAAK,aAAa,QAAQ,QAAS,UAAU;AAE7D,YAAI,YAAY,KAAK,QAAQ,MAAM;AAC/B,eAAK,QAAQ,OAAO;AACpB,cAAI,CAAC,KAAK,gBAAgB;AACtB,iBAAK,iBAAiB;;;AAI9B,YAAI,WAAW,KAAK,QAAQ,KAAK;AAC7B,eAAK,QAAQ,MAAM;AACnB,cAAI,CAAC,KAAK,gBAAgB;AACtB,iBAAK,iBAAiB;;;MAGlC;;MAGQ,kBAAe;AACnB,cAAM,sBAAsB,KAAK,QAAQ,gBAAgB;AACzD,cAAM,uBAAuB,KAAK,QAAQ,gBAAgB;AAE1D,YAAI,KAAK,eAAe,aAAa,uBAAuB,KAAK,gBAAgB,CAAC,KAAK,oBAAoB;AACvG,eAAK,MAAM,iBAAiB,GAAG,GAAG,IAAI;AACtC,eAAK,eAAe,YAAY;AAChC,eAAK,eAAe,QAAQ;AAC5B,eAAK,iBAAiB;mBACf,CAAC,KAAK,eAAe,cAAc,sBAAsB,KAAK,gBAAgB,KAAK,qBAAqB;AAC/G,eAAK,MAAM,iBAAiB,GAAG,KAAK,UAAU,IAAI;AAClD,eAAK,eAAe,YAAY;AAChC,eAAK,iBAAiB;;AAG1B,YAAI,KAAK,aAAa,aAAa,wBAAwB,KAAK,iBAAiB,CAAC,KAAK,kBAAkB;AACrG,eAAK,MAAM,oBAAoB,GAAG,GAAG,IAAI;AACzC,eAAK,aAAa,YAAY;AAC9B,eAAK,aAAa,QAAQ;AAC1B,eAAK,iBAAiB;mBACf,CAAC,KAAK,aAAa,cAAc,uBAAuB,KAAK,iBAAiB,KAAK,mBAAmB;AAC7G,eAAK,MAAM,oBAAoB,GAAG,KAAK,UAAU,IAAI;AACrD,eAAK,aAAa,YAAY;AAC9B,eAAK,iBAAiB;;AAG1B,aAAK,kBAAiB;AAEtB,cAAM,QAAQ,KAAK,KAAK;AAExB,aAAK,eAAe,aAAa,KAAK,eAAe,OAAO,KAAK,eAAe,SAAS;AACzF,aAAK,aAAa,aAAa,KAAK,eAAe,OAAO,KAAK,gBAAgB,SAAS;MAC5F;MAEO,MAAM,MAA4B;AACrC,cAAM,MAAM,IAAI;AAEhB,aAAK,aAAY;MACrB;;;;MAKQ,QAAQ,YAAwC,cAAyB,YAAqB,UAAgB;AAClH,mBAAW,cAAc;AACzB,mBAAW,QAAQ;AACnB,mBAAW,SAAS;AACpB,mBAAW,YAAY;AACvB,mBAAW,QAAQ;AACnB,mBAAW,UAAU;AACrB,mBAAW,sBAAsB,QAAQ;AACzC,mBAAW,oBAAoB,QAAQ;AACvC,mBAAW,aAAa;AACxB,mBAAW,WAAW;AACtB,mBAAW,YAAY;AAEvB,qBAAa,WAAW,UAAU;AAElC,mBAAW,yBAAyB,IAAI,MAAK;AACzC,eAAK,mBAAkB;QAC3B,CAAC;MACL;;MAGQ,eAAY;AAChB,YAAI,CAAC,KAAK,SAAS,KAAK,kBAAkB;AACtC;;AAGJ,aAAK,mBAAmB,KAAK,kBAAkB,IAAI,CAAC,OAAM;AACtD,cAAI,CAAC,KAAK,kBAAkB,KAAK,YAAY;AACzC;;AAEJ,cAAI,KAAK,aAAa,aAAa,MAAM;AACrC,gBAAI,GAAG,IAAI,KAAK,KAAK,aAAa,QAAQ,GAAG;AACzC,mBAAK,aAAa,SAAS,KAAK;uBACzB,GAAG,IAAI,KAAK,KAAK,aAAa,QAAQ,KAAK,aAAa,SAAS;AACxE,mBAAK,aAAa,SAAS,KAAK;;;AAGxC,cAAI,KAAK,eAAe,aAAa,MAAM;AACvC,gBAAI,GAAG,IAAI,KAAK,KAAK,eAAe,QAAQ,KAAK,eAAe,SAAS;AACrE,mBAAK,eAAe,SAAS,KAAK;uBAC3B,GAAG,IAAI,KAAK,KAAK,eAAe,QAAQ,GAAG;AAClD,mBAAK,eAAe,SAAS,KAAK;;;QAG9C,CAAC;MACL;MAEO,yBAAyB,SAAgC;AAC5D,YAAI,CAAC,KAAK,eAAe;AACrB;;AAGJ,cAAM,yBAAyB,OAAO;AAEtC,aAAK,MAAM,yBAAyB,OAAO;AAE3C,gBAAQ,QAAO;MACnB;;MAGO,UAAO;AACV,aAAK,kBAAkB,OAAO,KAAK,gBAAgB;AACnD,aAAK,mBAAmB;AACxB,cAAM,QAAO;MACjB;;AAzaA,eAAA;MADC,UAAS;;AAuBV,eAAA;MADC,UAAS;;AAeV,eAAA;MADC,UAAS;;AAgEV,eAAA;MADC,UAAS;;AAsIV,eAAA;MADC,UAAS;;AAoMd,kBAAc,4BAA4B,YAAY;;;;;AC/rBtD,IAYa;AAZb;;;AAGA;AAEA;AAOM,IAAO,eAAP,cAA4B,UAAS;;MAuDvC,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;MACA,IAAW,MAAM,OAAa;AAC1B,YAAI,KAAK,WAAW,OAAO;AACvB;;AAGJ,aAAK,SAAS;MAClB;;MAIA,IAAW,WAAQ;AACf,eAAO,KAAK;MAChB;MACA,IAAW,SAAS,OAAc;;AAE9B,YAAI,KAAK,cAAc,OAAO;AAC1B;;AAGJ,aAAK,YAAY;AAGjB,YAAI,KAAK,WAAW;AAChB,WAAA,KAAA,KAAK,uBAAiB,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,IAAA;eACnB;AACH,WAAA,KAAA,KAAK,yBAAmB,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,IAAA;;AAG5B,aAAK,aAAY;AAEjB,aAAK,4BAA4B,gBAAgB,KAAK;AAEtD,YAAI,KAAK,aAAa,KAAK,SAAS,KAAK,QAAQ;AAG7C,eAAK,MAAM,qBAAqB,CAAC,YAAW;AAExC,gBAAI,QAAQ,aAAa,gBAAgB;AAErC,kBAAI,YAAY,MAAM;AAClB;;AAGJ,oBAAM,cAA4B;AAElC,kBAAI,YAAY,UAAU,KAAK,OAAO;AAClC,4BAAY,WAAW;;;UAGnC,CAAC;;MAET;;;;;;MAOA,YAAmBC,OAAe,OAAc;AAC5C,cAAMA,KAAI;AADK,aAAA,OAAAA;AAtEZ,aAAA,8BAA8B,IAAI,WAAU;AAK5C,aAAA,4BAA4B;AAe3B,aAAA,YAAY;AAoDhB,aAAK,QAAQ,UAAK,QAAL,UAAK,SAAL,QAAS;AAEtB,aAAK,YAAY;AACjB,aAAK,mBAAmB;AAExB,YAAI,aAA+B;AAEnC,aAAK,oBAAoB,MAAK;AAC1B,eAAK,YAAY;QACrB;AACA,aAAK,sBAAsB,MAAK;AAC5B,eAAK,YAAY;QACrB;AAEA,aAAK,8BAA8B,MAAK;AACpC,uBAAa,KAAK;AAClB,eAAK,SAAS;QAClB;AAEA,aAAK,4BAA4B,MAAK;AAClC,cAAI,eAAe,MAAM;AACrB,iBAAK,QAAQ;;QAErB;AAEA,aAAK,6BAA6B,MAAK;AACnC,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;AAEA,aAAK,2BAA2B,MAAK;AACjC,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;AAEA,aAAK,gCAAgC,MAAK;AACtC,uBAAa,KAAK;AAClB,eAAK,SAAS;QAClB;AAEA,aAAK,8BAA8B,MAAK;AACpC,cAAI,eAAe,MAAM;AACrB,iBAAK,QAAQ;;QAErB;AAEA,aAAK,+BAA+B,MAAK;AACrC,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;AAEA,aAAK,6BAA6B,MAAK;AACnC,eAAK,UAAU;AACf,eAAK,UAAU;QACnB;MACJ;MAEU,eAAY;AAClB,eAAO;MACX;;;;;MAMO,gBAAgB,GAAW,GAAW,IAAqB,MAAc,WAAmB,aAAqB,QAAiB,QAAe;AACpJ,YAAI,CAAC,KAAK,cAAc,CAAC,KAAK,oBAAoB,CAAC,KAAK,aAAa,KAAK,eAAe;AACrF,iBAAO;;AAGX,YAAI,CAAC,MAAM,SAAS,GAAG,CAAC,GAAG;AACvB,iBAAO;;AAGX,YAAI,KAAK,2BAA2B;AAChC,cAAI,WAAW;AACf,mBAAS,QAAQ,KAAK,UAAU,SAAS,GAAG,SAAS,GAAG,SAAS;AAC7D,kBAAM,QAAQ,KAAK,UAAU,KAAK;AAClC,gBAAI,MAAM,aAAa,MAAM,oBAAoB,MAAM,aAAa,CAAC,MAAM,iBAAiB,MAAM,SAAS,GAAG,CAAC,GAAG;AAC9G,yBAAW;AACX;;;AAIR,cAAI,CAAC,UAAU;AACX,mBAAO;;;AAIf,aAAK,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,aAAa,QAAQ,MAAM;AAE/E,eAAO;MACX;;;;MAKO,gBAAgB,QAAiB,IAAmB;AACvD,YAAI,CAAC,MAAM,gBAAgB,QAAQ,EAAE,GAAG;AACpC,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,YAAI,KAAK,WAAW;AAChB,cAAI,KAAK,6BAA6B;AAClC,iBAAK,4BAA2B;;eAEjC;AACH,cAAI,KAAK,+BAA+B;AACpC,iBAAK,8BAA6B;;;AAI1C,eAAO;MACX;;;;MAKO,cAAc,QAAiB,IAAqB,QAAQ,OAAK;AACpE,YAAI,CAAC,KAAK,YAAY;AAClB,cAAI,KAAK,WAAW;AAChB,gBAAI,KAAK,2BAA2B;AAChC,mBAAK,0BAAyB;;iBAE/B;AACH,gBAAI,KAAK,6BAA6B;AAClC,mBAAK,4BAA2B;;;;AAK5C,cAAM,cAAc,QAAQ,IAAI,KAAK;MACzC;;;;MAKO,eAAe,QAAiB,aAAsB,WAAmB,aAAqB,IAAmB;AACpH,YAAI,CAAC,MAAM,eAAe,QAAQ,aAAa,WAAW,aAAa,EAAE,GAAG;AACxE,iBAAO;;AAGX,YAAI,KAAK,YAAY;AACjB,iBAAO;;AAGX,YAAI,KAAK,WAAW;AAChB,cAAI,KAAK,4BAA4B;AACjC,iBAAK,2BAA0B;;eAEhC;AACH,cAAI,KAAK,8BAA8B;AACnC,iBAAK,6BAA4B;;;AAIzC,eAAO;MACX;;;;MAKO,aAAa,QAAiB,aAAsB,WAAmB,aAAqB,aAAsB,IAAmB;AACxI,YAAI,CAAC,KAAK,YAAY;AAClB,cAAI,KAAK,WAAW;AAChB,gBAAI,KAAK,0BAA0B;AAC/B,mBAAK,yBAAwB;;iBAE9B;AACH,gBAAI,KAAK,4BAA4B;AACjC,mBAAK,2BAA0B;;;;AAK3C,cAAM,aAAa,QAAQ,aAAa,WAAW,aAAa,aAAa,EAAE;MACnF;;AAGJ,kBAAc,4BAA4B,YAAY;;;;;ACxTtD,IAca,gBA4BA;AA1Cb;;;AAEA;AACA;AAIA;AAEA;AAKM,IAAO,iBAAP,MAAqB;;AA4BrB,IAAO,kBAAP,MAAO,yBAAwB,WAAU;MAA/C,cAAA;;AAEW,aAAA,uBAAuB,IAAI,WAAU;AAGrC,aAAA,qBAAqB;AAErB,aAAA,sBAAsB;AAGtB,aAAA,2BAA2B;AAE3B,aAAA,4BAA4B;AAE5B,aAAA,0BAA0B;AAE1B,aAAA,6BAA6B;AAG7B,aAAA,qBAAqB;AAErB,aAAA,0BAA0B;AAG1B,aAAA,mBAAmB;AAEnB,aAAA,yBAAyB;AAGzB,aAAA,aAAa;AAmGZ,aAAA,+BAAoE;AACpE,aAAA,uBAA6C,CAAA;AAC7C,aAAA,sBAAkD;MA0K9D;MA7Qc,eAAY;AAClB,eAAO;MACX;MAEQ,WAAW,KAAa,aAAqC;AACjE,cAAM,SAAS,OAAO,mBAAmB,KAAK,GAAG;AAEjD,eAAO,QAAQ,eAAe,YAAY,QAAQ,YAAY,QAAQ,KAAK;AAC3E,eAAO,SAAS,eAAe,YAAY,SAAS,YAAY,SAAS,KAAK;AAC9E,eAAO,QAAQ,eAAe,YAAY,QAAQ,YAAY,QAAQ,KAAK;AAC3E,eAAO,aAAa,eAAe,YAAY,aAAa,YAAY,aAAa,KAAK;AAC1F,eAAO,cAAc,eAAe,YAAY,cAAc,YAAY,cAAc,KAAK;AAC7F,eAAO,eAAe,eAAe,YAAY,eAAe,YAAY,eAAe,KAAK;AAChG,eAAO,aAAa,eAAe,YAAY,aAAa,YAAY,aAAa,KAAK;AAC1F,eAAO,gBAAgB,eAAe,YAAY,gBAAgB,YAAY,gBAAgB,KAAK;AAEnG,eAAO,YAAY;AACnB,eAAO,mBAAmB;AAE1B,eAAO,cAAc,KAAK;AAC1B,eAAO,aAAa,KAAK;AACzB,eAAO,gBAAgB,KAAK;AAC5B,eAAO,gBAAgB,KAAK;AAE5B,eAAO,sBAAsB,IAAI,MAAK;AAClC,eAAK,qBAAqB,gBAAgB,GAAG;QACjD,CAAC;AAED,eAAO;MACX;;;;;;MAOO,WAAW,MAAqB,cAAoC;AACvE,cAAM,QAAQ,IAAI,WAAU;AAC5B,cAAM,aAAa;AACnB,cAAM,mBAAmB;AAEzB,YAAI,SAA2B;AAC/B,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cAAI,aAAa;AAEjB,cAAI,gBAAgB,aAAa,WAAW,KAAK,QAAQ;AACrD,yBAAa,aAAa,CAAC;;AAG/B,gBAAM,MAAM,KAAK,WAAW,KAAK,CAAC,GAAG,UAAU;AAC/C,cAAI,CAAC,UAAU,IAAI,iBAAiB,OAAO,gBAAgB;AACvD,qBAAS;;AAGb,gBAAM,WAAW,GAAG;;AAGxB,cAAM,SAAS,SAAS,OAAO,SAAS,KAAK;AAE7C,aAAK,WAAW,KAAK;MACzB;;;;;MAMO,gBAAgB,YAAkB;AACrC,YAAI,CAAC,KAAK,UAAU;AAChB;;AAGJ,iBAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,gBAAM,MAAM,KAAK,SAAS,CAAC;AAC3B,cAAI,CAAC,OAAO,CAAa,IAAK,UAAU;AACpC;;AAGJ,gBAAM,eAA0B;AAChC,mBAAS,IAAI,GAAG,IAAI,aAAa,SAAS,QAAQ,KAAK;AACnD,kBAAM,SAAS,aAAa,SAAS,CAAC;AAEtC,gBAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,GAAG;AAChC;;AAGJ,kBAAM,gBAAgB,OAAO,SAAS,CAAC;AAEvC,gBAAI,cAAc,SAAS,KAAU;AACjC,qBAAO,QAAQ,aAAa,KAAK,mBAAmB,KAAK;AACzD,qBAAO,YAAY,aAAa,IAAI,KAAK,yBAAyB;;AAGtE,0BAAc,OAAO,aAAa,IAAI,cAAc,KAAK,YAAW,IAAK,cAAc,KAAK,YAAW;;;MAGnH;;MAOA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;;;;;;MAOO,QAAQ,OAAgB;AAC3B,cAAM,4BAA4B,KAAK,qBAAqB,KAAK,CAAC,MAAM,EAAE,UAAU,KAAK;AACzF,YAAI,2BAA2B;AAC3B;;AAGJ,YAAI,KAAK,wBAAwB,MAAM;AACnC,eAAK,sBAAsB,KAAK,qBAAqB,IAAI,CAAC,QAAO;AAC7D,gBAAI,CAAC,KAAK,8BAA8B;AACpC;;AAGJ,iBAAK,6BAA6B,MAAM,iBAAiB,KAAK;AAE9D,oBAAQ,KAAK;cACT,KAAK;AACD,qBAAK;AACL,oBAAI,KAAK,aAAa,GAAG;AACrB,uBAAK,aAAa;;AAEtB,qBAAK,gBAAgB,KAAK,UAAU;AACpC;cACJ,KAAK;AACD,oBAAI,KAAK,wCAAwC,eAAe;AAC5D,uBAAK,6BAA6B,sBAAsB,WAAW;uBAChE;AACH,uBAAK,6BAA6B,WAAW,CAAC;;AAElD;cACJ,KAAK;AACD,oBAAI,KAAK,wCAAwC,eAAe;AAC5D,uBAAK,6BAA6B,sBAAsB,OAAO;uBAC5D;AACH,uBAAK,6BAA6B,WAAW,EAAE;;AAEnD;;AAER,gBAAI,KAAK,wCAAwC,eAAe;AAC5D,mBAAK,6BAA6B,sBAAsB,IAAI,KAAK,aAAa,IAAI,YAAW,IAAK,GAAG;mBAClG;AACH,mBAAK,6BAA6B,WAAW,IAAI,KAAK,aAAa,IAAI,YAAW,IAAK,GAAG;;AAG9F,gBAAI,KAAK,eAAe,GAAG;AACvB,mBAAK,aAAa;AAClB,mBAAK,gBAAgB,KAAK,UAAU;;UAE5C,CAAC;;AAGL,aAAK,YAAY;AACjB,aAAK,+BAA+B;AACpC,cAAM,4BAA4B;AAGlC,cAAM,kBAAiD,MAAM,kBAAkB,IAAI,MAAK;AACpF,eAAK,+BAA+B;AACpC,gBAAM,4BAA4B;AAClC,eAAK,YAAY;QACrB,CAAC;AAED,cAAM,iBAAgD,MAAM,iBAAiB,IAAI,MAAK;AAClF,gBAAM,4BAA4B;AAClC,eAAK,+BAA+B;AACpC,eAAK,YAAY;QACrB,CAAC;AAED,aAAK,qBAAqB,KAAK;UAC3B;UACA;UACA;SACH;MACL;;;;;;MAOO,WAAW,OAAiB;AAC/B,YAAI,OAAO;AAEP,gBAAM,WAAW,KAAK,qBAAqB,OAAO,CAAC,MAAM,EAAE,UAAU,KAAK;AAC1E,cAAI,SAAS,WAAW,GAAG;AACvB,iBAAK,iCAAiC,SAAS,CAAC,CAAC;AAEjD,iBAAK,uBAAuB,KAAK,qBAAqB,OAAO,CAAC,MAAM,EAAE,UAAU,KAAK;AACrF,gBAAI,KAAK,iCAAiC,OAAO;AAC7C,mBAAK,+BAA+B;;;eAGzC;AACH,eAAK,qBAAqB,QAAQ,CAAC,uBAA0C;AACzE,iBAAK,iCAAiC,kBAAkB;UAC5D,CAAC;AACD,eAAK,qBAAqB,SAAS;;AAGvC,YAAI,KAAK,qBAAqB,WAAW,GAAG;AACxC,eAAK,+BAA+B;AACpC,eAAK,qBAAqB,OAAO,KAAK,mBAAmB;AACzD,eAAK,sBAAsB;;MAEnC;MAEQ,iCAAiC,oBAAsC;AAC3E,2BAAmB,MAAM,4BAA4B;AACrD,2BAAmB,MAAM,kBAAkB,OAAO,mBAAmB,eAAe;AACpF,2BAAmB,MAAM,iBAAiB,OAAO,mBAAmB,cAAc;MACtF;;;;MAKO,UAAO;AACV,cAAM,QAAO;AAEb,aAAK,WAAU;MACnB;;;;;;;;MAUO,OAAO,oBAAoBC,OAAa;AAC3C,cAAM,cAAc,IAAI,iBAAgBA,KAAI;AAE5C,oBAAY,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAQ,CAAC;AACnF,oBAAY,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AACzE,oBAAY,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAQ,CAAC;AACxF,oBAAY,WAAW,CAAC,KAAU,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC;AACnF,oBAAY,WAAW,CAAC,GAAG,GAAG,CAAC,EAAE,OAAO,QAAO,CAAE,CAAC;AAElD,eAAO;MACX;;;;MAKO,kBAAkB,kBAAuB,MAA4B;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAC9C,mBAAW,OAAO,KAAK,UAAU;AAC7B,cAAI,IAAI,aAAY,MAAO,cAAc;AACrC,kBAAM,aAAa;AACnB,uBAAW,OAAO,WAAW,UAAU;AACnC,kBAAI,IAAI,aAAY,MAAO,YAAY,IAAI,MAAM;AAC7C,oBAAI,sBAAsB,IAAI,MAAK;AAC/B,uBAAK,qBAAqB,gBAAgB,IAAI,IAAc;gBAChE,CAAC;;;;;MAKrB;;AAGJ,kBAAc,+BAA+B,eAAe;;;;;ICpV/C;;;;AANb;AACA;AACA;AAIM,IAAO,cAAP,cAA2B,QAAO;;MAmBpC,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAc;AACvC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAc;AACvC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAGJ,aAAK,qBAAqB;AAC1B,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,aAAY;MACrB;;MAIA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,aAAK,aAAa;AAElB,aAAK,aAAY;MACrB;;MAIA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,aAAK,cAAc;AAEnB,aAAK,aAAY;MACrB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,aAAK,qBAAqB;AAE1B,aAAK,aAAY;MACrB;;MAIA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,aAAK,kBAAkB;AAEvB,aAAK,aAAY;MACrB;;MAIA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAa;AACtC,aAAK,qBAAqB;AAE1B,aAAK,aAAY;MACrB;;MAIA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MAEA,IAAW,eAAe,OAAa;AACnC,aAAK,kBAAkB;AAEvB,aAAK,aAAY;MACrB;;MAIA,IAAW,qBAAkB;AACzB,eAAO,KAAK;MAChB;MAEA,IAAW,mBAAmB,OAAa;AACvC,aAAK,sBAAsB;AAE3B,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AArJX,aAAA,aAAa;AACb,aAAA,cAAc;AAEd,aAAA,qBAAqB;AACrB,aAAA,kBAAkB;AAElB,aAAA,qBAAqB;AACrB,aAAA,kBAAkB;AAElB,aAAA,sBAAsB;AAEtB,aAAA,cAAc;AAEd,aAAA,qBAAqB;AACrB,aAAA,qBAAqB;MAyI7B;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAEzB,YAAI,KAAK,YAAY;AACjB,cAAI,KAAK,aAAa;AAClB,oBAAQ,YAAY,KAAK;AACzB,oBAAQ,SAAS,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,MAAM;;AAGjI,gBAAM,aAAa,KAAK,gBAAgB,QAAQ,KAAK;AACrD,gBAAM,aAAa,KAAK,gBAAgB,SAAS,KAAK;AAGtD,gBAAM,OAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ;AACtE,gBAAM,MAAM,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,SAAS;AAErE,cAAI,KAAK,oBAAoB;AACzB,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,YAAY,KAAK;AAEzB,qBAAS,IAAI,CAAC,aAAa,IAAI,GAAG,IAAI,aAAa,GAAG,KAAK;AACvD,oBAAM,QAAQ,OAAO,IAAI,KAAK;AAE9B,sBAAQ,UAAS;AACjB,sBAAQ,OAAO,OAAO,KAAK,gBAAgB,GAAG;AAC9C,sBAAQ,OAAO,OAAO,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM;AAE5E,sBAAQ,OAAM;;AAGlB,qBAAS,IAAI,CAAC,aAAa,IAAI,GAAG,IAAI,aAAa,GAAG,KAAK;AACvD,oBAAM,QAAQ,MAAM,IAAI,KAAK;AAE7B,sBAAQ,UAAS;AACjB,sBAAQ,OAAO,KAAK,gBAAgB,MAAM,KAAK;AAC/C,sBAAQ,OAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,OAAO,KAAK;AAC5E,sBAAQ,OAAM;;;AAKtB,cAAI,KAAK,oBAAoB;AACzB,oBAAQ,cAAc,KAAK;AAC3B,oBAAQ,YAAY,KAAK;AAEzB,qBAAS,IAAI,CAAC,aAAa,IAAI,KAAK,qBAAqB,IAAI,aAAa,GAAG,KAAK,KAAK,qBAAqB;AACxG,oBAAM,QAAQ,OAAO,IAAI,KAAK;AAE9B,sBAAQ,UAAS;AACjB,sBAAQ,OAAO,OAAO,KAAK,gBAAgB,GAAG;AAC9C,sBAAQ,OAAO,OAAO,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM;AAC5E,sBAAQ,OAAM;;AAGlB,qBAAS,IAAI,CAAC,aAAa,IAAI,KAAK,qBAAqB,IAAI,aAAa,GAAG,KAAK,KAAK,qBAAqB;AACxG,oBAAM,QAAQ,MAAM,IAAI,KAAK;AAC7B,sBAAQ,OAAO,KAAK,gBAAgB,MAAM,KAAK;AAC/C,sBAAQ,OAAO,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,OAAO,KAAK;AAC5E,sBAAQ,UAAS;AACjB,sBAAQ,OAAM;;;;AAK1B,gBAAQ,QAAO;MACnB;MAEU,eAAY;AAClB,eAAO;MACX;;AA9MA,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAgBV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AAaV,eAAA;MADC,UAAS;;AA4Fd,kBAAc,2BAA2B,WAAW;;;;;IC9NvC;;;;AAXb;AACA;AACA;AACA;AACA;AAOM,IAAO,mBAAP,cAAgC,WAAU;MAO5C,IAAW,eAAY;AACnB,eAAO,KAAK,iBAAiB,KAAK,cAAc;MACpD;MAEA,IAAW,aAAa,OAAc;AAClC,YAAI,KAAK,kBAAkB,OAAO;AAC9B;;AAGJ,aAAK,gBAAgB;AACrB,aAAK,aAAY;MACrB;;;;MAKA,IAAW,kBAAe;AACtB,eAAO,KAAK;MAChB;MAEA,IAAW,gBAAgB,OAAY;AACnC,YAAI,KAAK,qBAAqB,OAAO;AACjC;;AAGJ,aAAK,mBAAmB;AAExB,YAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,gBAAM,wBAAwB,QAAQ,MAAM,KAAK,aAAY,CAAE;;AAGnE,aAAK,aAAY;MACrB;;;;MAKA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MAEA,IAAW,cAAc,OAAY;AACjC,YAAI,KAAK,mBAAmB,OAAO;AAC/B;;AAGJ,aAAK,iBAAiB;AAEtB,YAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,gBAAM,wBAAwB,QAAQ,MAAM,KAAK,aAAY,CAAE;;AAGnE,aAAK,aAAY;MACrB;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAY;AAC9B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AAEnB,YAAI,SAAS,CAAC,MAAM,UAAU;AAC1B,gBAAM,wBAAwB,QAAQ,MAAM,KAAK,aAAY,CAAE;;AAGnE,aAAK,aAAY;MACrB;;;;;MAMA,YAAmBC,OAAa;AAC5B,cAAMA,KAAI;AADK,aAAA,OAAAA;AAnFX,aAAA,eAAe,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;MAqF7C;MAEU,eAAY;AAClB,eAAO;MACX;MAEO,MAAM,SAAgC;AACzC,gBAAQ,KAAI;AAEZ,aAAK,aAAa,OAAO;AAEzB,aAAK,sBAAsB,WAAW;AACtC,cAAM,gBAAgB,KAAK,kBAAiB;AAC5C,cAAM,OAAO,KAAK;AAClB,cAAM,MAAM,KAAK;AACjB,cAAM,QAAQ,KAAK;AACnB,cAAM,SAAS,KAAK;AAGpB,YAAI,KAAK,kBAAkB;AACvB,eAAK,aAAa,eAAe,MAAM,KAAK,OAAO,MAAM;AACzD,cAAI,KAAK,kBAAkB,KAAK,cAAc;AAC1C,gBAAI,KAAK,YAAY;AACjB,mBAAK,aAAa,UAAU,KAAK;mBAC9B;AACH,mBAAK,aAAa,SAAS,KAAK;;;AAGxC,eAAK,iBAAiB,gBAAgB,SAAS,KAAK,YAAY;AAChE,eAAK,iBAAiB,MAAM,OAAO;;AAIvC,YAAI,KAAK,gBAAgB;AACrB,cAAI,KAAK,YAAY;AACjB,gBAAI,KAAK,kBAAkB,KAAK,cAAc;AAC1C,mBAAK,aAAa,eAAe,MAAM,MAAM,eAAe,OAAO,SAAS,gBAAgB,KAAK,wBAAwB;mBACtH;AACH,mBAAK,aAAa,eAAe,MAAM,MAAM,eAAe,OAAO,SAAS,aAAa;;iBAE1F;AACH,gBAAI,KAAK,kBAAkB,KAAK,cAAc;AAC1C,mBAAK,aAAa,eAAe,MAAM,KAAK,gBAAgB,KAAK,2BAA2B,GAAG,MAAM;mBAClG;AACH,mBAAK,aAAa,eAAe,MAAM,KAAK,eAAe,MAAM;;;AAGzE,eAAK,eAAe,gBAAgB,SAAS,KAAK,YAAY;AAC9D,eAAK,eAAe,MAAM,OAAO;;AAIrC,YAAI,KAAK,cAAc;AACnB,cAAI,KAAK,YAAY;AACjB,iBAAK,aAAa,eACd,OAAO,KAAK,qBACZ,KAAK,gBAAgB,MAAM,eAC3B,KAAK,gBAAgB,OACrB,KAAK,wBAAwB;iBAE9B;AACH,iBAAK,aAAa,eAAe,KAAK,gBAAgB,OAAO,eAAe,KAAK,gBAAgB,KAAK,KAAK,0BAA0B,KAAK,gBAAgB,MAAM;;AAGpK,eAAK,YAAY,gBAAgB,SAAS,KAAK,YAAY;AAC3D,eAAK,YAAY,MAAM,OAAO;;AAGlC,gBAAQ,QAAO;MACnB;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AACnC,cAAM,kBAAkB,CAAA;AACxB,cAAM,aAAa,CAAA;AACnB,cAAM,gBAAgB,CAAA;AACtB,aAAK,gBAAgB,UAAU,eAAe;AAC9C,aAAK,WAAW,UAAU,UAAU;AACpC,aAAK,cAAc,UAAU,aAAa;AAC1C,4BAAoB,kBAAkB;AACtC,4BAAoB,aAAa;AACjC,4BAAoB,gBAAgB;MACxC;;;;MAKO,kBAAkB,kBAAuB,MAA4B;AACxE,cAAM,kBAAkB,kBAAkB,IAAI;AAC9C,aAAK,kBAAkB,MAAM,MAAM,iBAAiB,iBAAiB,IAAI;AACzE,aAAK,aAAa,MAAM,MAAM,iBAAiB,YAAY,IAAI;AAC/D,aAAK,gBAAgB,MAAM,MAAM,iBAAiB,eAAe,IAAI;MACzE;;AAlLA,eAAA;MADC,UAAS;;AAqLd,kBAAc,gCAAgC,gBAAgB;;;;;ACtM9D,IAQM;AARN;;;AACA;AACA;AAMA,IAAM,OAAO;AAcb,YAAQ,YAAY,SAAU,SAAkB,MAAc,MAAuB,SAAyD;AAC1I,YAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,YAAM,eAAe,UAAU,QAAQ,eAAe;AACtD,YAAM,eAAe,UAAU,QAAQ,eAAe;AAEtD,YAAM,aAAa,CAAC;AAEpB,YAAM,SAAS,IAAI,UAAU,QAAQ;AACrC,aAAO,OAAO;AACd,aAAO,0BAA0B,QAAQ;AACzC,UAAI,cAAc;AACd,eAAO,QAAQ;aACZ;AACH,eAAO,SAAS;;AAGpB,UAAI,cAAc;AACd,cAAM,WAAW,OAAO;AACxB,cAAM,WAAW,MAAM;AACvB,eAAO,cAAc;aAClB;AACH,cAAM,WAAW,MAAM;AACvB,cAAM,WAAW,OAAO;AACxB,eAAO,eAAe;;AAG1B,aAAO,aAAa,QAAQ;AAC5B,aAAO,cAAc,QAAQ;AAC7B,aAAO,gBAAgB,QAAQ;AAC/B,aAAO,gBAAgB,QAAQ;AAE/B,aAAO;IACX;;;;;ACtDA,IAuBsB;AAvBtB;;AAuBM,IAAgB,eAAhB,MAA4B;MAAlC,cAAA;AACY,aAAA,cAAmC,CAAA;AAInC,aAAA,iBAA0B;MA2EtC;MAnEY,iCAA8B;AAClC,mBAAW,QAAQ,KAAK,aAAa;AACjC,eAAK,gBAAgB,aAAa,KAAK,QAAQ,KAAK,KAAK;;MAEjE;;;;;MAMO,kBAAkB,SAAgC;AACrD,YAAI,KAAK,kBAAkB,KAAK,aAAa,SAAS;AAClD,eAAK,WAAW;AAChB,eAAK,kBAAkB,KAAK,sBAAsB,OAAO;AACzD,eAAK,+BAA8B;AACnC,eAAK,iBAAiB;;AAE1B,eAAO,KAAK;MAChB;;;;;;MAOO,aAAa,QAAgB,OAAa;AAC7C,aAAK,YAAY,KAAK,EAAE,QAAQ,MAAK,CAAE;AACvC,aAAK,iBAAiB;MAC1B;;;;;MAMO,gBAAgB,QAAc;AACjC,aAAK,cAAc,KAAK,YAAY,OAAO,CAAC,cAAc,UAAU,WAAW,MAAM;AACrF,aAAK,iBAAiB;MAC1B;;;;MAKO,kBAAe;AAClB,aAAK,cAAc,CAAA;AACnB,aAAK,iBAAiB;MAC1B;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;;MAGO,eAAY;AACf,eAAO;MACX;;MAGO,UAAU,qBAAwB;AACrC,4BAAoB,aAAa,KAAK;AACtC,4BAAoB,YAAY,KAAK,aAAY;MACrD;;MAGO,MAAM,qBAAwB;AACjC,aAAK,cAAc,oBAAoB;MAC3C;;;;;;ACrGJ,IAQa;AARb;;;AACA;AAOM,IAAO,iBAAP,cAA8B,aAAY;;;;;;;;MAa5C,YAAY,IAAa,IAAa,IAAa,IAAW;AAC1D,cAAK;AACL,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;MACrB;MAEU,sBAAsB,SAAgC;AAC5D,eAAO,QAAQ,qBAAqB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;MAC9E;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;;;;MAMO,eAAY;AACf,eAAO;MACX;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AACnC,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;MAClC;;;;;MAMO,MAAM,qBAAwB;AACjC,cAAM,MAAM,mBAAmB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;MACnC;;AAEJ,kBAAc,8BAA8B,cAAc;;;;;ACrF1D,IAQa;AARb;;;AACA;AAOM,IAAO,iBAAP,cAA8B,aAAY;;;;;;;;;;MAiB5C,YAAY,IAAa,IAAa,IAAa,IAAa,IAAa,IAAW;AACpF,cAAK;AACL,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;AACjB,aAAK,MAAM,OAAE,QAAF,OAAE,SAAF,KAAM;MACrB;MAEU,sBAAsB,SAAgC;AAC5D,eAAO,QAAQ,qBAAqB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;MAClG;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;MAGA,IAAW,KAAE;AACT,eAAO,KAAK;MAChB;;;;;MAMO,eAAY;AACf,eAAO;MACX;;;;;MAMO,UAAU,qBAAwB;AACrC,cAAM,UAAU,mBAAmB;AACnC,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;AAC9B,4BAAoB,KAAK,KAAK;MAClC;;;;;MAMO,MAAM,qBAAwB;AACjC,cAAM,MAAM,mBAAmB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;AAC/B,aAAK,MAAM,oBAAoB;MACnC;;AAEJ,kBAAc,8BAA8B,cAAc;;;;;AC1G1D;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACjCA,IASa;AATb;;;AAGA;AAMM,IAAO,QAAP,MAAY;;;;;MAkBd,YAAmB,MAA4B;AAjBvC,aAAA,cAAc;AACd,aAAA,aAAa;AACb,aAAA,cAAc;AAIf,aAAA,YAAY,IAAI,aAAa,IAAI,aAAa,gBAAgB,KAAK;AAKnE,aAAA,sBAAsB,IAAI,WAAU;AAOvC,aAAK,QAAQ;MACjB;;;;MAKA,IAAW,WAAQ;AACf,eAAO,KAAK,UAAU,SAAS,KAAK,KAAK;MAC7C;MAEA,IAAW,SAAS,OAAsB;AACtC,YAAI,KAAK,UAAU,SAAS,KAAK,KAAK,MAAM,OAAO;AAC/C;;AAGJ,YAAI,KAAK,UAAU,WAAW,KAAK,GAAG;AAClC,eAAK,oBAAoB,gBAAgB,IAAI;;MAErD;;;;MAKA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,oBAAoB,gBAAgB,IAAI;MACjD;;;;MAKA,IAAW,YAAS;AAChB,eAAO,KAAK;MAChB;MAEA,IAAW,UAAU,OAAa;AAC9B,YAAI,KAAK,eAAe,OAAO;AAC3B;;AAGJ,aAAK,aAAa;AAClB,aAAK,oBAAoB,gBAAgB,IAAI;MACjD;;MAGA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MAEA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAGJ,aAAK,cAAc;AACnB,aAAK,oBAAoB,gBAAgB,IAAI;MACjD;;MAGO,UAAO;AACV,aAAK,oBAAoB,MAAK;MAClC;;;;;;AC/FJ,IAqCa;AArCb;;;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQM,IAAO,yBAAP,MAAO,gCAA+B,eAAc;;MA6DtD,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;;MAKA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;;;;;MA2CA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MACA,IAAW,YAAY,OAAa;AAChC,YAAI,UAAU,KAAK,cAAc;AAC7B;;AAEJ,aAAK,eAAe;AACpB,aAAK,UAAS;MAClB;;MAEA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MACA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAEJ,aAAK,cAAc;AACnB,aAAK,YAAW;MACpB;;;;;;MAMA,IAAW,aAAU;AACjB,eAAO,KAAK;MAChB;MACA,IAAW,WAAW,OAAa;AAC/B,YAAI,KAAK,gBAAgB,OAAO;AAC5B;;AAEJ,aAAK,cAAc;AACnB,aAAK,YAAW;AAChB,aAAK,eAAe,gBAAe;MACvC;;;;;;MAMA,IAAW,cAAW;AAClB,eAAO,KAAK;MAChB;MACA,IAAW,YAAY,OAAa;AAChC,YAAI,KAAK,iBAAiB,OAAO;AAC7B;;AAEJ,aAAK,eAAe;AACpB,aAAK,YAAW;AAChB,aAAK,eAAe,gBAAe;MACvC;;;;;MAKA,IAAW,mBAAgB;AACvB,eAAO,KAAK;MAChB;MACA,IAAW,iBAAiB,OAAc;AACtC,YAAI,KAAK,sBAAsB,OAAO;AAClC;;AAEJ,aAAK,oBAAoB;AACzB,aAAK,YAAW;AAChB,aAAK,eAAe,gBAAe;MACvC;;;;;MAKA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MACA,IAAW,kBAAkB,OAAc;AACvC,YAAI,KAAK,uBAAuB,OAAO;AACnC;;AAEJ,aAAK,qBAAqB;AAC1B,aAAK,UAAS;MAClB;;;;;MAMA,IAAW,aAAU;AACjB,YAAI,SAAiB;AACrB,YAAI,UAAkB;AAEtB,YAAI,KAAK,aAAa;AAClB,mBAAS,KAAK,QAAO,EAAG,QAAQ,KAAK;;AAGzC,YAAI,KAAK,cAAc;AACnB,oBAAU,KAAK,QAAO,EAAG,SAAS,KAAK;;AAG3C,YAAI,KAAK,qBAAqB,KAAK,eAAe,KAAK,cAAc;AACjE,iBAAO,OAAO,aAAa,OAAO,cAAc,SAAS;;AAG7D,YAAI,KAAK,aAAa;AAElB,iBAAO;;AAGX,YAAI,KAAK,cAAc;AAEnB,iBAAO;;AAGX,eAAO;MACX;;;;MAKA,IAAW,QAAK;AACZ,eAAO,KAAK;MAChB;;;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;;;;;;MAMO,cAAW;AACd,eAAO,CAAC,KAAK,cAAc;MAC/B;;;;;;;MAOO,eAAe,uBAAiC,WAAyC;AAC5F,eAAO,KAAK,eAAe,eAAe,uBAAuB,SAAS;MAC9E;;;;;;MAOO,kBAAkB,UAAgB;AACrC,eAAO,KAAK,eAAe,eAAe,OAAO,CAAC,YAAY,QAAQ,aAAa,QAAQ;MAC/F;;;;;;MAOO,iBAAiBC,OAAY;AAChC,eAAO,KAAK,iBAAiB,QAAQA,KAAI;MAC7C;MAEQ,iBAAiB,KAAa,OAAU;AAC5C,eAAO,KAAK,eAAe,eAAc,EAAG,KAAK,CAAC,YAAY,QAAQ,GAAoB,MAAM,KAAK,KAAK;MAC9G;;;;MAKA,IAAW,iBAAc;AACrB,eAAO,KAAK;MAChB;MACA,IAAW,eAAe,SAAoC;AAC1D,YAAI,KAAK,mBAAmB,SAAS;AACjC;;AAEJ,YAAI,KAAK,iBAAiB;AACtB,eAAK,gBAAgB,OAAM;;AAE/B,YAAI,SAAS;AACT,kBAAQ,QAAO;;AAEnB,aAAK,kBAAkB;MAC3B;;;;MAIA,IAAW,eAAY;AACnB,YAAI,CAAC,KAAK,OAAO;AACb,iBAAO;;AAEX,eAAO,CAAC,KAAK,MAAM;MACvB;MACA,IAAW,aAAa,OAAc;AAClC,YAAI,CAAC,KAAK,OAAO;AACb;;AAEJ,YAAI,KAAK,MAAM,iBAAiB,CAAC,OAAO;AACpC;;AAEJ,aAAK,MAAM,eAAe,CAAC;MAC/B;;;;MAIA,IAAW,gBAAa;AACpB,eAAO,KAAK;MAChB;MACA,IAAW,cAAc,OAAa;AAClC,aAAK,iBAAiB;MAC1B;;;;;;;;;;;MAmBA,YAAYA,OAAc,QAAQ,GAAG,SAAS,GAAG,OAAyB,kBAAkB,OAAO,eAAe,QAAQ,sBAAsB,UAAU,MAAI;AAC1J,cAAMA,OAAM,EAAE,OAAc,OAAc,GAAI,OAAO,iBAAiB,cAAc,UAAU,oBAAoB,OAAO;AA9UtH,aAAA,uBAAuB,IAAI,WAAU;AAEpC,aAAA,WAAW;AAaZ,aAAA,iBAAiB,IAAI,UAAU,MAAM;AAIrC,aAAA,mBAAqD,CAAA;AAErD,aAAA,mBAAqD,CAAA;AAErD,aAAA,oBAAsD,CAAA;AAMtD,aAAA,kBAAkB,IAAI,MAAK;AAC1B,aAAA,gBAAgB;AAChB,aAAA,sBAAsB,IAAI,SAAS,GAAG,GAAG,GAAG,CAAC;AAC7C,aAAA,cAAc;AACd,aAAA,eAAe;AACf,aAAA,oBAA6B;AAC7B,aAAA,qBAAqB;AAErB,aAAA,uBAAuB;AACvB,aAAA,eAAe;AAEf,aAAA,iBAAiB;AACjB,aAAA,yBAAyB;AACzB,aAAA,2BAAoC;AAGrC,aAAA,sBAAsB,oBAAI,IAAG;AAG7B,aAAA,kBAAkB;AAOlB,aAAA,kBAAkB;AAUjB,aAAA,iBAAyB;AAI1B,aAAA,wBAAwB,IAAI,WAAU;AAItC,aAAA,4BAA4B,IAAI,WAAU;AAI1C,aAAA,0BAA0B,IAAI,WAAU;AAIxC,aAAA,wBAAwB,IAAI,WAAU;AAItC,aAAA,0BAA0B,IAAI,WAAU;AAIxC,aAAA,wBAAwB,IAAI,WAAU;AAItC,aAAA,cAAc;AAId,aAAA,0BAA0B;AAiO1B,aAAA,yBAAyB;AA2ExB,aAAA,iCAAiC;AAcjC,aAAA,wBAA2C;AA8Q3C,aAAA,gBAAgB,IAAI,QAAQ,GAAG,GAAG,GAAG,CAAC;AA0PtC,aAAA,mBAAmB,CAAC,WAAiB;AACzC,gBAAM,MAAM;AACZ,gBAAM,KAAK,IAAI,cAAc,oBAAoB,MAAM,GAAG;AAC1D,eAAK,sBAAsB,gBAAgB,EAAE;AAC7C,cAAI,eAAc;QACtB;AAIQ,aAAA,kBAAkB,CAAC,WAAiB;AACxC,gBAAM,MAAM;AACZ,gBAAM,KAAK,IAAI,cAAc,oBAAoB,KAAK,GAAG;AACzD,eAAK,sBAAsB,gBAAgB,EAAE;AAC7C,cAAI,eAAc;QACtB;AAIQ,aAAA,oBAAoB,CAAC,WAAiB;AAC1C,gBAAM,MAAM;AACZ,gBAAM,KAAK,IAAI,cAAc,oBAAoB,OAAO,GAAG;AAC3D,eAAK,sBAAsB,gBAAgB,EAAE;AAC7C,cAAI,eAAc;QACtB;AAqSO,aAAA,eAAe,KAAK;AAh5BvB,gBAAQ,KAAK,SAAQ;AACrB,YAAI,CAAC,SAAS,CAAC,KAAK,UAAU;AAC1B;;AAEJ,aAAK,0BAA0B;AAC/B,aAAK,eAAe,MAAM,UAAS,EAAG,gBAAe;AACrD,aAAK,kBAAkB,MAAM,+BAA+B,IAAI,CAAC,WAAmB,KAAK,aAAa,MAAM,CAAC;AAG7G,aAAK,wBAAwB,KAAK,eAAe,yBAAyB,IAAI,CAAC,YAAW;AACtF,cAAI,SAAS;AACT,iBAAK,2BAA2B;;QAExC,CAAC;AACD,aAAK,0BAA0B,KAAK,eAAe,2BAA2B,IAAI,CAAC,YAAW;AAC1F,cAAI,SAAS;AACT,iBAAK,2BAA2B;;QAExC,CAAC;AACD,aAAK,uBAAuB,MAAM,wBAAwB,IAAI,CAAC,SAAQ;AACnE,cAAI,CAAC,KAAK,iBAAiB;AACvB;;AAEJ,cAAI,KAAK,SAAS,mBAAmB,SAAS;AAC1C,iBAAK,gBAAgB,gBAAgB,KAAK,KAAK;;AAEnD,eAAK,0BAA0B;QACnC,CAAC;AACD,aAAK,eAAe,MAAM,IAAI;AAC9B,aAAK,WAAW;AAChB,YAAI,CAAC,SAAS,CAAC,QAAQ;AACnB,eAAK,kBAAkB,MAAM,UAAS,EAAG,mBAAmB,IAAI,MAAM,KAAK,UAAS,CAAE;AACtF,eAAK,UAAS;;AAElB,aAAK,SAAS,UAAU;MAC5B;;;;;MAKO,eAAY;AACf,eAAO;MACX;;;;;;MAMO,qBAAqB,MAAkC,WAAqB;AAC/E,YAAI,CAAC,WAAW;AACZ,sBAAY,KAAK;;AAErB,aAAK,SAAS;AACd,mBAAW,SAAS,UAAU,UAAU;AACpC,cAAU,MAAO,UAAU;AACvB,iBAAK,qBAAqB,MAAiB,KAAK;AAChD;;AAEJ,eAAK,KAAK;;MAElB;;;;MAOA,IAAW,gCAA6B;AACpC,eAAO,KAAK;MAChB;MAEA,IAAW,8BAA8B,OAAc;AACnD,aAAK,iCAAiC;MAC1C;;;;;;;;MAWO,eAAe,aAAqB,aAAqB,aAAqB,aAAmB;AACpG,YAAI,CAAC,KAAK,gCAAgC;AACtC;;AAEJ,YAAI,CAAC,KAAK,uBAAuB;AAC7B,eAAK,wBAAwB,IAAI,QAAQ,aAAa,aAAa,cAAc,cAAc,GAAG,cAAc,cAAc,CAAC;eAC5H;AAEH,gBAAM,OAAO,KAAK,KAAK,KAAK,IAAI,KAAK,sBAAsB,OAAO,KAAK,sBAAsB,QAAQ,GAAG,WAAW,CAAC;AACpH,gBAAM,OAAO,KAAK,KAAK,KAAK,IAAI,KAAK,sBAAsB,MAAM,KAAK,sBAAsB,SAAS,GAAG,WAAW,CAAC;AACpH,eAAK,sBAAsB,OAAO,KAAK,MAAM,KAAK,IAAI,KAAK,sBAAsB,MAAM,WAAW,CAAC;AACnG,eAAK,sBAAsB,MAAM,KAAK,MAAM,KAAK,IAAI,KAAK,sBAAsB,KAAK,WAAW,CAAC;AACjG,eAAK,sBAAsB,QAAQ,OAAO,KAAK,sBAAsB,OAAO;AAC5E,eAAK,sBAAsB,SAAS,OAAO,KAAK,sBAAsB,MAAM;;MAEpF;;;;MAIO,cAAW;AACd,aAAK,WAAW;MACpB;;;;;;MAMO,cAAW;AACd,eAAO,IAAI,MAAM,IAAI;MACzB;;;;;;MAMO,WAAW,SAAgB;AAC9B,aAAK,eAAe,WAAW,OAAO;AACtC,eAAO;MACX;;;;;;MAMO,cAAc,SAAgB;AACjC,aAAK,eAAe,cAAc,OAAO;AACzC,eAAO;MACX;;;;;;;;MAQO,4BAA4B,cAAmC,YAAY,GAAG,cAAc,GAAC;AAChG,YAAI;AACJ,YAAI,MAAM,QAAQ,YAAY,GAAG;AAC7B,6BAAmB;eAChB;AACH,gBAAM,cAAc,KAAK,eAAe,IAAI;AAG5C,6BAAmB,iBAAiB,SAAY,YAAY,OAAO,CAAC,MAAM,EAAE,iBAAiB,MAAS,IAAI,YAAY,OAAO,CAAC,MAAM,EAAE,iBAAiB,YAAY;;AAGvK,yBAAiB,QAAQ,CAAC,aAAY;;AAClC,cAAI,WAAW,QAAQ,KAAI;AAC3B,gBAAM,SAAS,IAAI,QAAQ,SAAS,SAAS,SAAS,OAAO;AAE7D,2BAAiB,QAAQ,CAAC,aAAY;AAClC,gBAAI,aAAa,YAAY,wBAAuB,UAAU,UAAU,QAAQ,GAAG;AAE/E,oBAAM,OAAO,OAAO,SAAS,IAAI,QAAQ,SAAS,SAAS,SAAS,OAAO,CAAC;AAC5E,oBAAM,aAAa,KAAK,OAAM;AAE9B,kBAAI,aAAa,GAAG;AAEhB,2BAAW,SAAS,IAAI,KAAK,UAAS,EAAG,MAAM,cAAc,UAAU,CAAC;;;UAGpF,CAAC;AAED,cAAI,SAAS,OAAM,IAAK,GAAG;AAEvB,uBAAW,SAAS,UAAS,EAAG,MAAM,cAAa,KAAA,SAAS,4BAAsB,QAAA,OAAA,SAAA,KAAI,EAAE;AACxF,qBAAS,uBAAuB,SAAS;AACzC,qBAAS,uBAAuB,SAAS;;QAEjD,CAAC;MACL;;;;MAIO,UAAO;AACV,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR;;AAEJ,aAAK,eAAe;AACpB,cAAM,+BAA+B,OAAO,KAAK,eAAe;AAChE,YAAI,KAAK,iBAAiB;AACtB,gBAAM,UAAS,EAAG,mBAAmB,OAAO,KAAK,eAAe;;AAEpE,YAAI,KAAK,qBAAqB;AAC1B,gBAAM,uBAAuB,OAAO,KAAK,mBAAmB;;AAEhE,YAAI,KAAK,sBAAsB;AAC3B,gBAAM,yBAAyB,OAAO,KAAK,oBAAoB;;AAEnE,YAAI,KAAK,kBAAkB;AACvB,gBAAM,oBAAoB,OAAO,KAAK,gBAAgB;;AAE1D,YAAI,KAAK,sBAAsB;AAC3B,gBAAM,wBAAwB,OAAO,KAAK,oBAAoB;;AAElE,YAAI,KAAK,2BAA2B;AAChC,gBAAM,UAAS,EAAG,6BAA6B,OAAO,KAAK,yBAAyB;;AAExF,YAAI,KAAK,qBAAqB;AAC1B,gBAAM,UAAS,EAAG,uBAAuB,OAAO,KAAK,mBAAmB;;AAE5E,YAAI,KAAK,uBAAuB;AAC5B,eAAK,eAAe,yBAAyB,OAAO,KAAK,qBAAqB;;AAElF,YAAI,KAAK,yBAAyB;AAC9B,eAAK,eAAe,2BAA2B,OAAO,KAAK,uBAAuB;;AAEtF,YAAI,KAAK,iBAAiB;AACtB,eAAK,gBAAgB,UAAU;AAC/B,eAAK,gBAAgB,QAAO;AAC5B,eAAK,kBAAkB;;AAE3B,aAAK,eAAe,QAAO;AAC3B,aAAK,sBAAsB,MAAK;AAChC,aAAK,0BAA0B,MAAK;AACpC,aAAK,wBAAwB,MAAK;AAClC,aAAK,sBAAsB,MAAK;AAChC,aAAK,wBAAwB,MAAK;AAClC,aAAK,sBAAsB,MAAK;AAChC,aAAK,qBAAqB,MAAK;AAC/B,cAAM,QAAO;MACjB;MACQ,YAAS;AACb,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR;;AAGJ,cAAM,SAAS,MAAM,UAAS;AAC9B,cAAM,cAAc,KAAK,QAAO;AAChC,YAAI,cAAc,OAAO,eAAc,IAAK,KAAK;AACjD,YAAI,eAAe,OAAO,gBAAe,IAAK,KAAK;AAEnD,YAAI,KAAK,oBAAoB;AACzB,cAAI,KAAK,aAAa;AAClB,2BAAgB,eAAe,KAAK,cAAe;AACnD,0BAAc,KAAK;qBACZ,KAAK,cAAc;AAC1B,0BAAe,cAAc,KAAK,eAAgB;AAClD,2BAAe,KAAK;;;AAG5B,YAAI,YAAY,UAAU,eAAe,YAAY,WAAW,cAAc;AAC1E,eAAK,QAAQ,aAAa,YAAY;AACtC,eAAK,YAAW;AAChB,cAAI,KAAK,eAAe,KAAK,cAAc;AACvC,iBAAK,eAAe,gBAAe;;;AAG3C,aAAK,eAAe,GAAG,GAAG,YAAY,QAAQ,GAAG,YAAY,SAAS,CAAC;MAC3E;;MAEO,qBAAkB;AACrB,cAAM,OAAO,KAAK,QAAO;AACzB,cAAM,iBAAiB,KAAK,oBAAoB,SAAS,KAAK,OAAO,KAAK,MAAM;AAEhF,cAAM,UAAU,KAAK,MAAM,eAAe,SAAS,IAAI,KAAK,cAAc,OAAO;AACjF,cAAM,UAAU,KAAK,MAAM,eAAe,UAAU,IAAI,KAAK,cAAc,OAAO;AAElF,uBAAe,MAAM,eAAe,QAAQ,WAAW;AACvD,uBAAe,MAAM,eAAe,SAAS,WAAW;AAExD,uBAAe,QAAQ;AACvB,uBAAe,SAAS;AAExB,eAAO;MACX;;;;;;;MAOO,qBAAqB,UAAmB,aAAmB;AAC9D,cAAM,SAAS,KAAK,0BAA0B,UAAU,WAAW;AACnE,eAAO,IAAI,QAAQ,OAAO,GAAG,OAAO,CAAC;MACzC;;;;;;;MAQO,0BAA0B,UAAmB,aAAmB;AACnE,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR,iBAAO,QAAQ,KAAI;;AAEvB,cAAM,iBAAiB,KAAK,mBAAkB;AAC9C,cAAM,oBAAoB,QAAQ,QAAQ,UAAU,aAAa,MAAM,mBAAkB,GAAI,cAAc;AAC3G,eAAO,IAAI,QAAQ,kBAAkB,GAAG,kBAAkB,GAAG,kBAAkB,CAAC;MACpF;MAEQ,aAAa,QAAgB,YAAoB;AACrD,YAAI,KAAK,iBAAiB;AACtB,eAAK,OAAO,YAAY,KAAK,gBAAgB,eAAe,GAAG;AAC3D;;;AAGR,YAAI,KAAK,iBAAiB,KAAK,gBAAgB,QAAQ;AACnD,gBAAM,QAAQ,KAAK,SAAQ;AAC3B,cAAI,CAAC,OAAO;AACR;;AAEJ,gBAAM,iBAAiB,KAAK,mBAAkB;AAC9C,qBAAW,WAAW,KAAK,iBAAiB;AACxC,gBAAI,CAAC,QAAQ,WAAW;AACpB;;AAEJ,kBAAM,OAAO,QAAQ;AACrB,gBAAI,CAAC,QAAQ,KAAK,WAAU,GAAI;AAC5B,oBAAM,aAAa,MAAK;AACpB,wBAAQ,aAAa,IAAI;cAC7B,CAAC;AACD;;AAEJ,kBAAM,WAAW,KAAK,kBAAkB,KAAK,gBAAe,EAAG,eAAe,SAAU,QAAQ;AAChG,kBAAM,oBAAoB,QAAQ,QAAQ,UAAU,KAAK,eAAc,GAAI,MAAM,mBAAkB,GAAI,cAAc;AACrH,gBAAI,kBAAkB,IAAI,KAAK,kBAAkB,IAAI,GAAG;AACpD,sBAAQ,gBAAgB;AACxB;;AAEJ,oBAAQ,gBAAgB;AACxB,gBAAI,KAAK,+BAA+B;AACpC,sBAAQ,eAAc;;AAG1B,oBAAQ,yBAAyB,iBAAiB;;;AAG1D,YAAI,CAAC,KAAK,YAAY,CAAC,KAAK,eAAe,SAAS;AAChD;;AAEJ,aAAK,WAAW;AAChB,aAAK,QAAQ,UAAU;AACvB,YAAI,CAAC,YAAY;AACb,eAAK,OAAO,KAAK,yBAAyB,KAAK,aAAa,wBAAuB,qBAAqB;;MAEhH;MAIQ,QAAQ,YAAoB;;AAChC,cAAM,cAAc,KAAK,QAAO;AAChC,cAAM,cAAc,YAAY;AAChC,cAAM,eAAe,YAAY;AAEjC,cAAM,UAAU,KAAK,WAAU;AAC/B,gBAAQ,OAAO;AACf,gBAAQ,cAAc;AAEtB,YAAI,KAAK,qBAAqB,aAAY,GAAI;AAC1C,eAAK,iBAAgB;;AAIzB,YAAI,KAAK,0BAA0B;AAC/B,gBAAM,UAAS,KAAA,KAAK,SAAQ,OAAE,QAAA,OAAA,SAAA,SAAA,GAAE;AAChC,cAAI,QAAQ;AACR,iBAAK,2BAA2B;AAChC,iBAAK,aAAa,QAAQ,IAAI;;;AAKtC,aAAK,wBAAwB,gBAAgB,IAAI;AACjD,cAAM,UAAU,IAAI,QAAQ,GAAG,GAAG,aAAa,YAAY;AAC3D,aAAK,kBAAkB;AACvB,aAAK,eAAe,QAAQ,SAAS,OAAO;AAC5C,aAAK,sBAAsB,gBAAgB,IAAI;AAC/C,aAAK,WAAW;AAEhB,YAAI,YAAY;AACZ;;AAIJ,YAAI,KAAK,uBAAuB;AAC5B,eAAK,cAAc,SAAS,KAAK,qBAAqB;eACnD;AACH,eAAK,cAAc,eAAe,GAAG,GAAG,aAAa,YAAY;;AAErE,gBAAQ,UAAU,KAAK,cAAc,MAAM,KAAK,cAAc,KAAK,KAAK,cAAc,OAAO,KAAK,cAAc,MAAM;AACtH,YAAI,KAAK,aAAa;AAClB,kBAAQ,KAAI;AACZ,kBAAQ,YAAY,KAAK;AACzB,kBAAQ,SAAS,KAAK,cAAc,MAAM,KAAK,cAAc,KAAK,KAAK,cAAc,OAAO,KAAK,cAAc,MAAM;AACrH,kBAAQ,QAAO;;AAInB,aAAK,wBAAwB,gBAAgB,IAAI;AACjD,aAAK,kBAAkB;AACvB,aAAK,eAAe,QAAQ,SAAS,KAAK,qBAAqB;AAC/D,aAAK,sBAAsB,gBAAgB,IAAI;AAC/C,aAAK,wBAAwB;MACjC;;;;MAIO,cAAc,QAAc;AAC/B,YAAI,KAAK,cAAc;AACnB,eAAK,aAAa,MAAM,SAAS;AACjC,eAAK,iBAAiB;;MAE9B;;;;MAIO,yBAAyB,SAAkB,WAAiB;AAC/D,aAAK,iBAAiB,SAAS,IAAI;AACnC,aAAK,0BAA0B,gBAAgB,OAAO;MAC1D;MACQ,WAAW,GAAW,GAAW,IAA+B,MAAc,WAAmB,aAAqB,QAAiB,QAAe;AAC1J,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR;;AAEJ,cAAM,SAAS,MAAM,UAAS;AAC9B,cAAM,cAAc,KAAK,QAAO;AAChC,YAAI,KAAK,eAAe;AACpB,gBAAM,SAAS,MAAM,0BAA0B,MAAM;AACrD,cAAI,CAAC,QAAQ;AACT;;AAEJ,gBAAM,WAAW,OAAO;AACxB,cAAI,KAAK,YAAY,SAAS,OAAO,eAAc,IAAK,SAAS;AACjE,cAAI,KAAK,YAAY,UAAU,OAAO,gBAAe,IAAK,SAAS;;AAEvE,YAAI,KAAK,kBAAkB,SAAS,GAAG;AACnC,cAAI,KAAK,kBAAkB,SAAS,EAAE,kBAAkB;AACpD,iBAAK,sBAAsB;;AAE/B,eAAK,kBAAkB,SAAS,EAAE,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,WAAW;AAC5F;;AAGJ,aAAK,iBAAiB;AACtB,YAAI,CAAC,KAAK,eAAe,gBAAgB,GAAG,GAAG,IAAI,MAAM,WAAW,aAAa,QAAQ,MAAM,GAAG;AAC9F,cAAI,CAAC,MAAM,oBAAoB;AAC3B,iBAAK,cAAc,EAAE;;AAEzB,cAAI,SAAS,kBAAkB,aAAa;AACxC,gBAAI,KAAK,iBAAiB,SAAS,GAAG;AAClC,mBAAK,iBAAiB,SAAS,EAAE,cAAc,KAAK,iBAAiB,SAAS,GAAG,EAAE;AACnF,qBAAO,KAAK,iBAAiB,SAAS;;;;AAKlD,YAAI,CAAC,KAAK,kBAAkB,CAAC,MAAM,oBAAoB;AACnD,eAAK,cAAc,EAAE;;AAEzB,aAAK,aAAY;MACrB;;;;MAIO,kCAAkC,MAAwC,SAAgB;AAC7F,mBAAW,aAAa,MAAM;AAC1B,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,MAAM,SAAS,GAAG;AACxD;;AAEJ,gBAAM,kBAAkB,KAAK,SAAS;AACtC,cAAI,oBAAoB,SAAS;AAC7B,mBAAO,KAAK,SAAS;;;MAGjC;;;;MAIO,0BAA0B,SAAgB;AAC7C,aAAK,kCAAkC,KAAK,kBAAkB,OAAO;AACrE,aAAK,kCAAkC,KAAK,kBAAkB,OAAO;MACzE;;;;;;;;MASO,KAAK,GAAW,GAAW,KAA+B,MAAI;AACjE,YAAI,KAAK,iBAAiB,KAAK,QAAQ;AACnC,eAAK,oBAAoB,KAAK,QAAQ,IAAI,SAAS,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;;MAEhF;MAEQ,oBAAoB,OAAc,cAAwB,IAA8B,IAAY,MAAM,UAAU,IAAY,MAAM,UAAQ;AAClJ,cAAM,SAAS,MAAM,0BAA0B,MAAM;AACrD,cAAM,SAAS,MAAM,UAAS;AAC9B,cAAM,iCAAiC,MAAM;AAE7C,YAAI,CAAC,QAAQ;AACT,uBAAa,IAAI;AACjB,uBAAa,IAAI;AACjB,uBAAa,QAAQ,OAAO,eAAc;AAC1C,uBAAa,SAAS,OAAO,gBAAe;eACzC;AACH,cAAI,OAAO,WAAW,QAAQ;AAE1B,kBAAM,cAAc,IAAI,SAAS,GAAG,GAAG,GAAG,CAAC;AAC3C,mBAAO,WAAW,QAAQ,CAAC,cAAa;AAEpC,wBAAU,SAAS,cAAc,OAAO,eAAc,GAAI,OAAO,gBAAe,GAAI,WAAW;AAC/F,oBAAMC,gBAAe,IAAI,OAAO,wBAAuB,IAAK,YAAY;AACxE,oBAAMC,gBAAe,IAAI,OAAO,wBAAuB,KAAM,OAAO,gBAAe,IAAK,YAAY,IAAI,YAAY;AAEpH,kBAAID,gBAAe,KAAKC,gBAAe,KAAK,IAAI,YAAY,SAAS,IAAI,YAAY,QAAQ;AAEzF;;AAGJ,oBAAM,yBAAyB;AAE/B,2BAAa,IAAI,YAAY;AAC7B,2BAAa,IAAI,YAAY;AAC7B,2BAAa,QAAQ,YAAY;AACjC,2BAAa,SAAS,YAAY;YACtC,CAAC;iBACE;AACH,mBAAO,SAAS,cAAc,OAAO,eAAc,GAAI,OAAO,gBAAe,GAAI,YAAY;;;AAIrG,cAAM,eAAe,IAAI,OAAO,wBAAuB,IAAK,aAAa;AACzE,cAAM,eAAe,IAAI,OAAO,wBAAuB,KAAM,OAAO,gBAAe,IAAK,aAAa,IAAI,aAAa;AACtH,aAAK,sBAAsB;AAE3B,YAAI,IAAI;AACJ,gBAAM,YAAa,GAAG,MAAwB,aAAa,KAAK;AAChE,eAAK,WAAW,cAAc,cAAc,IAAI,GAAG,MAAM,WAAW,GAAG,MAAM,QAAsB,GAAG,MAAO,QAAsB,GAAG,MAAO,MAAM;AAEnJ,cAAI,KAAK,uBAAuB,KAAK,kBAAkB,SAAS,GAAG;AAC/D,eAAG,0BAA0B;;eAE9B;AACH,eAAK,WAAW,cAAc,cAAc,MAAM,kBAAkB,aAAa,KAAK,wBAAwB,CAAC;;AAGnH,cAAM,yBAAyB;MACnC;;MAGO,SAAM;AACT,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR;;AAGJ,cAAM,eAAe,IAAI,SAAS,GAAG,GAAG,GAAG,CAAC;AAE5C,aAAK,sBAAsB,MAAM,uBAAuB,IAAI,CAAC,OAAM;AAC/D,cACI,MAAM,kBAAkC,GAAG,MAAO,SAAS,KAC3D,GAAG,SAAS,kBAAkB,aAC9B,CAAC,KAAK,oBAAoB,IAAK,GAAG,MAAwB,SAAS,GACrE;AACE;;AAEJ,cACI,GAAG,SAAS,kBAAkB,eAC9B,GAAG,SAAS,kBAAkB,aAC9B,GAAG,SAAS,kBAAkB,eAC9B,GAAG,SAAS,kBAAkB,cAChC;AACE;;AAGJ,cAAI,GAAG,SAAS,kBAAkB,aAAa;AAE3C,gBAAI,MAAM,kBAAkC,GAAG,MAAO,SAAS,GAAG;AAC9D;;AAEJ,gBAAK,GAAG,MAAwB,WAAW;AACvC,mBAAK,yBAA0B,GAAG,MAAwB;;;AAGlE,eAAK,oBAAoB,OAAO,cAAc,EAAE;QACpD,CAAC;AACD,aAAK,4BAA4B,OAAO,MAAM,KAAK,oBAAoB,OAAO,cAAc,IAAI,GAAG,KAAK;AACxG,aAAK,sBAAsB,KAAK;AAChC,aAAK,gBAAgB,KAAK;MAC9B;;;;MAgCO,0BAAuB;AAC1B,aAAK,iBAAiB,QAAQ,KAAK,kBAAkB,KAAK;AAC1D,aAAK,iBAAiB,OAAO,KAAK,iBAAiB,KAAK;AACxD,aAAK,iBAAiB,SAAS,KAAK,mBAAmB,KAAK;MAChE;;;;MAIO,4BAAyB;AAC5B,aAAK,oBAAoB,QAAQ,KAAK,gBAAgB;AACtD,aAAK,oBAAoB,OAAO,KAAK,eAAe;AACpD,aAAK,oBAAoB,SAAS,KAAK,iBAAiB;MAC5D;;;;;;MAOQ,cAAc,IAAW;AAC7B,cAAM,gBAAgB,KAAK,iBAAgB;AAC3C,YAAI;AACJ,YAAI,cAAc,gBAAe,GAAI;AACjC,mBAAS;eACN;AACH,gBAAM,2BAA2B,WAAW,OAAO,CAAC;AAEpD,wBAAc,YAAY,GAAG,WAAW,QAAQ,CAAC,CAAC;AAClD,wBAAc,YAAY,GAAG,WAAW,QAAQ,CAAC,CAAC;AAClD,wBAAc,YAAY,GAAG,WAAW,QAAQ,CAAC,CAAC;AAElD,gBAAM,KAAK,WAAW,QAAQ,CAAC;AAC/B,gBAAM,KAAK,WAAW,QAAQ,CAAC;AAC/B,gBAAM,KAAK,WAAW,QAAQ,CAAC;AAE/B,mCAAyB,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7D,mCAAyB,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7D,mCAAyB,iBAAiB,GAAG,GAAG,GAAG,GAAG,CAAC;AACvD,mCAAyB,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAE7D,mBAAS,WAAW,QAAQ,CAAC;AAC7B,kBAAQ,eAAe,IAAI,0BAA0B,MAAM;;AAI/D,YAAI,KAAK,UAAU,QAAQ,oBAAoB,KAAK,UAAU,QAAQ,oBAAoB;AACtF,cAAI,OAAO,IAAI,GAAG;AACd,gBAAI,KAAK,OAAO,IAAI,KAAK,MAAM,OAAO,CAAC;AAGvC,gBAAI,KAAK,UAAU,QAAQ,sBAAsB,KAAK,MAAM,OAAO,CAAC,IAAI,MAAM,GAAG;AAC7E,mBAAK,IAAI;;AAEb,mBAAO,IAAI;;;AAGnB,YAAI,KAAK,UAAU,QAAQ,oBAAoB,KAAK,UAAU,QAAQ,oBAAoB;AACtF,cAAI,OAAO,IAAI,GAAG;AACd,gBAAI,KAAK,OAAO,IAAI,KAAK,MAAM,OAAO,CAAC;AACvC,gBAAI,KAAK,UAAU,QAAQ,sBAAsB,KAAK,MAAM,OAAO,CAAC,IAAI,MAAM,GAAG;AAC7E,mBAAK,IAAI;;AAEb,mBAAO,IAAI;;;AAGnB,eAAO;MACX;;;;;;MAMO,aAAa,MAAoB,qBAAqB,MAAI;AAC7D,cAAM,QAAQ,KAAK,SAAQ;AAC3B,YAAI,CAAC,OAAO;AACR;;AAGJ,YAAI,KAAK,kBAAkB;AACvB,gBAAM,oBAAoB,OAAO,KAAK,gBAAgB;;AAG1D,aAAK,mBAAmB,MAAM,oBAAoB,IAAI,CAAC,OAAM;AACzD,cACI,GAAG,SAAS,kBAAkB,eAC9B,GAAG,SAAS,kBAAkB,aAC9B,GAAG,SAAS,kBAAkB,eAC9B,GAAG,SAAS,kBAAkB,cAChC;AACE;;AAGJ,cAAI,GAAG,SAAS,kBAAkB,eAAgB,GAAG,MAAwB,WAAW;AACpF,iBAAK,yBAA0B,GAAG,MAAwB;;AAG9D,gBAAM,YAAa,GAAG,MAAwB,aAAa,KAAK;AAChE,cAAI,GAAG,YAAY,GAAG,SAAS,OAAO,GAAG,SAAS,eAAe,MAAM;AACnE,gBAAI,KAAK,GAAG,SAAS,sBAAqB;AAC1C,gBAAI,IAAI;AACJ,mBAAK,KAAK,cAAc,EAAE;AAC1B,oBAAM,OAAO,KAAK,QAAO;AACzB,mBAAK,WACD,GAAG,IAAI,KAAK,QACX,KAAK,0BAA0B,IAAM,GAAG,IAAI,GAAG,KAAK,KAAK,QAC1D,IACA,GAAG,MACH,WACA,GAAG,MAAM,QACK,GAAG,MAAO,QACV,GAAG,MAAO,MAAM;;qBAG/B,GAAG,SAAS,kBAAkB,WAAW;AAChD,gBAAI,KAAK,iBAAiB,SAAS,GAAG;AAClC,mBAAK,iBAAiB,SAAS,EAAE,gBAAgB,SAAS;;AAE9D,mBAAO,KAAK,iBAAiB,SAAS;AACtC,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,mBAAmB,KAAK,eAAe,eAAc;AAC3D,kBAAI,eAAe;AACnB,kBAAI,kBAAkB;AAClB,2BAAW,WAAW,kBAAkB;AAEpC,sBAAI,SAAS,QAAQ,OAAO;AACxB;;AAGJ,wBAAM,YAAY,QAAQ;AAC1B,sBAAI,UAAU,iBAAiB,SAAS,KAAK,UAAU,iBAAiB,SAAS,EAAE,YAAY,OAAO,GAAG;AACrG,mCAAe;AACf;;;;AAIZ,kBAAI,cAAc;AACd,qBAAK,iBAAiB;;;qBAGvB,GAAG,SAAS,kBAAkB,aAAa;AAClD,gBAAI,KAAK,iBAAiB,SAAS,GAAG;AAClC,mBAAK,iBAAiB,SAAS,EAAE,cAAc,KAAK,iBAAiB,SAAS,GAAG,IAAI,IAAI;;AAE7F,mBAAO,KAAK,iBAAiB,SAAS;;QAE9C,CAAC;AACD,aAAK,0BAA0B;AAC/B,aAAK,4BACD,OACA,MAAK;AACD,gBAAM,YAAY,KAAK;AACvB,gBAAM,OAAO,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,KAAK,MAAM,UAAU,MAAM,QAAQ;AACvD,cAAI,QAAQ,KAAK,OAAO,KAAK,eAAe,MAAM;AAC9C,gBAAI,KAAK,KAAK,sBAAqB;AACnC,gBAAI,IAAI;AACJ,mBAAK,KAAK,cAAc,EAAE;AAC1B,oBAAM,OAAO,KAAK,QAAO;AACzB,mBAAK,WAAW,GAAG,IAAI,KAAK,QAAQ,KAAK,0BAA0B,IAAM,GAAG,IAAI,GAAG,KAAK,KAAK,QAAQ,MAAM,kBAAkB,aAAa,WAAW,CAAC;;iBAEvJ;AACH,gBAAI,KAAK,iBAAiB,SAAS,GAAG;AAClC,mBAAK,iBAAiB,SAAS,EAAE,cAAc,KAAK,iBAAiB,SAAS,GAAG,MAAM,IAAI;;AAE/F,mBAAO,KAAK,iBAAiB,SAAS;;QAE9C,GACA,IAAI;AAER,aAAK,sBAAsB,KAAK;AAChC,aAAK,gBAAgB,KAAK;MAC9B;;;;;MAKO,mBAAmB,SAA0B;AAChD,aAAK,iBAAiB;AACtB,aAAK,qBAA0B;AAC/B,aAAK,uBAAuB;MAChC;MACQ,eAAY;AAChB,YAAI,KAAK,sBAAsB;AAC3B,eAAK,uBAAuB;AAC5B,eAAK,qBAA0B,KAAK;AACpC;;AAGJ,YAAI,KAAK,iBAAiB;AACtB,cAAI,KAAK,oBAAyB,KAAK,oBAAoB;AACvD,gBAAI,KAAK,mBAAmB,kBAAkB;AAC1C;;AAEJ,iBAAK,iBAAiB;;;MAGlC;MACQ,4BAA4B,OAAc,cAA0B,cAAqB;AAC7F,aAAK,uBAAuB,MAAM,yBAAyB,IAAI,MAAK;AAChE,cAAI,CAAC,KAAK,wBAAwB;AAC9B;;AAEJ,cAAI,KAAK,gBAAgB,SAAS,KAAK,cAAc;AACjD,yBAAY;;QAEpB,CAAC;MACL;MACQ,sBAAsB,OAAY;AACtC,aAAK,4BAA4B,MAAM,UAAS,EAAG,6BAA6B,IAAI,CAAC,iBAAgB;AACjG,cAAI,KAAK,iBAAiB,aAAa,SAAS,GAAG;AAC/C,iBAAK,iBAAiB,aAAa,SAAS,EAAE,cAAc,KAAK,iBAAiB,aAAa,SAAS,GAAG,IAAI;;AAEnH,iBAAO,KAAK,iBAAiB,aAAa,SAAS;AACnD,cAAI,KAAK,iBAAiB,aAAa,SAAS,KAAK,KAAK,iBAAiB,aAAa,SAAS,MAAM,KAAK,kBAAkB,aAAa,SAAS,GAAG;AACnJ,iBAAK,iBAAiB,aAAa,SAAS,EAAE,gBAAgB,aAAa,SAAS;AACpF,mBAAO,KAAK,iBAAiB,aAAa,SAAS;;QAE3D,CAAC;MACL;MACQ,gBAAgB,OAAY;AAChC,aAAK,sBAAsB,MAAM,UAAS,EAAG,uBAAuB,IAAI,MAAK;AACzE,iBAAO,QAAQ,KAAK,gBAAgB,EAAE,QAAQ,CAAC,CAAC,EAAE,KAAK,MAAK;AACxD,kBAAM,cAAa;UACvB,CAAC;AACD,eAAK,iBAAiB;AACtB,eAAK,mBAAmB,CAAA;QAC5B,CAAC;MACL;;;;;MAMO,mBAAgB;AACnB,cAAM,OAAO,KAAK,QAAO;AACzB,cAAM,sBAAsB;UACxB,MAAM,CAAA;UACN,OAAO,KAAK;UACZ,QAAQ,KAAK;;AAGjB,aAAK,eAAe,UAAU,oBAAoB,IAAI;AAEtD,eAAO;MACX;;;;;;MAOO,sBAAsB,kBAAuB,aAAqB;AACrE,aAAK,iBAAiB,QAAQ,MAAM,iBAAiB,MAAM,IAAI;AAC/D,YAAI,aAAa;AACb,gBAAM,QAAQ,iBAAiB;AAC/B,gBAAM,SAAS,iBAAiB;AAChC,cAAI,OAAO,UAAU,YAAY,OAAO,WAAW,YAAY,SAAS,KAAK,UAAU,GAAG;AACtF,iBAAK,QAAQ,OAAO,MAAM;iBACvB;AAEH,iBAAK,QAAQ,MAAM,IAAI;;;MAGnC;;;;;;MAOO,MAAM,SAAgB;AACzB,cAAM,QAAQ,KAAK,SAAQ;AAE3B,YAAI,CAAC,OAAO;AACR,iBAAO;;AAEX,cAAM,OAAO,KAAK,QAAO;AACzB,cAAM,OAAO,KAAK,iBAAgB;AAClC,cAAM,QAAQ,IAAI,wBAAuB,YAAO,QAAP,YAAO,SAAP,UAAW,cAAc,KAAK,MAAM,KAAK,OAAO,KAAK,QAAQ,OAAO,CAAC,KAAK,UAAU,KAAK,YAAY;AAC9I,cAAM,sBAAsB,IAAI;AAEhC,eAAO;MACX;;;;;;;;MAiBO,aAAa,sBAAsB,WAAmB,aAAuB,aAAoC;AACpH,cAAM,MAAM,gBAAW,QAAX,gBAAW,SAAX,cAAe,wBAAuB,mBAAmB,kBAAkB;AACvF,YAAI,cAAc,UAAU;AACxB,iBAAO;;AAGX,cAAM,aAAa,MAAM,wBAAuB,qBAAqB,wBAAuB,aAAa,MAAM,UAAU,QAAQ,MAAM,GAAG,GAAG,IAAI;AACjJ,YAAI,sBAAsB,YAAY,WAAW;AACjD,eAAO;MACX;;;;;;;MAQO,sBAAsB,WAAmB,aAAqB;AACjE,eAAO,wBAAuB,sBAAsB,WAAW,aAAa,IAAI;MACpF;;;;;;;;MASO,aAAa,mBAAmB,KAAa,aAAuB,aAAoC;AAC3G,cAAM,MAAM,gBAAW,QAAX,gBAAW,SAAX,cAAe,wBAAuB,mBAAmB,cAAc;AACnF,cAAM,aAAa,MAAM,wBAAuB,qBAAqB,GAAG;AACxE,YAAI,sBAAsB,YAAY,WAAW;AACjD,eAAO;MACX;;;;;;;MAQO,kBAAkB,KAAa,aAAqB;AACvD,eAAO,wBAAuB,mBAAmB,KAAK,aAAa,IAAI;MAC3E;MAEQ,OAAO,qBAAqB,KAAa,UAAmB,OAAK;AACrE,YAAI,QAAQ,IAAI;AACZ,iBAAO,QAAQ,OAAO,iBAAiB;;AAG3C,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACnC,gBAAM,UAAU,IAAI,WAAU;AAC9B,kBAAQ,iBAAiB,oBAAoB,MAAK;AAC9C,gBAAI,QAAQ,cAAc,GAAG;AACzB,kBAAI,QAAQ,UAAU,KAAK;AACvB,oBAAI;AACJ,oBAAI,SAAS;AACT,wBAAM,UAAU,KAAK,MAAM,KAAK,MAAM,QAAQ,YAAY,EAAE,WAAW;AACvE,wBAAM,QAAQ,aAAa,IAAI,YAAY,OAAO,EAAE,OAAO,qBAAqB,QAAQ,UAAU,CAAC,IAAI,QAAQ;uBAC5G;AACH,wBAAM,QAAQ;;AAElB,sBAAM,sBAAsB,KAAK,MAAM,GAAG;AAC1C,wBAAQ,mBAAmB;qBACxB;AACH,uBAAO,gBAAgB;;;UAGnC,CAAC;AACD,kBAAQ,KAAK,OAAO,GAAG;AACvB,kBAAQ,KAAI;QAChB,CAAC;MACL;;;;;;;;MASQ,OAAO,UAAU,UAAmB,UAAiB;AACzD,eAAO,EACH,SAAS,UAAU,SAAS,UAAU,SAAS,iBAC/C,SAAS,UAAU,SAAS,gBAAgB,SAAS,WACrD,SAAS,UAAU,SAAS,iBAAiB,SAAS,WACtD,SAAS,UAAU,SAAS,UAAU,SAAS;MAEvD;;;;;;;;;;;;MAaO,OAAO,cACV,MACA,QAAQ,MACR,SAAS,MACT,qBAAqB,MACrB,mBAAmB,OACnB,SACA,wBAAoI,KAAK,iBAAe;AAGxJ,cAAM,WAAW,WAAU;AAC3B,cAAM,SAAS,IAAI,wBACf,8BAA8B,KAAK,IAAI,KAAK,QAAQ,KACpD,OACA,QACA,KAAK,SAAQ,GACb,MACA,QAAQ,wBACR,OAAO;AAGX,8BAAsB,MAAM,UAAU,QAAQ,gBAAgB;AAE9D,eAAO,aAAa,MAAM,kBAAkB;AAC5C,eAAO;MACX;MAEQ,OAAO,gBAAgB,MAAoB,UAAkB,SAAiC,kBAAyB;AAC3H,cAAM,oBAAoB,SAAS,0BAA0B;AAC7D,YAAI,CAAC,mBAAmB;AACpB,gBAAM;;AAGV,cAAM,WAA6B,IAAI,kBAAkB,sCAAsC,KAAK,IAAI,KAAK,QAAQ,KAAK,KAAK,SAAQ,CAAE;AACzI,iBAAS,kBAAkB;AAC3B,iBAAS,eAAe,OAAO,MAAK;AACpC,iBAAS,gBAAgB,OAAO,MAAK;AACrC,YAAI,kBAAkB;AAClB,mBAAS,iBAAiB;AAC1B,mBAAS,kBAAkB;AAC3B,kBAAQ,WAAW;eAChB;AACH,mBAAS,kBAAkB;AAC3B,mBAAS,iBAAiB;;AAE9B,aAAK,WAAW;MACpB;;;;;;;;;;MAWO,OAAO,qBAAqB,MAAoB,QAAQ,MAAM,SAAS,MAAM,qBAAqB,MAAM,SAAiB;AAC5H,cAAM,SAAS,IAAI,wBAAuB,KAAK,OAAO,2BAA2B,OAAO,QAAQ,KAAK,SAAQ,GAAI,MAAM,QAAQ,wBAAwB,OAAO;AAC9J,eAAO,aAAa,MAAM,kBAAkB;AAC5C,eAAO;MACX;;;;;;;;;;;;;;MAcO,OAAO,mBACVF,OACA,aAAsB,MACtB,QAAyB,MACzB,WAAW,QAAQ,uBACnB,kBAA2B,OAAK;AAEhC,cAAM,SAAS,IAAI,wBAAuBA,OAAM,GAAG,GAAG,OAAO,OAAO,QAAQ;AAE5E,cAAM,cAAc,OAAO,SAAQ;AACnC,cAAM,QAAQ,IAAI,MAAMA,QAAO,UAAU,MAAM,aAAa,CAAC,UAAU;AACvE,cAAM,UAAU;AAChB,eAAO,kBAAkB;AACzB,eAAO,gBAAgB;AAEvB,YAAI,mBAAmB,aAAa;AAChC,gBAAM,WAAW,IAAI,YAAY,UAAS,EAAG,wBAAuB;AACpE,iBAAO,eAAe,SAAS;AAC/B,iBAAO,eAAe,SAAS;;AAInC,eAAO,OAAM;AACb,eAAO;MACX;;;;;MAMO,MAAM,OAAa;AACtB,cAAM,MAAM,KAAK;AACjB,aAAK,YAAW;MACpB;;;;;;MAOO,QAAQ,OAAe,QAAc;AACxC,cAAM,QAAQ,OAAO,MAAM;AAC3B,aAAK,YAAW;MACpB;MAEQ,mBAAgB;AACpB,YAAI,KAAK,WAAU,GAAI;AACnB,eAAK,qBAAqB,gBAAgB,IAAI;AAE9C,eAAK,qBAAqB,MAAK;;MAEvC;;;;MAKO,aAAU;AACb,eAAO,KAAK,eAAe,QAAO;MACtC;;AA39Cc,2BAAA,aAAa,UAAU;AAGvB,2BAAA,wBAAwB;;;;;AC1C1C,IAQa;AARb;;;AAQM,IAAO,wCAAP,MAA4C;;;;;MAkB9C,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;;;;MAKA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAc;AACvC,YAAI,UAAU,KAAK,oBAAoB;AACnC;;AAGJ,aAAK,qBAAqB;AAE1B,YAAI,OAAO;AACP,eAAK,yBAAyB,KAAK,QAAQ,wBAAwB,IAAI,MAAK;AACxE,iBAAK,YAAY,gBAAe;UACpC,CAAC;AAED,eAAK,uBAAuB,KAAK,QAAQ,sBAAsB,IAAI,MAAK;AACpE,iBAAK,YAAY,cAAc,IAAI;UACvC,CAAC;eACE;AACH,eAAK,QAAQ,wBAAwB,OAAO,KAAK,sBAAsB;AACvE,eAAK,yBAAyB;AAC9B,eAAK,QAAQ,sBAAsB,OAAO,KAAK,oBAAoB;AACnE,eAAK,uBAAuB;;MAEpC;;;;MAKA,IAAW,oBAAiB;AACxB,eAAO,KAAK;MAChB;MAEA,IAAW,kBAAkB,OAAc;AACvC,YAAI,UAAU,KAAK,oBAAoB;AACnC;;AAGJ,aAAK,qBAAqB;AAE1B,YAAI,OAAO;AACP,eAAK,yBAAyB,KAAK,QAAQ,wBAAwB,IAAI,MAAK;AACxE,iBAAK,YAAY,gBAAe;UACpC,CAAC;AAED,eAAK,uBAAuB,KAAK,QAAQ,sBAAsB,IAAI,MAAK;AACpE,iBAAK,YAAY,cAAc,IAAI;UACvC,CAAC;eACE;AACH,eAAK,QAAQ,wBAAwB,OAAO,KAAK,sBAAsB;AACvE,eAAK,yBAAyB;AAC9B,eAAK,QAAQ,sBAAsB,OAAO,KAAK,oBAAoB;AACnE,eAAK,uBAAuB;;MAEpC;;;;;;MAMA,YAIW,SAA+B;AAA/B,aAAA,UAAA;AAhGH,aAAA,qBAAqB;AACrB,aAAA,cAAc,IAAI,YAAW;AAE7B,aAAA,qBAAqB;AACrB,aAAA,cAAc,IAAI,YAAW;AAG7B,aAAA,yBAAqE;AACrE,aAAA,uBAAmE;AACnE,aAAA,yBAAqE;AACrE,aAAA,uBAAmE;MAuFxE;;;;MAKI,UAAO;AACV,aAAK,QAAQ,wBAAwB,OAAO,KAAK,sBAAsB;AACvE,aAAK,yBAAyB;AAC9B,aAAK,QAAQ,sBAAsB,OAAO,KAAK,oBAAoB;AACnE,aAAK,uBAAuB;AAC5B,aAAK,QAAQ,wBAAwB,OAAO,KAAK,sBAAsB;AACvE,aAAK,yBAAyB;AAC9B,aAAK,QAAQ,sBAAsB,OAAO,KAAK,oBAAoB;AACnE,aAAK,uBAAuB;AAEtB,aAAK,UAAW;MAC1B;;;;;;AC5HJ,IAGM,gBAKO;AARb;;;AAGA,IAAM,iBAAiB;AAKjB,IAAO,YAAP,MAAgB;;;;;MA2BlB,YAAY,cAAmB,MAAI;AA1B3B,aAAA,SAAc,CAAA;AAEd,aAAA,aAAkB;UACtB,SAAS;UACT,WAAW;UACX,MAAM;;AAGF,aAAA,YAAqB;AAErB,aAAA,oBAAyB;UAC7B,yBAAyB;UACzB,uBAAuB;UACvB,qBAAqB;UACrB,mBAAmB;UACnB,SAAS;;AAYT,YAAI,aAAa;AACb,eAAK,eAAe;;MAE5B;MAEQ,iBAAiB,gBAAmB;AACxC,YAAI,UAAe;AAEnB,YAAI,KAAK,cAAc;AACnB,oBAAU,KAAK;;AAEnB,YAAI,QAAQ;AACZ,gBAAQ,MAAM,MAAM,GAAG;AAEvB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,oBAAU,QAAQ,MAAM,CAAC,CAAC;;AAE9B,eAAO;MACX;MAEQ,mBAAmB,eAAqB;AAC5C,cAAM,YAAY,cAAc,MAAM,GAAG;AACzC,cAAM,YAAY,SAAS,iBAAiB,UAAU,CAAC,CAAC;AACxD,eAAO,UAAU,UAAU,CAAC,CAAC;MACjC;MAEQ,kBAAkB,MAAW,QAAa,aAAsB,MAAI;AACxE,YAAI;AACA,gBAAM,YAAY,SAAS,iBAAiB,KAAK,QAAQ;AACzD,gBAAM,UAAU,IAAI,UAAS;AAE7B,cAAI,UAAU,YAAY;AACtB,mBAAO,WAAW,OAAO;;AAG7B,mBAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,KAAK;AAC7C,gBAAI,KAAK,WAAW,CAAC,EAAE,KAAK,YAAW,EAAG,SAAS,YAAY,GAAG;AAC9D;;AAGJ,gBAAI,KAAK,WAAW,CAAC,EAAE,KAAK,YAAW,EAAG,SAAS,YAAY,GAAG;AAC9D,oBAAM,UAAU,KAAK,iBAAiB,KAAK,WAAW,CAAC,EAAE,KAAK;AAC9D,sBAAQ,KAAK,WAAW,CAAC,EAAE,IAAI,EAAE,IAAI,OAAO;AAE5C;uBACO,KAAK,WAAW,CAAC,EAAE,QAAQ,gBAAgB;AAClD,kBAAI,KAAK,cAAc;AACnB,wBAAQ,aAAa,KAAK,aAAa,KAAK,WAAW,CAAC,EAAE,KAAK,CAAC;qBAC7D;AACH,wBAAQ,aAAa,OAAO,KAAK,WAAW,CAAC,EAAE,KAAK,CAAC;;uBAElD,KAAK,WAAW,CAAC,EAAE,MAAM,WAAW,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,MAAM,SAAS,IAAI,GAAG;AAC7F,oBAAM,UAAU,KAAK,iBAAiB,KAAK,WAAW,CAAC,EAAE,MAAM,UAAU,GAAG,KAAK,WAAW,CAAC,EAAE,MAAM,SAAS,CAAC,CAAC;AAChH,sBAAQ,KAAK,WAAW,CAAC,EAAE,IAAI,IAAI;uBAC5B,CAAC,KAAK,kBAAkB,KAAK,WAAW,CAAC,EAAE,IAAI,GAAG;AACzD,kBAAI,KAAK,WAAW,CAAC,EAAE,SAAS,UAAU,KAAK,WAAW,CAAC,EAAE,SAAS,SAAS;AAC3E,wBAAQ,KAAK,WAAW,CAAC,EAAE,IAAI,IAAI,KAAK,WAAW,CAAC,EAAE,SAAS;qBAC5D;AACH,wBAAQ,KAAK,WAAW,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,OAAO,KAAK,WAAW,CAAC,EAAE,KAAK,CAAC,IAAI,OAAO,KAAK,WAAW,CAAC,EAAE,KAAK,IAAI,KAAK,WAAW,CAAC,EAAE;;mBAErI;AACH,sBAAQ,KAAK,WAAW,CAAC,EAAE,IAAI,IAAI,KAAK,mBAAmB,KAAK,WAAW,CAAC,EAAE,KAAK;;;AAI3F,cAAI,CAAC,KAAK,WAAW,aAAa,IAAI,GAAG;AACrC,iBAAK,OAAO,KAAK,WAAW,OAAO,KAAK,KAAK,MAAM,EAAE,SAAS,MAAM,IAAI;AACxE,mBAAO;;AAGX,cAAI,KAAK,KAAK,WAAW,aAAa,IAAI,EAAE;AAC5C,cAAI,GAAG,WAAW,IAAI,KAAK,GAAG,SAAS,IAAI,GAAG;AAC1C,iBAAK,KAAK,iBAAiB,GAAG,UAAU,GAAG,GAAG,SAAS,CAAC,CAAC;;AAG7D,cAAI,CAAC,KAAK,OAAO,EAAE,GAAG;AAClB,iBAAK,OAAO,EAAE,IAAI;iBACf;AACH,kBAAM;;AAEV,iBAAO;iBACF,WAAW;AAChB,gBAAM,iDAAiD,KAAK,WAAW,MAAM,YAAY;;MAEjG;MAEQ,WAAW,MAAW,SAAc,QAAW;AACnD,YAAI;AACJ,YAAI;AACJ,YAAI;AACJ,cAAM,OAAO,KAAK;AAClB,YAAI;AACJ,YAAI,UAAU;AACd,YAAI;AACJ,YAAI,YAAY;AAChB,YAAI,eAAe;AACnB,YAAI,qBAAqB;AAEzB,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cAAI,KAAK,CAAC,EAAE,YAAY,KAAK,WAAW,SAAS;AAC7C;;AAEJ,cAAI,KAAK,CAAC,EAAE,YAAY,OAAO;AAC3B,kBAAM,wDAAwD,KAAK,CAAC,EAAE;;AAE1E,uBAAa;AACb,oBAAU,KAAK,CAAC,EAAE;AAElB,cAAI,CAAC,KAAK,CAAC,EAAE,WAAW,aAAa,QAAQ,GAAG;AAC5C,kBAAM;;AAEV,mBAAS,OAAO,KAAK,CAAC,EAAE,WAAW,aAAa,QAAQ,EAAE,SAAS;AACnE,oBAAU,KAAK,CAAC,EAAE,WAAW,aAAa,SAAS,IAAI,KAAK,MAAM,KAAK,CAAC,EAAE,WAAW,aAAa,SAAS,EAAE,SAAS,IAAI;AAC1H,kBAAQ,iBAAiB,QAAQ,OAAO;AAExC,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,gBAAI,QAAQ,CAAC,EAAE,YAAY,KAAK,WAAW,SAAS;AAChD;;AAEJ,gBAAI,QAAQ,CAAC,EAAE,YAAY,UAAU;AACjC,oBAAM,2DAA2D,QAAQ,CAAC,EAAE;;AAEhF,4BAAgB;AAChB,gBAAI,YAAY,KAAK,eAAe,oBAAoB;AACpD,oBAAM;;AAGV,gBAAI,aAAa,GAAG;AAChB,kBAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,aAAa,OAAO,GAAG;AAC9C,sBAAM;;AAEV,sBAAQ,OAAO,QAAQ,CAAC,EAAE,WAAW,aAAa,OAAO,EAAE,SAAS;AACpE,wBAAU,QAAQ,CAAC,EAAE,WAAW,aAAa,SAAS,IAAI,KAAK,MAAM,QAAQ,CAAC,EAAE,WAAW,aAAa,SAAS,EAAE,SAAS,IAAI;AAChI,sBAAQ,oBAAoB,OAAO,OAAO;;AAG9C,oBAAQ,QAAQ,CAAC,EAAE;AAEnB,qBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,kBAAI,MAAM,CAAC,EAAE,YAAY,KAAK,WAAW,SAAS;AAC9C;;AAEJ,yBAAW,KAAK,kBAAkB,MAAM,CAAC,GAAG,SAAS,KAAK;AAC1D,sBAAQ,WAAW,UAAU,WAAW,YAAY;AACpD,kBAAI,MAAM,CAAC,EAAE,YAAY;AACrB,qBAAK,UAAU,MAAM,CAAC,EAAE,YAAY,QAAQ;;;;AAIxD,cAAI,aAAa,GAAG;AAChB,iCAAqB;;AAEzB,yBAAe;;AAGnB,YAAI,KAAK,aAAa;AAClB,eAAK,UAAU,KAAK,aAAa,MAAM;;MAE/C;MAEQ,cAAc,MAAW,SAAc,QAAW;AACtD,YAAI,KAAK,YAAY;AACjB,eAAK,UAAU,KAAK,YAAY,OAAO;;AAG3C,YAAI,KAAK,aAAa;AAClB,eAAK,UAAU,KAAK,aAAa,MAAM;;MAE/C;MAEQ,sBAAsB,MAAW,SAAc,UAAe,QAAa,UAAa;AAC5F,YAAI,KAAK,cAAc;AACnB,eAAK,aAAa,QAAQ,IAAI,OAAO,QAAQ;eAC1C;AACH,iBAAO,QAAQ,IAAI,OAAO,QAAQ;;AAGtC,YAAI,KAAK,YAAY;AACjB,eAAK,UAAU,KAAK,YAAY,SAAS,IAAI;;MAErD;MAEQ,yBAAyB,MAAW,SAAc,QAAW;AACjE,cAAM,aAAa,KAAK,WAAW,aAAa,YAAY,EAAE;AAE9D,YAAI,CAAC,WAAW,SAAS,MAAM,GAAG;AAC9B,gBAAM;eACH;AACH,cAAI,UAAU;AACd,gBAAM,iBAAiB,WAAW,MAAM,MAAM;AAC9C,cAAI,eAAe,SAAS,GAAG;AAC3B,kBAAM;;AAEV,cAAI,SAAS,eAAe,CAAC;AAC7B,cAAI,OAAO,WAAW,GAAG,KAAK,OAAO,SAAS,GAAG,GAAG;AAChD,sBAAU;;AAGd,cAAI,CAAC,WAAY,OAAO,WAAW,GAAG,KAAK,OAAO,SAAS,GAAG,GAAI;AAC9D,qBAAS,OAAO,UAAU,GAAG,OAAO,SAAS,CAAC;;AAGlD,cAAI,KAAK,cAAc;AACnB,qBAAS,KAAK,aAAa,MAAM;iBAC9B;AACH,qBAAS,OAAO,MAAM;;AAG1B,cAAI,SAAS;AACT,qBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,mBAAK,sBAAsB,MAAM,SAAS,eAAe,CAAC,GAAG,QAAQ,CAAC;;iBAEvE;AACH,uBAAW,KAAK,QAAQ;AACpB,mBAAK,sBAAsB,MAAM,SAAS,eAAe,CAAC,GAAG,QAAQ,CAAC;;;AAI9E,cAAI,KAAK,aAAa;AAClB,iBAAK,UAAU,KAAK,aAAa,MAAM;;;MAGnD;MAEQ,UAAU,MAAW,QAAa,YAAqB,OAAK;AAChE,YAAI,KAAK,YAAY,KAAK,WAAW,SAAS;AAC1C,cAAI,KAAK,aAAa;AAClB,iBAAK,UAAU,KAAK,aAAa,QAAQ,SAAS;;AAEtD;;AAGJ,YAAI,WAAW;AACX,eAAK,aAAa,MAAM,OAAO,MAAM,OAAO,UAAU,SAAS,EAAE;;AAGrE,cAAM,UAAU,KAAK,kBAAkB,MAAM,MAAM;AAEnD,YAAI,CAAC,KAAK,WAAW;AACjB,eAAK,YAAY;;AAGrB,YAAI,KAAK,YAAY,QAAQ;AACzB,eAAK,WAAW,MAAM,SAAS,MAAM;mBAC9B,CAAC,KAAK,WAAW,aAAa,YAAY,GAAG;AACpD,eAAK,cAAc,MAAM,SAAS,MAAM;eACrC;AACH,eAAK,yBAAyB,MAAM,SAAS,MAAM;;MAE3D;;;;;MAMO,WAAQ;AACX,eAAO,KAAK;MAChB;;;;;;MAOO,YAAY,IAAU;AACzB,eAAO,KAAK,OAAO,EAAE;MACzB;;;;;MAMO,WAAQ;AACX,eAAO,KAAK;MAChB;;;;MAIO,UAAO;AACV,YAAI,KAAK,WAAW;AAChB,eAAK,UAAU,QAAO;AACtB,eAAK,YAAY;AACjB,eAAK,SAAS,CAAA;;MAEtB;;;;;;;;MASO,WAAW,SAAc,UAAe,YAAkC,MAAM,UAA6C,MAAI;AACpI,cAAM,QAAQ,IAAI,eAAc;AAChC,cAAM,SAAS,MAAK;AAChB,cAAI,MAAM,eAAe,KAAK,MAAM,WAAW,KAAK;AAChD,gBAAI,CAAC,MAAM,aAAa;AACpB,kBAAI,SAAS;AACT,wBAAQ,cAAc;AACtB;qBACG;AACH,sBAAM;;;AAId,kBAAM,SAAS,MAAM,YAAY;AACjC,iBAAK,UAAU,OAAO,YAAY,QAAQ;AAC1C,iBAAK,YAAY;AAEjB,gBAAI,WAAW;AACX,wBAAS;;;QAGrB;AAEA,cAAM,UAAU,WAAA;AACZ,cAAI,SAAS;AACT,oBAAQ,6CAA6C;;QAE7D;AAEA,cAAM,KAAK,OAAO,SAAS,IAAI;AAC/B,cAAM,KAAI;MACd;;;;;;;MAOO,MAAM,gBAAgB,SAAc,UAAa;AACpD,eAAO,IAAI,QAAQ,CAAC,SAAc,WAAe;AAC7C,eAAK,WAAW,SAAS,UAAU,SAAS,MAAM;QACtD,CAAC;MACL;;;;;;ACnXJ;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;",
  "names": ["name", "name", "name", "TextWrapping", "name", "name", "name", "name", "name", "name", "name", "name", "labelText", "minusPound", "name", "name", "name", "name", "name", "name", "name", "name", "name", "value", "name", "name", "name", "name", "name", "name", "name", "name", "name", "transformedX", "transformedY"]
}
